<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL创建数据库,添加用户,用户授权实操方法</title>
      <link href="2021/04/09/mysql-chuang-jian-shu-ju-ku-tian-jia-yong-hu-yong-hu-shou-quan-shi-cao-fang-fa/"/>
      <url>2021/04/09/mysql-chuang-jian-shu-ju-ku-tian-jia-yong-hu-yong-hu-shou-quan-shi-cao-fang-fa/</url>
      
        <content type="html"><![CDATA[<p><strong>一、创建MySQL数据库</strong></p><p>1.创建数据库语法</p><pre><code class="line-numbers language-sql">--创建名称为“testdb”数据库，并设定编码集为utf8CREATE DATABASE IF NOT EXISTS testdb DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</code></pre><p><strong>二、创建用户</strong></p><p>1.新建用户</p><pre><code class="line-numbers language-sql"> --创建了一个名为：test 密码为：1234 的用户 create user &#39;test&#39;@&#39;localhost&#39; identified by &#39;1234&#39;;</code></pre><blockquote><p>注意：<br>此处的”localhost”，是指该用户只能在本地登录，不能在另外一台机器上远程登录。如果想远程登录的话，将”localhost”改为”%”，表示在任何一台电脑上都可以登录。也可以指定某台机器可以远程登录。</p></blockquote><p>2.查询用户</p><pre><code class="line-numbers language-sql">--查询用户select user,host from mysql.user;</code></pre><p>3.删除用户</p><pre><code class="line-numbers language-sql">--删除用户“test”drop user test@localhost ;--若创建的用户允许任何电脑登陆，删除用户如下drop user test@&#39;%&#39;;</code></pre><p>4.更改密码</p><pre><code class="line-numbers language-sql">--方法1，密码实时更新；修改用户“test”的密码为“1122”set password for test =password(&#39;1122&#39;);--方法2，需要刷新；修改用户“test”的密码为“1234”update mysql.user set password=password(&#39;1234&#39;) where user=&#39;test&#39;--刷新flush privileges;</code></pre><p>5.用户分配权限</p><pre><code class="line-numbers language-sql">--授予用户test通过外网IP对数据库“testdb”的全部权限grant all privileges on &#39;testdb&#39;.* to &#39;test&#39;@&#39;%&#39; identified by &#39;1234&#39;; --刷新权限flush privileges; --授予用户“test”通过外网IP对于该数据库“testdb”中表的创建、修改、删除权限,以及表数据的增删查改权限grant create,alter,drop,select,insert,update,delete on testdb.* to test@&#39;%&#39;;   </code></pre><p>6.查看用户权限</p><pre><code class="line-numbers language-sql">--查看用户“test”show grants for test;</code></pre><blockquote><p>注意：修改完权限以后 一定要刷新服务，或者重启服务，刷新服务用：flush privileges;</p></blockquote><p>例子：</p><pre><code class="line-numbers language-sql">create user &#39;A&#39;@&#39;%&#39; identified by &#39;A&#39;;select user,host from mysql.userGrant all privileges on test_db.* to &#39;A&#39;@&#39;%&#39;;  grant create,alter,drop,select,insert,update,delete on test_db.* to A@&#39;%&#39;;flush privileges;--其他操作drop user A@&#39;%&#39;;update mysql.user set host=&#39;%&#39; where user=&#39;A&#39;;show grants for A@&#39;%&#39;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从ReadWriteLock到Java锁</title>
      <link href="2021/04/09/cong-readwritelock-dao-java-suo/"/>
      <url>2021/04/09/cong-readwritelock-dao-java-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="可重入锁详解"><a href="#可重入锁详解" class="headerlink" title="可重入锁详解"></a>可重入锁详解</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>什么是 “可重入”，可重入就是说某个线程已经获得某个锁，可以再次获取锁而不会出现死锁。</p><pre><code class="line-numbers language-java">package com.xu.lock;// 演示可重入锁是什么意思，可重入，就是可以重复获取相同的锁，synchronized和ReentrantLock都是可重入的// 可重入降低了编程复杂性public class WhatReentrant &#123;    public static void main(String[] args) &#123;        new Thread(new Runnable() &#123;            @Override            public void run() &#123;                synchronized (this) &#123;                    System.out.println(&quot;第1次获取锁，这个锁是：&quot; + this);                    int index = 1;                    while (true) &#123;                        synchronized (this) &#123;                            System.out.println(&quot;第&quot; + (++index) + &quot;次获取锁，这个锁是：&quot; + this);                        &#125;                        if (index == 10) &#123;                            break;                        &#125;                    &#125;                &#125;            &#125;        &#125;).start();    &#125;&#125;</code></pre><p><img src="/2021/04/09/cong-readwritelock-dao-java-suo/1617934588759-f84e34fd-e4d6-4663-9233-8f6dbe273c04.png" alt="image.png"></p><pre><code class="line-numbers language-java">package com.xu.lock;import java.util.Random;import java.util.concurrent.locks.ReentrantLock;// 演示可重入锁是什么意思public class WhatReentrant2 &#123;    public static void main(String[] args) &#123;        ReentrantLock lock = new ReentrantLock();                new Thread(new Runnable() &#123;            @Override            public void run() &#123;                try &#123;                    lock.lock();                    System.out.println(&quot;第1次获取锁，这个锁是：&quot; + lock);                    int index = 1;                    while (true) &#123;                        try &#123;                            lock.lock();                            System.out.println(&quot;第&quot; + (++index) + &quot;次获取锁，这个锁是：&quot; + lock);                                                        try &#123;                                Thread.sleep(new Random().nextInt(200));                            &#125; catch (InterruptedException e) &#123;                                e.printStackTrace();                            &#125;                                                        if (index == 10) &#123;                                break;                            &#125;                        &#125; finally &#123;                            lock.unlock();                        &#125;                    &#125;                &#125; finally &#123;                    lock.unlock();                &#125;            &#125;        &#125;).start();    &#125;&#125;</code></pre><p><img src="/2021/04/09/cong-readwritelock-dao-java-suo/1617934811627-3cf08b46-79c3-42e6-8dab-10073443a1c4.png" alt="image.png"></p><p>可以发现没发生死锁，可以多次获取相同的锁</p><p>可重入锁有</p><ul><li>synchronized</li><li>ReentrantLock</li></ul><h3 id="使用ReentrantLock的注意点"><a href="#使用ReentrantLock的注意点" class="headerlink" title="使用ReentrantLock的注意点"></a>使用ReentrantLock的注意点</h3><p>ReentrantLock 和 synchronized 不一样，需要手动释放锁，所以使用 ReentrantLock的时候一定要<strong>手动释放锁</strong>，并且<strong>加锁次数和释放次数要一样</strong></p><h2 id="ReentrantReadWriteLock读写锁"><a href="#ReentrantReadWriteLock读写锁" class="headerlink" title="ReentrantReadWriteLock读写锁"></a>ReentrantReadWriteLock读写锁</h2><h3 id="读写锁简介"><a href="#读写锁简介" class="headerlink" title="读写锁简介"></a>读写锁简介</h3><p>  现实中有这样一种场景：对共享资源有读和写的操作，且写操作没有读操作那么频繁。在没有写操作的时候，多个线程同时读一个资源没有任何问题，所以应该允许多个线程同时读取共享资源；但是如果一个线程想去写这些共享资源，就不应该允许其他线程对该资源进行读和写的操作了。</p><p>　针对这种场景，<strong>JAVA的并发包提供了读写锁ReentrantReadWriteLock，它表示两个锁，一个是读操作相关的锁，称为共享锁；一个是写相关的锁，称为排他锁</strong>，描述如下：</p><p>线程进入读锁的前提条件：</p><p>没有其他线程的写锁，</p><p>没有写请求或者<strong>有写请求，但调用线程和持有锁的线程是同一个。</strong></p><p>线程进入写锁的前提条件：</p><p>没有其他线程的读锁</p><p>没有其他线程的写锁</p><p>而读写锁有以下三个重要的特性：</p><p>（1）公平选择性：支持非公平（默认）和公平的锁获取方式，吞吐量还是非公平优于公平。</p><p>（2）重进入：读锁和写锁都支持线程重进入。</p><p>（3）锁降级：遵循获取写锁、获取读锁再释放写锁的次序，写锁能够降级成为读锁。</p><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><p>ReentrantLock 是 java.util.concurrent（J.U.C）包中的锁。</p><p>在Java同步框架AbstractQueuedSynchronizer提到了两个概念，一个是独占锁，一个是共享锁，所谓独占锁就是只能有一个线程获取到锁，其他线程必须在这个锁释放了锁之后才能竞争而获得锁。而共享锁则可以允许多个线程获取到锁。</p><h1 id><a href="#" class="headerlink" title></a></h1><h2 id="Java设计一个高性能缓存模型（两种方法）"><a href="#Java设计一个高性能缓存模型（两种方法）" class="headerlink" title="Java设计一个高性能缓存模型（两种方法）"></a>Java设计一个高性能缓存模型（两种方法）</h2><h3 id="1-缓存模型（线程不安全）"><a href="#1-缓存模型（线程不安全）" class="headerlink" title="1. 缓存模型（线程不安全）"></a>1. 缓存模型（线程不安全）</h3><pre><code class="line-numbers language-java">import java.util.HashMap;import java.util.Map;public class CacheDemo &#123;    //声明一个map,用来作为缓存模型    private static Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();    public  static Object getValue(String key) &#123;        Object value = map.get(key);        if (value == null) &#123;            value = &quot;abc&quot;;//这里是去数据库查询            map.put(key, value);//将数据放到缓存模型中        &#125;        return value;    &#125;&#125;</code></pre><p>从上面的代码可以看出，当10个线程同时访问的时候，会出现到数据查询次数也是10次，这样数据库访问压力大，不推荐使用</p><h3 id="2-缓存模型（线程安全）"><a href="#2-缓存模型（线程安全）" class="headerlink" title="2. 缓存模型（线程安全）"></a>2. 缓存模型（线程安全）</h3><pre><code class="line-numbers language-java">import java.util.HashMap;import java.util.Map;public class CacheDemo &#123;    //声明一个map,用来作为缓存模型    private static Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();    public synchronized static Object getValue(String key) &#123;        Object value = map.get(key);        if (value == null) &#123;            value = &quot;abc&quot;;//这里是去数据库查询            map.put(key, value);//将数据放到缓存模型中        &#125;        return value;    &#125;&#125;</code></pre><p>在getValue方法上加上后，10个线程同时访问的话，减少了数据库访问压力，但是出现一个情况，就是线程之间要通过排队抢锁才能进行访问 </p><h3 id="3-缓存模型（高性能）"><a href="#3-缓存模型（高性能）" class="headerlink" title="3. 缓存模型（高性能）"></a>3. 缓存模型（高性能）</h3><h4 id="3-1-通过synchronized设计"><a href="#3-1-通过synchronized设计" class="headerlink" title="3.1 通过synchronized设计"></a>3.1 通过synchronized设计</h4><pre><code class="line-numbers language-java">import java.util.HashMap;import java.util.Map;public class CacheDemo &#123;    //声明一个map,用来作为缓存模型    private static Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();    public static Object getValue(String key) &#123;        Object value = map.get(key);        if(value==null)&#123;            synchronized (CacheDemo.class)&#123;                if(value==null)&#123;                    value=&quot;abc&quot;;//这里是去数据库查询                    map.put(key,value);//将数据放到缓存模型中                &#125;            &#125;        &#125;        return value;    &#125;&#125;</code></pre><p> 从上面的代码设计可以看出，如果10个线程访问的数据已经存在于map中，不会出现竞争锁的情况，直接返回value，如果访问的数据不存在于map中，才会竞争锁进行数据库查询，并且只有第一个抢到锁的线程查询数据库，其他的线程拿到锁以后，发现value已经不为null了</p><h4 id="3-2-通过ReadWriteLock设计"><a href="#3-2-通过ReadWriteLock设计" class="headerlink" title="3.2 通过ReadWriteLock设计"></a>3.2 通过ReadWriteLock设计</h4><p>下面这个用的读写锁，设计思想和上面synchronized是一样的</p><pre><code class="line-numbers language-java">import java.util.HashMap;import java.util.Map;import java.util.concurrent.locks.ReadWriteLock;import java.util.concurrent.locks.ReentrantReadWriteLock;public class CacheDemo &#123;    //声明一个map,用来作为缓存模型    private static Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();    //声明一个读写锁    private static ReadWriteLock rwl = new ReentrantReadWriteLock();          public static Object getValue(String key) &#123;        Object value = null;        try &#123;            rwl.readLock().lock();//开启读锁            value = map.get(key);            if (value == null) &#123;                try &#123;                    rwl.readLock().unlock();//关闭读锁                    rwl.writeLock().lock();//开启写锁                    if (value == null) &#123;                        value = &quot;abc&quot;;//这里是去数据库查询                        map.put(key, value);//将数据放到缓存模型中                    &#125;                &#125;catch (Exception e)&#123;                    e.printStackTrace();                &#125;                finally &#123;                    rwl.writeLock().unlock();//关闭写锁                    rwl.readLock().lock();//开启读锁                &#125;            &#125;        &#125;catch (Exception e)&#123;            e.printStackTrace();        &#125;        finally &#123;            rwl.readLock().unlock();//关闭读锁        &#125;        return value;    &#125;&#125;</code></pre><h2 id="通俗易懂-悲观锁、乐观锁、可重入锁、自旋锁、偏向锁、轻量-重量级锁、读写锁、各种锁及其Java实现！"><a href="#通俗易懂-悲观锁、乐观锁、可重入锁、自旋锁、偏向锁、轻量-重量级锁、读写锁、各种锁及其Java实现！" class="headerlink" title="通俗易懂 悲观锁、乐观锁、可重入锁、自旋锁、偏向锁、轻量/重量级锁、读写锁、各种锁及其Java实现！"></a>通俗易懂 悲观锁、乐观锁、可重入锁、自旋锁、偏向锁、轻量/重量级锁、读写锁、各种锁及其Java实现！</h2><p>转载自<a href="https://zhuanlan.zhihu.com/p/71156910">https://zhuanlan.zhihu.com/p/71156910</a></p><p>网上关于Java中锁的话题可以说资料相当丰富，但相关内容总感觉是一大串术语的罗列，让人云里雾里，读完就忘。本文希望能为Java新人做一篇通俗易懂的整合，旨在消除对各种各样锁的术语的恐惧感，对每种锁的底层实现浅尝辄止，但是在需要时能够知道去查什么。</p><p>首先要打消一种想法，就是一个锁只能属于一种分类。其实并不是这样，比如一个锁可以同时是悲观锁、可重入锁、公平锁、可中断锁等等，就像一个人可以是男人、医生、健身爱好者、游戏玩家，这并不矛盾。OK，国际惯例，上干货。</p><h3 id="〇、synchronized与Lock"><a href="#〇、synchronized与Lock" class="headerlink" title="〇、synchronized与Lock"></a>〇、synchronized与Lock</h3><p>Java中有两种加锁的方式：一种是用<strong>synchronized关键字</strong>，另一种是用<strong>Lock接口</strong>的实现类。</p><p>形象地说，synchronized关键字是<strong>自动档</strong>，可以满足一切日常驾驶需求。但是如果你想要玩漂移或者各种骚操作，就需要<strong>手动档</strong>了——各种Lock的实现类。</p><p>所以如果你只是想要简单的加个锁，对性能也没什么特别的要求，用synchronized关键字就足够了。自Java 5之后，才在java.util.concurrent.locks包下有了另外一种方式来实现锁，那就是Lock。也就是说，<strong>synchronized是Java语言内置的关键字，而Lock是一个接口</strong>，这个接口的实现类在代码层面实现了锁的功能，具体细节不在本文展开，有兴趣可以研究下AbstractQueuedSynchronizer类，写得可以说是牛逼爆了。</p><p><img src="/2021/04/09/cong-readwritelock-dao-java-suo/1617947581977-be460e52-f8f8-4a2c-a97b-fb43af7607fa.png" alt="image">其实只需要关注三个类就可以了：ReentrantLock类、ReadLock类、WriteLock类。</p><p><strong>ReentrantLock、ReadLock、WriteLock</strong> 是Lock接口最重要的三个实现类。对应了“可重入锁”、“读锁”和“写锁”，后面会讲它们的用途。</p><p>ReadWriteLock其实是一个工厂接口，而ReentrantReadWriteLock是ReadWriteLock的实现类，它包含两个静态内部类ReadLock和WriteLock。这两个静态内部类又分别实现了Lock接口。</p><p>我们停止深究源码，仅从使用的角度看，Lock与synchronized的区别是什么？在接下来的几个小节中，我将梳理各种锁分类的概念，以及synchronized关键字、各种Lock实现类之间的区别与联系。</p><p>备注：</p><p>类的内部类</p><p>ReentrantReadWriteLock有五个内部类，五个内部类之间也是相互关联的。内部类的关系如下图所示。</p><p><img src="/2021/04/09/cong-readwritelock-dao-java-suo/1617947885762-9710cf84-e6e9-4ffc-b4ba-fe1e0c94aa75.png" alt="image"></p><p>说明：如上图所示，Sync继承自AQS、NonfairSync继承自Sync类、FairSync继承自Sync类（通过构造函数传入的布尔值决定要构造哪一种Sync实例）；ReadLock实现了Lock接口、WriteLock也实现了Lock接口。</p><h3 id="一、悲观锁与乐观锁"><a href="#一、悲观锁与乐观锁" class="headerlink" title="一、悲观锁与乐观锁"></a>一、悲观锁与乐观锁</h3><p>锁的一种宏观分类方式是<strong>悲观锁</strong>和<strong>乐观锁</strong>。悲观锁与乐观锁<strong>并不是特指某个锁</strong>（Java中没有哪个Lock实现类就叫PessimisticLock或OptimisticLock），而是在并发情况下的两种不同策略。</p><p>悲观锁（Pessimistic Lock）, 就是很悲观，每次去拿数据的时候都认为别人会修改。所以每次在拿数据的时候都会上锁。这样别人想拿数据就被挡住，直到悲观锁被释放。</p><p>乐观锁（Optimistic Lock）, 就是很乐观，每次去拿数据的时候都认为别人不会修改。所以<strong>不会上锁，不会上锁！</strong>但是如果想要更新数据，则会在<strong>更新前检查在读取至更新这段时间别人有没有修改过这个数据</strong>。如果修改过，则重新读取，再次尝试更新，循环上述步骤直到更新成功（当然也允许更新失败的线程放弃操作）。</p><p><strong>悲观锁阻塞事务，乐观锁回滚重试</strong>，它们各有优缺点，不要认为一种一定好于另一种。像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行重试，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。</p><h3 id="二、乐观锁的基础——CAS"><a href="#二、乐观锁的基础——CAS" class="headerlink" title="二、乐观锁的基础——CAS"></a>二、乐观锁的基础——CAS</h3><p>说到乐观锁，就必须提到一个概念：<strong>CAS</strong></p><p>什么是CAS呢？Compare-and-Swap，即<strong>比较并替换，</strong>也有叫做Compare-and-Set的，<strong>比较并设置</strong>。</p><p>1、比较：读取到了一个值A，在将其更新为B之前，检查原值是否仍为A（未被其他线程改动）。</p><p>2、设置：如果是，将A更新为B，结束。[<a href="https://zhuanlan.zhihu.com/p/71156910#ref_1">1]</a>如果不是，则什么都不做。</p><p>上面的两步操作是原子性的，可以简单地理解为瞬间完成，在CPU看来就是一步操作。</p><p>有了CAS，就可以实现一个<strong>乐观锁</strong>：</p><pre><code class="line-numbers language-java">data = 123; // 共享数据/* 更新数据的线程会进行如下操作 */flag = true;while (flag) &#123;    oldValue = data; // 保存原始数据    newValue = doSomething(oldValue);     // 下面的部分为CAS操作，尝试更新data的值    if (data == oldValue) &#123; // 比较        data = newValue; // 设置        flag = false; // 结束    &#125; else &#123;    // 啥也不干，循环重试    &#125;&#125;/*    很明显，这样的代码根本不是原子性的，   因为真正的CAS利用了CPU指令，   这里只是为了展示执行流程，本意是一样的。*/</code></pre><p>这是一个简单直观的乐观锁实现，它允许多个线程同时读取（因为根本没有加锁操作），但是只有一个线程可以成功更新数据，并导致其他要更新数据的线程回滚重试。 CAS利用CPU指令，从硬件层面保证了操作的原子性，以达到类似于锁的效果。</p><p><img src="/2021/04/09/cong-readwritelock-dao-java-suo/1617947582144-f3f2b9ca-d744-4a66-865e-91dcd53ba608.jpeg" alt="image">Java中真正的CAS操作调用的native方法</p><p>因为整个过程中并没有“加锁”和“解锁”操作，因此乐观锁策略也被称为<strong>无锁编程</strong>。换句话说，乐观锁其实不是“锁”，它仅仅是一个循环重试CAS的算法而已！</p><h3 id="三、自旋锁"><a href="#三、自旋锁" class="headerlink" title="三、自旋锁"></a>三、自旋锁</h3><p>有一种锁叫<strong>自旋锁</strong>。所谓自旋，说白了就是一个 while(true) 无限循环。</p><p>刚刚的乐观锁就有类似的无限循环操作，那么它是自旋锁吗？</p><blockquote><p>感谢评论区<a href="https://www.zhihu.com/people/zhao-chen-77-90">养猫的虾</a>的指正。</p></blockquote><p>不是。尽管自旋与 while(true) 的操作是一样的，但还是应该将这两个术语分开。“自旋”这两个字，特指自旋锁的自旋。</p><p>然而在JDK中并没有自旋锁（SpinLock）这个类，那什么才是自旋锁呢？读完下个小节就知道了。</p><h3 id="四、synchronized锁升级：偏向锁-→-轻量级锁-→-重量级锁"><a href="#四、synchronized锁升级：偏向锁-→-轻量级锁-→-重量级锁" class="headerlink" title="四、synchronized锁升级：偏向锁 → 轻量级锁 → 重量级锁"></a>四、synchronized锁升级：偏向锁 → 轻量级锁 → 重量级锁</h3><p>前面提到，synchronized关键字就像是汽车的<strong>自动档，</strong>现在详细讲这个过程。一脚油门踩下去，synchronized会从<strong>无锁</strong>升级为<strong>偏向锁</strong>，再升级为<strong>轻量级锁</strong>，最后升级为<strong>重量级锁</strong>，就像自动换挡一样。那么自旋锁在哪里呢？这里的轻量级锁就是一种<strong>自旋锁</strong>。</p><p>初次执行到synchronized代码块的时候，锁对象变成<strong>偏向锁</strong>（通过CAS修改对象头里的锁标志位），字面意思是“偏向于第一个获得它的线程”的锁。执行完同步代码块后，线程并<strong>不会主动释放偏向锁</strong>。当第二次到达同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程ID也在对象头里），如果是则正常往下执行。<strong>由于之前没有释放锁，这里也就不需要重新加锁。</strong>如果自始至终使用锁的线程只有一个，很明显偏向锁几乎没有额外开销，性能极高。</p><p>一旦有第二个线程加入<strong>锁竞争</strong>，偏向锁就升级为<strong>轻量级锁（自旋锁）</strong>。这里要明确一下什么是锁竞争：如果多个线程轮流获取一个锁，但是每次获取锁的时候都很顺利，没有发生阻塞，那么就不存在锁竞争。只有当某线程尝试获取锁的时候，发现该锁已经被占用，只能等待其释放，这才发生了锁竞争。</p><p>在轻量级锁状态下继续锁竞争，没有抢到锁的线程将<strong>自旋</strong>，即不停地循环判断锁是否能够被成功获取。获取锁的操作，其实就是通过CAS修改对象头里的锁标志位。先<strong>比较</strong>当前锁标志位是否为“释放”，如果是则将其<strong>设置</strong>为“锁定”，比较并设置是<strong>原子性</strong>发生的。这就算抢到锁了，然后线程将当前锁的持有者信息修改为自己。</p><p>长时间的自旋操作是非常消耗资源的，一个线程持有锁，其他线程就只能在原地空耗CPU，执行不了任何有效的任务，这种现象叫做<strong>忙等（busy-waiting）</strong>。如果多个线程用一个锁，但是没有发生锁竞争，或者发生了很轻微的锁竞争，那么synchronized就用轻量级锁，允许短时间的忙等现象。这是一种折衷的想法，<strong>短时间的忙等，换取线程在用户态和内核态之间切换的开销。</strong></p><p>显然，此忙等是有限度的（有个计数器记录自旋次数，默认允许循环10次，可以通过虚拟机参数更改）。如果锁竞争情况严重，某个达到最大自旋次数的线程，会将轻量级锁升级为<strong>重量级锁</strong>（依然是CAS修改锁标志位，但不修改持有锁的线程ID）。当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。在JDK1.6之前，synchronized直接加重量级锁，很明显现在得到了很好的优化。</p><p>一个锁只能按照 偏向锁、轻量级锁、重量级锁的顺序逐渐升级（也有叫<strong>锁膨胀</strong>的），不允许降级。</p><blockquote><p>感谢评论区<a href="https://www.zhihu.com/people/ding-yi-51-99">酷帅俊靓美</a>的问题：偏向锁的一个特性是，持有锁的线程在执行完同步代码块时不会释放锁。那么当第二个线程执行到这个synchronized代码块时是否一定会发生锁竞争然后升级为轻量级锁呢？线程A第一次执行完同步代码块后，当线程B尝试获取锁的时候，发现是偏向锁，会判断线程A是否仍然存活。<strong>如果线程A仍然存活，</strong>将线程A暂停，此时偏向锁升级为轻量级锁，之后线程A继续执行，线程B自旋。但是<strong>如果判断结果是线程A不存在了</strong>，则线程B持有此偏向锁，锁不升级。还有人对此有疑惑，我之前确实没有描述清楚，但如果要展开讲，涉及到太多新概念，可以新开一篇了。更何况有些太底层的东西，我没读过源码，没有自信说自己一定是对的。其实在升级为轻量级锁之前，虚拟机会让线程A尽快在安全点挂起，然后在它的栈中“伪造”一些信息，让线程A在被唤醒之后，认为自己一直持有的是轻量级锁。如果线程A之前正在同步代码块中，那么线程B自旋等待即可。如果线程A之前不在同步代码块中，它会在被唤醒后检查到这一情况并立即释放锁，让线程B可以拿到。这部分内容我之前也没有深入研究过，如果有说的不对的，请多多指教啊！</p></blockquote><h3 id="五、可重入锁（递归锁）"><a href="#五、可重入锁（递归锁）" class="headerlink" title="五、可重入锁（递归锁）"></a>五、可重入锁（递归锁）</h3><p>可重入锁的字面意思是“可以重新进入的锁”，即<strong>允许同一个线程多次获取同一把锁</strong>。比如一个递归函数里有加锁操作，递归过程中这个锁会阻塞自己吗？如果不会，那么这个锁就是<strong>可重入锁</strong>（因为这个原因可重入锁也叫做<strong>递归锁</strong>）<strong>。</strong></p><p>Java里只要以Reentrant开头命名的锁都是可重入锁，而且<strong>JDK提供的所有现成的Lock实现类，包括synchronized关键字锁都是可重入的。</strong>如果你需要不可重入锁，只能自己去实现了。网上不可重入锁的实现真的很多，就不在这里贴代码了。99%的业务场景用可重入锁就可以了，剩下的1%是什么呢？我也不知道，谁可以在评论里告诉我？</p><p><img src="/2021/04/09/cong-readwritelock-dao-java-suo/1617947582164-84f7c034-c756-4e95-b56c-8ac238953c99.png" alt="image">JDK提供的Lock的实现类都是可重入的</p><h3 id="六、公平锁、非公平锁"><a href="#六、公平锁、非公平锁" class="headerlink" title="六、公平锁、非公平锁"></a>六、公平锁、非公平锁</h3><p>如果多个线程申请一把<strong>公平锁</strong>，那么当锁释放的时候，先申请的先得到，非常公平。显然如果是<strong>非公平锁</strong>，后申请的线程可能先获取到锁，是随机或者按照其他优先级排序的。</p><p>对ReentrantLock类而言，通过构造函数传参<strong>可以指定该锁是否是公平锁，默认是非公平锁</strong>。一般情况下，非公平锁的吞吐量比公平锁大，如果没有特殊要求，优先使用非公平锁。</p><p><img src="/2021/04/09/cong-readwritelock-dao-java-suo/1617947582159-4d30ca9e-793b-45db-8315-f8d836a5fc4d.png" alt="image">ReentrantLock构造器可以指定为公平或非公平</p><p>对于synchronized而言，它也是一种<strong>非公平锁</strong>，但是并没有任何办法使其变成公平锁。</p><h3 id="七、可中断锁"><a href="#七、可中断锁" class="headerlink" title="七、可中断锁"></a>七、可中断锁</h3><p>可中断锁，字面意思是“可以<strong>响应中断</strong>的锁”。</p><p>这里的关键是理解什么是<strong>中断</strong>。Java并没有提供任何直接中断某线程的方法，只提供了<strong>中断机制</strong>。何谓“中断机制”？线程A向线程B发出“请你停止运行”的请求（线程B也可以自己给自己发送此请求），但线程B并不会立刻停止运行，而是自行选择合适的时机以自己的方式响应中断，也可以直接忽略此中断。也就是说，Java的<strong>中断不能直接终止线程</strong>，而是需要被中断的线程自己决定怎么处理。这好比是父母叮嘱在外的子女要注意身体，但子女是否注意身体，怎么注意身体则完全取决于自己。[<a href="https://zhuanlan.zhihu.com/p/71156910#ref_2">2]</a></p><p>回到锁的话题上来，如果线程A持有锁，线程B等待获取该锁。由于线程A持有锁的时间过长，线程B不想继续等待了，我们可以让线程B中断自己或者在别的线程里中断它，这种就是<strong>可中断锁</strong>。</p><p>在Java中，synchronized就是<strong>不可中断锁</strong>，而Lock的实现类都是<strong>可中断锁，</strong>可以简单看下Lock接口。</p><pre><code class="line-numbers language-java">/* Lock接口 */public interface Lock &#123;    void lock(); // 拿不到锁就一直等，拿到马上返回。    void lockInterruptibly() throws InterruptedException; // 拿不到锁就一直等，如果等待时收到中断请求，则需要处理InterruptedException。    boolean tryLock(); // 无论拿不拿得到锁，都马上返回。拿到返回true，拿不到返回false。    boolean tryLock(long time, TimeUnit unit) throws InterruptedException; // 同上，可以自定义等待的时间。    void unlock();    Condition newCondition();&#125;</code></pre><h3 id="八、读写锁、共享锁、互斥锁"><a href="#八、读写锁、共享锁、互斥锁" class="headerlink" title="八、读写锁、共享锁、互斥锁"></a>八、读写锁、共享锁、互斥锁</h3><p>读写锁其实是一对锁，一个读锁（共享锁）和一个写锁（互斥锁、排他锁）。</p><p>看下Java里的ReadWriteLock接口，它只规定了两个方法，一个返回读锁，一个返回写锁。</p><p><img src="/2021/04/09/cong-readwritelock-dao-java-suo/1617947582160-6204e421-3d0f-458b-bb08-74dc528df788.png" alt="image"></p><p>记得之前的乐观锁策略吗？所有线程随时都可以读，仅在写之前判断值有没有被更改。</p><p>读写锁其实做的事情是一样的，但是策略稍有不同。很多情况下，线程知道自己读取数据后，是否是为了更新它。那么何不在加锁的时候直接明确这一点呢？如果我读取值是为了更新它（SQL的for update就是这个意思），那么加锁的时候就直接加<strong>写锁</strong>，我持有写锁的时候别的线程无论读还是写都需要等待；如果我读取数据仅为了前端展示，那么加锁时就明确地加一个<strong>读锁，</strong>其他线程如果也要加读锁，不需要等待，可以直接获取（读锁计数器+1）。</p><p>虽然读写锁感觉与乐观锁有点像，但是<strong>读写锁是悲观锁策略</strong>。因为读写锁并没有在<strong>更新前</strong>判断值有没有被修改过，而是在<strong>加锁前</strong>决定应该用读锁还是写锁。乐观锁特指无锁编程，如果仍有疑惑可以再回到第一、二小节，看一下什么是“乐观锁”。</p><p>JDK提供的唯一一个ReadWriteLock接口实现类是ReentrantReadWriteLock。看名字就知道，它不仅提供了读写锁，而是都是可重入锁。 除了两个接口方法以外，ReentrantReadWriteLock还提供了一些便于外界监控其内部工作状态的方法，这里就不一一展开。</p><h3 id="九、回到悲观锁和乐观锁"><a href="#九、回到悲观锁和乐观锁" class="headerlink" title="九、回到悲观锁和乐观锁"></a>九、回到悲观锁和乐观锁</h3><blockquote><p>这篇文章经历过一次修改，我之前认为偏向锁和轻量级锁是乐观锁，重量级锁和Lock实现类为悲观锁，网上很多资料对这些概念的表述也很模糊，各执一词。</p></blockquote><p>先抛出我的结论：</p><p>我们在Java里使用的各种锁，<strong>几乎全都是悲观锁</strong>。synchronized从偏向锁、轻量级锁到重量级锁，全是悲观锁。JDK提供的Lock实现类全是悲观锁。其实只要有“锁对象”出现，那么就一定是悲观锁。因为<strong>乐观锁不是锁，而是一个在循环里尝试CAS的算法。</strong></p><p>那JDK并发包里到底有没有乐观锁呢？</p><p>有。java.util.concurrent.atomic包里面的<strong>原子类</strong>都是利用乐观锁实现的。</p><p><img src="/2021/04/09/cong-readwritelock-dao-java-suo/1617947582180-c1250e5b-dbf4-40d7-8189-2f4e535059f5.png" alt="image"></p><p>原子类AtomicInteger的自增方法为乐观锁策略</p><p>为什么网上有些资料认为偏向锁、轻量级锁是乐观锁？理由是它们底层用到了CAS？或者是把“乐观/悲观”与“轻量/重量”搞混了？其实，线程在抢占这些锁的时候，确实是循环+CAS的操作，感觉好像是乐观锁。但问题的关键是，我们说一个锁是悲观锁还是乐观锁，总是应该站在应用层，看它们是如何锁住应用数据的，而不是站在底层看抢占锁的过程。如果一个线程尝试获取锁时，发现已经被占用，它是否继续读取数据，等后续要更新时再决定要不要重试？对于偏向锁、轻量级锁来说，显然答案是否定的。无论是挂起还是忙等，对应用数据的读取操作都被“挡住”了。从这个角度看，它们确实是悲观锁。</p><p>退一步讲，也没有必要在这些术语上狠钻牛角尖，最重要的是理解它们的运行机制。想写得尽量简单一些，却发现洋洋洒洒近万字，只讲了个皮毛。深知自己水平有限，不敢保证完全正确，只能说路漫漫其修远兮，望指正。</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="2021/04/01/docker-chang-yong-ming-ling/"/>
      <url>2021/04/01/docker-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>进入容器</p><pre><code class="line-numbers language-shell">docker exec -it mysql bin/bash</code></pre><p>容器数据卷挂载示例</p><pre><code class="line-numbers language-shell">docker run -p 3306:3306 --name mysql \-v /mydata/mysql/log:/var/log/mysql \-v /mydata/mysql/data:/var/lib/mysql \-v /mydata/mysql/conf:/etc/mysql \-e MYSQL_ROOT_PASSWORD=root \-d mysql:5.7</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="2021/04/01/jvm/"/>
      <url>2021/04/01/jvm/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM内存模型"><a href="#JVM内存模型" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h2><p><img src="/2021/04/01/jvm/image-20210409140844624.png" alt="image-20210409140844624"></p><h2 id="一个对象从出生到消亡的过程"><a href="#一个对象从出生到消亡的过程" class="headerlink" title="一个对象从出生到消亡的过程"></a>一个对象从出生到消亡的过程</h2><p><img src="/2021/04/01/jvm/image-20210403155305061.png" alt="image-20210403155305061"></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Nginx 部署前后端分离项目，解决跨域问题</title>
      <link href="2021/03/28/shi-yong-nginx-bu-shu-qian-hou-duan-fen-chi-xiang-mu-jie-jue-kua-yu-wen-ti/"/>
      <url>2021/03/28/shi-yong-nginx-bu-shu-qian-hou-duan-fen-chi-xiang-mu-jie-jue-kua-yu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Nginx-部署前后端分离项目，解决跨域问题"><a href="#使用-Nginx-部署前后端分离项目，解决跨域问题" class="headerlink" title="使用 Nginx 部署前后端分离项目，解决跨域问题"></a>使用 Nginx 部署前后端分离项目，解决跨域问题</h1><h3 id="1-不得不说的跨域"><a href="#1-不得不说的跨域" class="headerlink" title="1 不得不说的跨域"></a>1 不得不说的跨域</h3><p>很多人对前后端分离部署感到困惑，其实主要是困惑跨域问题怎么解决。因为前后端分离项目在开发的时候，前端通过 nodejs 来运行，需要一个单独的端口，后端通过 Tomcat 或者 Jetty 来运行，也需要端口，两个不同的端口，就造成了跨域。</p><p>但是松哥之前多次和大家聊过这个问题，这种跨域并不是我们传统开发中真正的跨域，这个所谓的跨域只在开发环境中存在，生产环境下就不存在这个跨域问题了。所以我们不能按照以往的通过 JSONP 或者 CORS 之类的手段来解决这个跨域问题。</p><p>前后端分离开发中，前端为了能够模拟出测试数据，并且模拟出请求，一般需要借助于 nodejs 来运行，这是开发时候的状态，开发时候的配置大家可以参考这篇文章：</p><ul><li><a href="https://mp.weixin.qq.com/s/szgfT3tnYMCHSeiE3_QnpA">前后端分离历险记</a></li></ul><p>等开发完成后，我们会对前端项目编译打包，编译打包完成之后，就只剩下一堆 js、css 以及 html 文件了，我们把这些编译打包后的文件拷贝到后端项目中，这样再去运行就不存在跨域问题了（例如将编译打包后的静态文件拷贝到 Spring Boot 项目的 <code>src/main/resources/static</code> 目录下）。这种方式我就不再多说了，相信大家都会，今天咱们主要来看看如何结合 Nginx 来部署。</p><h3 id="2-Nginx-大杀器"><a href="#2-Nginx-大杀器" class="headerlink" title="2 Nginx 大杀器"></a>2 Nginx 大杀器</h3><p>结合 Nginx 来部署前后端分离项目算是目前的主流方案。一来部署方便，二来通过动静分离也可以有效提高项目的运行效率。</p><p>大家知道我们项目中的资源包含动态资源和静态资源两种，其中：</p><ul><li>动态资源就是那些需要经过容器处理的资源，例如 jsp、freemarker、各种接口等。</li><li>静态资源则是那些不需要经过容器处理，收到客户端请求就可以直接返回的资源，像 js、css、html 以及各种格式的图片，都属于静态资源。</li></ul><p>将动静资源分开部署，可以有效提高静态资源的加载速度以及整个系统的运行效率。</p><p>在前后端分离项目部署中，我们用 Nginx 来做一个反向代理服务器，它既可以代理动态请求，也可以直接提供静态资源访问。我们来一起看下。建议大家先阅读松哥以前关于 Nginx 的一篇旧文，可以有效帮助大家理解后面的配置：</p><ul><li><a href="https://mp.weixin.qq.com/s/ZN07_3ImmyRU0NQaqzcazQ">Nginx 极简入门教程！</a></li></ul><h4 id="2-1-后端部署"><a href="#2-1-后端部署" class="headerlink" title="2.1 后端部署"></a>2.1 后端部署</h4><p>后端接口的部署，主要看项目的形式，如果就是普通的 SSM 项目，那就提前准备好 Tomcat ，在 Tomcat 中部署项目，如果是 Spring Boot 项目，可以通过命令直接启动 jar，如果是微服务项目，存在多个 jar 的话，可以结合 Docker 来部署（参考<a href="https://mp.weixin.qq.com/s/vSCQLvQBYMYoPhdlO2v3XA">一键部署 Spring Boot 到远程 Docker 容器</a>），无论是那种形式，对于我们 Java 工程师来说，这都不是问题，我相信这一步大家都能搞定。</p><p>后端项目可以在一个非 80 端口上部署，部署成功之后，因为这个后端项目只是提供接口，所以我们并不会直接去访问他。而是通过 Nginx 请求转发来访问这个后端接口。</p><p>松哥这里以我去年为一个律所的小程序为例，后端是一个 Spring Boot 工程，那么我可以通过 Docker 部署，也可以直接通过命令来启动，这里简单点，直接通过命令来启动 jar ，如下：</p><pre><code class="line-numbers language-shell">nohup java -jar jinlu.jar &gt; vhr.log &amp;</code></pre><p>后端启动成功之后，我并不急着直接去访问后端，而是安装并且去配置一个 Nginx，通过 Nginx 来转发请求，Nginx 的基本介绍与安装，大家可以参考（<a href="https://mp.weixin.qq.com/s/ZN07_3ImmyRU0NQaqzcazQ">Nginx 极简入门教程！</a>），我这里就直接来说相关的配置了。</p><p>这里我们在 nginx.conf 中做出如下配置：</p><p>首先配置上游服务器：</p><pre><code class="line-numbers language-shell">upstream zqq.com&#123;  server 127.0.0.1:9999 weight=2;&#125;</code></pre><p>在这里主要是配置服务端的地址，如果服务端是集群化部署，那么这里就会有多个服务端地址，然后可以通过权重或者 ip hash 等方式进行请求分发。</p><p>然后我们在 server 中配置转发规则：</p><pre><code class="line-numbers language-shell">location /jinlu/ &#123;  proxy_pass http://zqq.com;  tcp_nodelay     on;  proxy_set_header Host            $host;  proxy_set_header X-Real-IP       $remote_addr;  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#125;</code></pre><p>这样配置完成后，假设我目前的域名是 javaboy.org，那么用户通过 <code>http://www.javaboy.org/jinlu/**</code> 格式的地址就可以访问到我服务端的接口。</p><h4 id="2-2-前端部署"><a href="#2-2-前端部署" class="headerlink" title="2.2 前端部署"></a>2.2 前端部署</h4><p>以 Vue 为例，如果是 SPA 应用，项目打包之后，就是一个 index.html 还有几个 js、css、images 以及 fonts ，这些都是静态文件，我们将静态文件首先上传到服务器，然后在 nginx.conf 中配置静态资源访问，具体配置如下：</p><pre><code class="line-numbers language-shell">location ~ .*\.(js|css|ico|png|jpg|eot|svg|ttf|woff|html|txt|pdf|) &#123;   root /usr/local/nginx/html/;#所有静态文件直接读取硬盘   expires 30d; #缓存30天&#125; </code></pre><p>当然我这里是按照资源类型来拦截的，即后缀为 js、css、ico 等的文件，统统都不进行请求分发，直接从本地的 /usr/local/nginx/html/ 目录下读取并返回到前端（我们需要将静态资源文件上传到 <code>/usr/local/nginx/html/</code> 目录下）。</p><p>如果我们的服务器上部署了多个项目，这种写法就不太合适，因为多个项目的前端静态文件肯定要分门别类，各自放好的，这个时候我们一样可以通过路径来拦截，配置如下：</p><pre><code class="line-numbers language-shell">location /jinlu-admin/ &#123;   root /usr/local/nginx/html/jinlu-admin/;#所有静态文件直接读取硬盘   expires 30d; #缓存30天&#125; </code></pre><p>这样，请求路径是 /jinlu-admin/ 格式的请求，则不会进行请求分发，而是直接从本机的 <code>/usr/local/nginx/html/jinlu-admin/</code> 目录下返回相关资源。采用这方方式配置静态资源，我们就可以部署多个项目了，多个项目的部署方式和上面的一样。</p><p>这样部署完成之后，假设我的域名是 javaboy.org ，那么用户通过 <code>http://www.javaboy.org/jinlu-admin/**</code> 格式的请求就可以访问到前端资源了。</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vhr-微人事</title>
      <link href="2021/03/27/vhr-wei-ren-shi/"/>
      <url>2021/03/27/vhr-wei-ren-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h2><p>项目地址+部署教程：<a href="https://github.com/lenve/vhr">https://github.com/lenve/vhr</a></p><h3 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h3><ol><li><p>进入命令行模式</p><pre><code class="line-numbers language-cmd">cmd G:\Environment\redis6</code></pre></li><li><p>启动Redis</p><pre><code class="line-numbers language-cmd">redis-server.exe redis.conf</code></pre></li></ol><h3 id="启动RabbitMQ"><a href="#启动RabbitMQ" class="headerlink" title="启动RabbitMQ"></a>启动RabbitMQ</h3><ol><li><p>查看运行状态</p><pre><code class="line-numbers language-cmd">rabbitmqctl status</code></pre></li><li><p>运行</p><pre><code class="line-numbers language-cmd">rabbitmq-server.bat</code></pre></li><li><p>启动成功访问地址<a href="http://localhost:15672/">http://localhost:15672</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Vue </tag>
            
            <tag> Redis </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC执行流程</title>
      <link href="2021/03/19/springmvc/"/>
      <url>2021/03/19/springmvc/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringMVC-工作原理"><a href="#SpringMVC-工作原理" class="headerlink" title="SpringMVC 工作原理"></a>SpringMVC 工作原理</h3><p><strong>原理如下图所示：</strong></p><p><img src="/2021/03/19/springmvc/image-20210409141121687.png" alt="image-20210409141121687"></p><p>上图的一个笔误的小问题：Spring MVC 的入口函数也就是前端控制器 <code>DispatcherServlet</code> 的作用是接收请求，响应结果。</p><p><strong>流程说明（重要）：</strong></p><ol><li>客户端（浏览器）发送请求，直接请求到 <code>DispatcherServlet</code>。</li><li><code>DispatcherServlet</code> 根据请求信息调用 <code>HandlerMapping</code>，解析请求对应的 <code>Handler</code>。</li><li>解析到对应的 <code>Handler</code>（也就是我们平常说的 <code>Controller</code> 控制器）后，开始由 <code>HandlerAdapter</code> 适配器处理。</li><li><code>HandlerAdapter</code> 会根据 <code>Handler </code>来调用真正的处理器来处理请求，并处理相应的业务逻辑。</li><li>处理器处理完业务后，会返回一个 <code>ModelAndView</code> 对象，<code>Model</code> 是返回的数据对象，<code>View</code> 是个逻辑上的 <code>View</code>。</li><li><code>ViewResolver</code> 会根据逻辑 <code>View</code> 查找实际的 <code>View</code>。</li><li><code>DispaterServlet</code> 把返回的 <code>Model</code> 传给 <code>View</code>（视图渲染）。</li><li>把 <code>View</code> 返回给请求者（浏览器）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基本指令练习</title>
      <link href="2021/03/17/shu-ju-ku-ji-ben-zhi-ling-lian-xi/"/>
      <url>2021/03/17/shu-ju-ku-ji-ben-zhi-ling-lian-xi/</url>
      
        <content type="html"><![CDATA[<p>收集整理来自<a href="https://www.w3schools.com/sql/exercise.asp">https://www.w3schools.com/sql/exercise.asp</a></p><h2 id="SQL-Select"><a href="#SQL-Select" class="headerlink" title="SQL Select"></a>SQL Select</h2><h3 id="1-Insert-the-missing-statement-to-get-all-the-columns-from-the-Customers-table"><a href="#1-Insert-the-missing-statement-to-get-all-the-columns-from-the-Customers-table" class="headerlink" title="1.Insert the missing statement to get all the columns from the Customers table."></a>1.Insert the missing statement to get all the columns from the <code>Customers</code> table.</h3><pre><code class="line-numbers language-sql"> SELECT * FROM Customers;</code></pre><h3 id="2-Write-a-statement-that-will-select-the-City-column-from-the-Customers-table"><a href="#2-Write-a-statement-that-will-select-the-City-column-from-the-Customers-table" class="headerlink" title="2.Write a statement that will select the City column from the Customers table."></a>2.Write a statement that will select the <code>City</code> column from the <code>Customers</code> table.</h3><pre><code class="line-numbers language-sql">SELECT City FROM Customers;</code></pre><h3 id="3-Select-all-the-different-values-from-the-Country-column-in-the-Customers-table"><a href="#3-Select-all-the-different-values-from-the-Country-column-in-the-Customers-table" class="headerlink" title="3.Select all the different values from the Country column in the Customers table."></a>3.Select all the <em>different</em> values from the <code>Country</code> column in the <code>Customers</code> table.</h3><pre><code class="line-numbers language-sql">SELECT DISTINCT Country FROM Customers;</code></pre><h2 id="SQL-Where"><a href="#SQL-Where" class="headerlink" title="SQL Where"></a>SQL Where</h2><h3 id="1-Select-all-records-where-the-City-column-has-the-value-“Berlin”"><a href="#1-Select-all-records-where-the-City-column-has-the-value-“Berlin”" class="headerlink" title="1.Select all records where the City column has the value “Berlin”."></a>1.Select all records where the <code>City</code> column has the value “Berlin”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City = &#39;Berlin&#39;;</code></pre><h3 id="2-Use-the-NOT-keyword-to-select-all-records-where-City-is-NOT-“Berlin”"><a href="#2-Use-the-NOT-keyword-to-select-all-records-where-City-is-NOT-“Berlin”" class="headerlink" title="2.Use the NOT keyword to select all records where City is NOT “Berlin”."></a>2.Use the <code>NOT</code> keyword to select all records where <code>City</code> is NOT “Berlin”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE NOT City = &#39;Berlin&#39;;</code></pre><h3 id="3-Select-all-records-where-the-CustomerID-column-has-the-value-32"><a href="#3-Select-all-records-where-the-CustomerID-column-has-the-value-32" class="headerlink" title="3.Select all records where the CustomerID column has the value 32."></a>3.Select all records where the <code>CustomerID</code> column has the value 32.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE CustomerID =32;</code></pre><h3 id="4-Select-all-records-where-the-City-column-has-the-value-‘Berlin’-and-the-PostalCode-column-has-the-value-12209"><a href="#4-Select-all-records-where-the-City-column-has-the-value-‘Berlin’-and-the-PostalCode-column-has-the-value-12209" class="headerlink" title="4.Select all records where the City column has the value ‘Berlin’ and the PostalCode column has the value 12209."></a>4.Select all records where the <code>City</code> column has the value ‘Berlin’ <em>and</em> the <code>PostalCode</code> column has the value 12209.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City = &#39;Berlin&#39;AND PostalCode = 12209;</code></pre><h3 id="5-Select-all-records-where-the-City-column-has-the-value-‘Berlin’-or-‘London’"><a href="#5-Select-all-records-where-the-City-column-has-the-value-‘Berlin’-or-‘London’" class="headerlink" title="5.Select all records where the City column has the value ‘Berlin’ or ‘London’."></a>5.Select all records where the <code>City</code> column has the value ‘Berlin’ or ‘London’.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City = &#39;Berlin&#39;OR City  = &#39;London&#39;;</code></pre><h2 id="SQL-Order-by"><a href="#SQL-Order-by" class="headerlink" title="SQL Order by"></a>SQL Order by</h2><h3 id="1-Select-all-records-from-the-Customers-table-sort-the-result-alphabetically-by-the-column-City"><a href="#1-Select-all-records-from-the-Customers-table-sort-the-result-alphabetically-by-the-column-City" class="headerlink" title="1.Select all records from the Customers table, sort the result alphabetically by the column City."></a>1.Select all records from the <code>Customers</code> table, sort the result alphabetically by the column <code>City</code>.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersORDER BY City;</code></pre><h3 id="2-Select-all-records-from-the-Customers-table-sort-the-result-reversed-alphabetically-by-the-column-City"><a href="#2-Select-all-records-from-the-Customers-table-sort-the-result-reversed-alphabetically-by-the-column-City" class="headerlink" title="2.Select all records from the Customers table, sort the result reversed alphabetically by the column City."></a>2.Select all records from the <code>Customers</code> table, sort the result <em>reversed</em> alphabetically by the column <code>City</code>.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersORDER BY City = DESC;</code></pre><h3 id="3-Select-all-records-from-the-Customers-table-sort-the-result-alphabetically-first-by-the-column-Country-then-by-the-column-City"><a href="#3-Select-all-records-from-the-Customers-table-sort-the-result-alphabetically-first-by-the-column-Country-then-by-the-column-City" class="headerlink" title="3.Select all records from the Customers table, sort the result alphabetically, first by the column Country, then, by the column City."></a>3.Select all records from the <code>Customers</code> table, sort the result alphabetically, first by the column <code>Country</code>, then, by the column <code>City</code>.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersORDER BY Country, City;</code></pre><h2 id="SQL-Insert"><a href="#SQL-Insert" class="headerlink" title="SQL Insert"></a>SQL Insert</h2><p>Insert a new record in the <code>Customers</code> table.</p><pre><code class="line-numbers language-sql">INSERT INTO Customers (CustomerName, Address, City, PostalCode,Country)VALUES(&#39;Hekkan Burger&#39;,&#39;Gateveien 15&#39;,&#39;Sandnes&#39;,&#39;4306&#39;,&#39;Norway&#39;);</code></pre><h2 id="SQL-Null"><a href="#SQL-Null" class="headerlink" title="SQL Null"></a>SQL Null</h2><h3 id="1-Select-all-records-from-the-Customers-where-the-PostalCode-column-is-empty"><a href="#1-Select-all-records-from-the-Customers-where-the-PostalCode-column-is-empty" class="headerlink" title="1.Select all records from the Customers where the PostalCode column is empty."></a>1.Select all records from the <code>Customers</code> where the <code>PostalCode</code> column is empty.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE PostalCode IS NULL;</code></pre><h3 id="2-Select-all-records-from-the-Customers-where-the-PostalCode-column-is-NOT-empty"><a href="#2-Select-all-records-from-the-Customers-where-the-PostalCode-column-is-NOT-empty" class="headerlink" title="2.Select all records from the Customers where the PostalCode column is NOT empty."></a>2.Select all records from the <code>Customers</code> where the <code>PostalCode</code> column is NOT empty.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE PostalCode IS NOT NULL;</code></pre><h2 id="SQL-Update"><a href="#SQL-Update" class="headerlink" title="SQL Update"></a>SQL Update</h2><h3 id="1-Update-the-City-column-of-all-records-in-the-Customers-table"><a href="#1-Update-the-City-column-of-all-records-in-the-Customers-table" class="headerlink" title="1.Update the City column of all records in the Customers table."></a>1.Update the <code>City</code> column of all records in the <code>Customers</code> table.</h3><pre><code class="line-numbers language-sql">UPDATE CustomersSET City = &#39;Oslo&#39;;</code></pre><h3 id="2-Set-the-value-of-the-City-columns-to-‘Oslo’-but-only-the-ones-where-the-Country-column-has-the-value-“Norway”"><a href="#2-Set-the-value-of-the-City-columns-to-‘Oslo’-but-only-the-ones-where-the-Country-column-has-the-value-“Norway”" class="headerlink" title="2.Set the value of the City columns to ‘Oslo’, but only the ones where the Country column has the value “Norway”."></a>2.Set the value of the <code>City</code> columns to ‘Oslo’, but only the ones where the <code>Country</code> column has the value “Norway”.</h3><pre><code class="line-numbers language-sql">UPDATE CustomersSET City = &#39;Oslo&#39;WHERE Country = &#39;Norway&#39;;</code></pre><h3 id="3-Update-the-City-value-and-the-Country-value"><a href="#3-Update-the-City-value-and-the-Country-value" class="headerlink" title="3.Update the City value and the Country value."></a>3.Update the <code>City</code> value <em>and</em> the <code>Country</code> value.</h3><pre><code class="line-numbers language-sql">UPDATE CustomersSET City = &#39;Oslo&#39;Country = &#39;Norway&#39;WHERE CustomerID = 32;</code></pre><h2 id="SQL-Delete"><a href="#SQL-Delete" class="headerlink" title="SQL  Delete"></a>SQL  Delete</h2><h3 id="1-Delete-all-the-records-from-the-Customers-table-where-the-Country-value-is-‘Norway’"><a href="#1-Delete-all-the-records-from-the-Customers-table-where-the-Country-value-is-‘Norway’" class="headerlink" title="1.Delete all the records from the Customers table where the Country value is ‘Norway’."></a>1.Delete all the records from the <code>Customers</code> table where the <code>Country</code> value is ‘Norway’.</h3><pre><code class="line-numbers language-sql">DELETE FROM CustomersWHERE Country = &#39;Norway&#39;;</code></pre><h3 id="2-Delete-all-the-records-from-the-Customers-table"><a href="#2-Delete-all-the-records-from-the-Customers-table" class="headerlink" title="2.Delete all the records from the Customers table."></a>2.Delete all the records from the <code>Customers</code> table.</h3><pre><code class="line-numbers language-sql">DELETE FROM Customers;</code></pre><h2 id="SQL-Functions"><a href="#SQL-Functions" class="headerlink" title="SQL Functions"></a>SQL Functions</h2><h3 id="1-Use-the-MIN-function-to-select-the-record-with-the-smallest-value-of-the-Price-column"><a href="#1-Use-the-MIN-function-to-select-the-record-with-the-smallest-value-of-the-Price-column" class="headerlink" title="1.Use the MIN function to select the record with the smallest value of the Price column."></a>1.Use the <code>MIN</code> function to select the record with the smallest value of the <code>Price</code> column.</h3><pre><code class="line-numbers language-sql">SELECT MIN(Price)FROM Products;</code></pre><h3 id="2-Use-an-SQL-function-to-select-the-record-with-the-highest-value-of-the-Price-column"><a href="#2-Use-an-SQL-function-to-select-the-record-with-the-highest-value-of-the-Price-column" class="headerlink" title="2.Use an SQL function to select the record with the highest value of the Price column."></a>2.Use an SQL function to select the record with the highest value of the <code>Price</code> column.</h3><pre><code class="line-numbers language-sql">SELECT MAX(Price)FROM Products;</code></pre><h3 id="3-Use-the-correct-function-to-return-the-number-of-records-that-have-the-Price-value-set-to-18"><a href="#3-Use-the-correct-function-to-return-the-number-of-records-that-have-the-Price-value-set-to-18" class="headerlink" title="3.Use the correct function to return the number of records that have the Price value set to 18."></a>3.Use the correct function to return the number of records that have the <code>Price</code> value set to <code>18</code>.</h3><pre><code class="line-numbers language-sql">SELECT COUNT(*)FROM ProductsWHERE Price = 18;</code></pre><h3 id="4-Use-an-SQL-function-to-calculate-the-average-price-of-all-products"><a href="#4-Use-an-SQL-function-to-calculate-the-average-price-of-all-products" class="headerlink" title="4.Use an SQL function to calculate the average price of all products."></a>4.Use an SQL function to calculate the average price of all products.</h3><pre><code class="line-numbers language-sql">SELECT AVG(Price)FROM Products;</code></pre><h3 id="5-Use-an-SQL-function-to-calculate-the-sum-of-all-the-Price-column-values-in-the-Products-table"><a href="#5-Use-an-SQL-function-to-calculate-the-sum-of-all-the-Price-column-values-in-the-Products-table" class="headerlink" title="5.Use an SQL function to calculate the sum of all the Price column values in the Products table."></a>5.Use an SQL function to calculate the sum of all the <code>Price</code> column values in the <code>Products</code> table.</h3><pre><code class="line-numbers language-sql">SELECT SUM(Price)FROM Products;</code></pre><h2 id="SQL-Like"><a href="#SQL-Like" class="headerlink" title="SQL Like"></a>SQL Like</h2><h3 id="1-Select-all-records-where-the-value-of-the-City-column-starts-with-the-letter-“a”"><a href="#1-Select-all-records-where-the-value-of-the-City-column-starts-with-the-letter-“a”" class="headerlink" title="1.Select all records where the value of the City column starts with the letter “a”."></a>1.Select all records where the value of the <code>City</code> column starts with the letter “a”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;a%&#39;;</code></pre><h3 id="2-Select-all-records-where-the-value-of-the-City-column-ends-with-the-letter-“a”"><a href="#2-Select-all-records-where-the-value-of-the-City-column-ends-with-the-letter-“a”" class="headerlink" title="2.Select all records where the value of the City column ends with the letter “a”."></a>2.Select all records where the value of the <code>City</code> column <em>ends</em> with the letter “a”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;%a&#39;;</code></pre><h3 id="3-Select-all-records-where-the-value-of-the-City-column-contains-the-letter-“a”"><a href="#3-Select-all-records-where-the-value-of-the-City-column-contains-the-letter-“a”" class="headerlink" title="3.Select all records where the value of the City column contains the letter “a”."></a>3.Select all records where the value of the <code>City</code> column contains the letter “a”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;%a%&#39;;</code></pre><h3 id="4-Select-all-records-where-the-value-of-the-City-column-starts-with-letter-“a”-and-ends-with-the-letter-“b”"><a href="#4-Select-all-records-where-the-value-of-the-City-column-starts-with-letter-“a”-and-ends-with-the-letter-“b”" class="headerlink" title="4.Select all records where the value of the City column starts with letter “a” and ends with the letter “b”."></a>4.Select all records where the value of the <code>City</code> column starts with letter “a” and ends with the letter “b”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;a%b&#39;;</code></pre><h3 id="5-Select-all-records-where-the-value-of-the-City-column-does-NOT-start-with-the-letter-“a”"><a href="#5-Select-all-records-where-the-value-of-the-City-column-does-NOT-start-with-the-letter-“a”" class="headerlink" title="5.Select all records where the value of the City column does NOT start with the letter “a”."></a>5.Select all records where the value of the <code>City</code> column does NOT start with the letter “a”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City NOT LIKE &#39;a%&#39;;</code></pre><h2 id="SQL-Wildcards"><a href="#SQL-Wildcards" class="headerlink" title="SQL Wildcards"></a>SQL Wildcards</h2><h3 id="1-Select-all-records-where-the-second-letter-of-the-City-is-an-“a”"><a href="#1-Select-all-records-where-the-second-letter-of-the-City-is-an-“a”" class="headerlink" title="1.Select all records where the second letter of the City is an “a”."></a>1.Select all records where the <em>second</em> letter of the <code>City</code> is an “a”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;_a%&#39;;</code></pre><h3 id="2-Select-all-records-where-the-first-letter-of-the-City-is-an-“a”-or-a-“c”-or-an-“s”"><a href="#2-Select-all-records-where-the-first-letter-of-the-City-is-an-“a”-or-a-“c”-or-an-“s”" class="headerlink" title="2.Select all records where the first letter of the City is an “a” or a “c” or an “s”."></a>2.Select all records where the first letter of the <code>City</code> is an “a” or a “c” or an “s”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;[acs]%&#39;;</code></pre><h3 id="3-Select-all-records-where-the-first-letter-of-the-City-starts-with-anything-from-an-“a”-to-an-“f”"><a href="#3-Select-all-records-where-the-first-letter-of-the-City-starts-with-anything-from-an-“a”-to-an-“f”" class="headerlink" title="3.Select all records where the first letter of the City starts with anything from an “a” to an “f”."></a>3.Select all records where the first letter of the <code>City</code> starts with anything from an “a” to an “f”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;[a-f]%&#39;;</code></pre><h3 id="4-Select-all-records-where-the-first-letter-of-the-City-is-NOT-an-“a”-or-a-“c”-or-an-“f”"><a href="#4-Select-all-records-where-the-first-letter-of-the-City-is-NOT-an-“a”-or-a-“c”-or-an-“f”" class="headerlink" title="4.Select all records where the first letter of the City is NOT an “a” or a “c” or an “f”."></a>4.Select all records where the first letter of the <code>City</code> is NOT an “a” or a “c” or an “f”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;[!acf]%&#39;;</code></pre><h2 id="SQL-In"><a href="#SQL-In" class="headerlink" title="SQL In"></a>SQL In</h2><h3 id="1-Use-the-IN-operator-to-select-all-the-records-where-Country-is-either-“Norway”-or-“France”"><a href="#1-Use-the-IN-operator-to-select-all-the-records-where-Country-is-either-“Norway”-or-“France”" class="headerlink" title="1.Use the IN operator to select all the records where Country is either “Norway” or “France”."></a>1.Use the <code>IN</code> operator to select all the records where <code>Country</code> is either “Norway” or “France”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE Country IN (&#39;Norway&#39;, &#39;France&#39;);</code></pre><h3 id="2-Use-the-IN-operator-to-select-all-the-records-where-Country-is-NOT-“Norway”-and-NOT-“France”"><a href="#2-Use-the-IN-operator-to-select-all-the-records-where-Country-is-NOT-“Norway”-and-NOT-“France”" class="headerlink" title="2.Use the IN operator to select all the records where Country is NOT “Norway” and NOT “France”."></a>2.Use the <code>IN</code> operator to select all the records where <code>Country</code> is NOT “Norway” and NOT “France”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE Country NOT IN (&#39;Norway&#39;, &#39;France&#39;);</code></pre><h2 id="SQL-Between"><a href="#SQL-Between" class="headerlink" title="SQL Between"></a>SQL Between</h2><h3 id="1-Use-the-BETWEEN-operator-to-select-all-the-records-where-the-value-of-the-Price-column-is-between-10-and-20"><a href="#1-Use-the-BETWEEN-operator-to-select-all-the-records-where-the-value-of-the-Price-column-is-between-10-and-20" class="headerlink" title="1.Use the BETWEEN operator to select all the records where the value of the Price column is between 10 and 20."></a>1.Use the <code>BETWEEN</code> operator to select all the records where the value of the <code>Price</code> column is between 10 and 20.</h3><pre><code class="line-numbers language-sql">SELECT * FROM ProductsWHERE Price BETWEEN 10 AND 20;</code></pre><h3 id="2-Use-the-BETWEEN-operator-to-select-all-the-records-where-the-value-of-the-Price-column-is-NOT-between-10-and-20"><a href="#2-Use-the-BETWEEN-operator-to-select-all-the-records-where-the-value-of-the-Price-column-is-NOT-between-10-and-20" class="headerlink" title="2.Use the BETWEEN operator to select all the records where the value of the Price column is NOT between 10 and 20."></a>2.Use the <code>BETWEEN</code> operator to select all the records where the value of the <code>Price</code> column is NOT between 10 and 20.</h3><pre><code class="line-numbers language-sql">SELECT * FROM ProductsWHERE Price NOT BETWEEN 10 AND 20;</code></pre><h3 id="3-Use-the-BETWEEN-operator-to-select-all-the-records-where-the-value-of-the-ProductName-column-is-alphabetically-between-‘Geitost’-and-‘Pavlova’"><a href="#3-Use-the-BETWEEN-operator-to-select-all-the-records-where-the-value-of-the-ProductName-column-is-alphabetically-between-‘Geitost’-and-‘Pavlova’" class="headerlink" title="3.Use the BETWEEN operator to select all the records where the value of the ProductName column is alphabetically between ‘Geitost’ and ‘Pavlova’."></a>3.Use the <code>BETWEEN</code> operator to select all the records where the value of the <code>ProductName</code> column is alphabetically between ‘Geitost’ and ‘Pavlova’.</h3><pre><code class="line-numbers language-sql">SELECT * FROM ProductsWHERE ProductName BETWEEN &#39;Geitost&#39; AND &#39;Pavlova&#39;;</code></pre><h2 id="SQL-Alias"><a href="#SQL-Alias" class="headerlink" title="SQL Alias"></a>SQL Alias</h2><h3 id="1-When-displaying-the-Customers-table-make-an-ALIAS-of-the-PostalCode-column-the-column-should-be-called-Pno-instead"><a href="#1-When-displaying-the-Customers-table-make-an-ALIAS-of-the-PostalCode-column-the-column-should-be-called-Pno-instead" class="headerlink" title="1.When displaying the Customers table, make an ALIAS of the PostalCode column, the column should be called Pno instead."></a>1.When displaying the <code>Customers</code> table, make an ALIAS of the <code>PostalCode</code> column, the column should be called <code>Pno</code> instead.</h3><pre><code class="line-numbers language-sql">SELECT CustomerName,Address,PostalCode AS PnoFROM Customers;</code></pre><h3 id="2-When-displaying-the-Customers-table-refer-to-the-table-as-Consumers-instead-of-Customers"><a href="#2-When-displaying-the-Customers-table-refer-to-the-table-as-Consumers-instead-of-Customers" class="headerlink" title="2.When displaying the Customers table, refer to the table as Consumers instead of Customers."></a>2.When displaying the <code>Customers</code> table, refer to the table as <code>Consumers</code> instead of <code>Customers</code>.</h3><pre><code class="line-numbers language-sql">SELECT *FROM Customers AS Consumers;</code></pre><h2 id="SQL-Join"><a href="#SQL-Join" class="headerlink" title="SQL Join"></a>SQL Join</h2><h3 id="1-Insert-the-missing-parts-in-the-JOIN-clause-to-join-the-two-tables-Orders-and-Customers-using-the-CustomerID-field-in-both-tables-as-the-relationship-between-the-two-tables"><a href="#1-Insert-the-missing-parts-in-the-JOIN-clause-to-join-the-two-tables-Orders-and-Customers-using-the-CustomerID-field-in-both-tables-as-the-relationship-between-the-two-tables" class="headerlink" title="1.Insert the missing parts in the JOIN clause to join the two tables Orders and Customers, using the CustomerID field in both tables as the relationship between the two tables."></a>1.Insert the missing parts in the <code>JOIN</code> clause to join the two tables <code>Orders</code> and <code>Customers</code>, using the <code>CustomerID</code> field in both tables as the relationship between the two tables.</h3><pre><code class="line-numbers language-sql">SELECT *FROM OrdersLEFT JOIN CustomersON Orders.CustomerID = Customers.CustomerID;</code></pre><h3 id="2-Choose-the-correct-JOIN-clause-to-select-all-records-from-the-two-tables-where-there-is-a-match-in-both-tables"><a href="#2-Choose-the-correct-JOIN-clause-to-select-all-records-from-the-two-tables-where-there-is-a-match-in-both-tables" class="headerlink" title="2.Choose the correct JOIN clause to select all records from the two tables where there is a match in both tables."></a>2.Choose the correct <code>JOIN</code> clause to select all records from the two tables where there is a match in both tables.</h3><pre><code class="line-numbers language-sql">SELECT *FROM OrdersINNER JOIN CustomersON Orders.CustomerID=Customers.CustomerID;</code></pre><h3 id="3-Choose-the-correct-JOIN-clause-to-select-all-the-records-from-the-Customers-table-plus-all-the-matches-in-the-Orders-table"><a href="#3-Choose-the-correct-JOIN-clause-to-select-all-the-records-from-the-Customers-table-plus-all-the-matches-in-the-Orders-table" class="headerlink" title="3.Choose the correct JOIN clause to select all the records from the Customers table plus all the matches in the Orders table."></a>3.Choose the correct <code>JOIN</code> clause to select all the records from the <code>Customers</code> table plus all the matches in the <code>Orders</code> table.</h3><pre><code class="line-numbers language-sql">SELECT *FROM OrdersRIGHT JOIN CustomersON Orders.CustomerID=Customers.CustomerID;</code></pre><h2 id="SQL-Group-By"><a href="#SQL-Group-By" class="headerlink" title="SQL Group By"></a>SQL Group By</h2><h3 id="1-List-the-number-of-customers-in-each-country"><a href="#1-List-the-number-of-customers-in-each-country" class="headerlink" title="1.List the number of customers in each country."></a>1.List the number of customers in each country.</h3><pre><code class="line-numbers language-sql">SELECT COUNT(CustomerID),CountryFROM CustomersGROUP BY Country;</code></pre><h3 id="2-List-the-number-of-customers-in-each-country-ordered-by-the-country-with-the-most-customers-first"><a href="#2-List-the-number-of-customers-in-each-country-ordered-by-the-country-with-the-most-customers-first" class="headerlink" title="2.List the number of customers in each country, ordered by the country with the most customers first."></a>2.List the number of customers in each country, ordered by the country with the most customers first.</h3><pre><code class="line-numbers language-sql">SELECT COUNT(CustomerID),CountryFROM CustomersGROUP BY CountryORDER BY COUNT(CustomerID) DESC;</code></pre><h2 id="SQL-Database"><a href="#SQL-Database" class="headerlink" title="SQL Database"></a>SQL Database</h2><h3 id="1-Write-the-correct-SQL-statement-to-create-a-new-database-called-testDB"><a href="#1-Write-the-correct-SQL-statement-to-create-a-new-database-called-testDB" class="headerlink" title="1.Write the correct SQL statement to create a new database called testDB."></a>1.Write the correct SQL statement to create a new database called <code>testDB</code>.</h3><pre><code class="line-numbers language-sql">CREATE DATABASE testDB;</code></pre><h3 id="2-Write-the-correct-SQL-statement-to-delete-a-database-named-testDB"><a href="#2-Write-the-correct-SQL-statement-to-delete-a-database-named-testDB" class="headerlink" title="2.Write the correct SQL statement to delete a database named testDB."></a>2.Write the correct SQL statement to delete a database named <code>testDB</code>.</h3><pre><code class="line-numbers language-sql">DROP DATABASE testDB;</code></pre><h3 id="3-Write-the-correct-SQL-statement-to-create-a-new-table-called-Persons"><a href="#3-Write-the-correct-SQL-statement-to-create-a-new-table-called-Persons" class="headerlink" title="3.Write the correct SQL statement to create a new table called Persons."></a>3.Write the correct SQL statement to create a new table called <code>Persons</code>.</h3><pre><code class="line-numbers language-sql">CREATE TABLE Persons (  PersonID int,  LastName varchar(255),  FirstName varchar(255),  Address varchar(255),  City varchar(255) );</code></pre><h3 id="4-Write-the-correct-SQL-statement-to-delete-a-table-called-Persons"><a href="#4-Write-the-correct-SQL-statement-to-delete-a-table-called-Persons" class="headerlink" title="4.Write the correct SQL statement to delete a table called Persons."></a>4.Write the correct SQL statement to delete a table called <code>Persons</code>.</h3><pre><code class="line-numbers language-sql">DROP TABLE Persons;</code></pre><h3 id="5-Use-the-TRUNCATE-statement-to-delete-all-data-inside-a-table"><a href="#5-Use-the-TRUNCATE-statement-to-delete-all-data-inside-a-table" class="headerlink" title="5.Use the TRUNCATE statement to delete all data inside a table."></a>5.Use the <code>TRUNCATE</code> statement to delete all data inside a table.</h3><pre><code class="line-numbers language-sql">TRUNCATE TABLE Persons;</code></pre><h3 id="6-Add-a-column-of-type-DATE-called-Birthday"><a href="#6-Add-a-column-of-type-DATE-called-Birthday" class="headerlink" title="6.Add a column of type DATE called Birthday."></a>6.Add a column of type <code>DATE</code> called <code>Birthday</code>.</h3><pre><code class="line-numbers language-sql">ALTER TABLE PersonsADD Birthday DATE;</code></pre><h3 id="7-Delete-the-column-Birthday-from-the-Persons-table"><a href="#7-Delete-the-column-Birthday-from-the-Persons-table" class="headerlink" title="7.Delete the column Birthday from the Persons table."></a>7.Delete the column <code>Birthday</code> from the <code>Persons</code> table.</h3><pre><code class="line-numbers language-sql">ALTER TABLE PersonsDROP COLUMN Birthday;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>91. 解码方法-中等</title>
      <link href="2021/03/17/91-jie-ma-fang-fa-zhong-deng/"/>
      <url>2021/03/17/91-jie-ma-fang-fa-zhong-deng/</url>
      
        <content type="html"><![CDATA[<h2 id="91-解码方法"><a href="#91-解码方法" class="headerlink" title="91. 解码方法"></a><a href="https://leetcode-cn.com/problems/decode-ways/">91. 解码方法</a></h2><p>引用题解：<a href="https://github.com/changgyhub/leetcode_101">https://github.com/changgyhub/leetcode_101</a></p><p>加入了自己的理解</p><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>一共会有四种情况发生</p><ol><li><p><code>00 || [30, 40, 50, ...]</code>新来了0和前面那个一起构不成解码</p><p>合并解码和分开解码都不可</p><p>并且这两种情况都导致会出现以 0 开头的数字(00直接出现， [30, 40, 50, …]下一个来时出现)，由于没有字符映射到以 0 开头的数字，不合题意</p><p>则return 0;</p></li><li><p><code>[11, 19] || [21, 26]</code>新来了非0和前面那个一起构成解码</p><p>这两个数字有两种解码方式，即合并解码和分开解码，以11为例，可以解码为”K”或者”AA”</p><p>以22611为例</p><p>“K”可以和dp[i-2] 构成一次新的解码，即”(BZ， VF， BBF)K” =&gt;[(2 26) , (22 6), (2 2 6)]   11</p><p>“AA”可以使”A”和dp[i-1]构成一次解码，即”(BZA， VFA， BBFA)A” =&gt;[(2 26 1) , (22 6 1), (2 2 6 1)]   1</p><p>则求和：dp[i] = dp[i-2] + dp[i-1];</p></li><li><p><code>10 || 20</code> 新来了0和前面那个一起构成解码</p><p>这两个数字有一种解码方式，即合并解码，以10为例，可以解码为”J”</p><p>以22610为例</p><p>“J”可以和dp[i-2] 构成一次新的解码，即”(BZ， VF， BBF)J” =&gt;[(2 26) , (22 6), (2 2 6)]   10</p><p>则：dp[i] = dp[i-2];</p></li><li><p><code>[27, 99] </code>新来了非0和前面那个一起构不成解码</p><p>这两个数字有一种解码方式，即分开解码，以27为例，可以解码为”BG”</p><p>以22627为例</p><p>“BG”可以和dp[i-2] 构成一次新的解码，即”(BZ， VF， BBF)BG” =&gt;[(2 26) , (22 6), (2 2 6)]   27</p><p>则：dp[i] = dp[i-1];</p></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="line-numbers language-c++">class Solution &#123;public:    int numDecodings(string s) &#123;        int n = s.length();        if (n == 0) return 0;        int prev = s[0] - &#39;0&#39;;        if (!prev) return 0;        if (n == 1) return 1;        vector&lt;int&gt; dp(n + 1, 1);        for (int i = 2; i &lt;= n; ++i) &#123;            int cur = s[i-1] - &#39;0&#39;;            //00 || [30, 40, 50, ...]新来了0和前面那个一起构不成解码            //这都导致会出现以 0 开头的数字(00直接出现， [30, 40, 50, ...]下一个来时出现)，不合题意，return 0.            if ((prev == 0 || prev &gt; 2) &amp;&amp; cur == 0) &#123;                return 0;            &#125;            //[10, 99]            if ((prev == 1) || prev == 2 &amp;&amp; cur &lt; 7) &#123;                //[11, 19] || [21, 26]新来了非0和前面那个一起构成解码                if (cur) &#123;                    dp[i] = dp[i-2] + dp[i-1];                &#125; else &#123;//10 || 20 新来了0和前面那个一起构成解码                    dp[i] = dp[i-2];                &#125;            &#125; else &#123;    //[27, 99] 新来了非0和前面那个一起构不成解码                       dp[i] = dp[i-1];            &#125;            prev = cur;        &#125;        return dp[n];    &#125;&#125;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>413. 等差数列划分-中等</title>
      <link href="2021/03/16/413-deng-chai-shu-lie-hua-fen-zhong-deng/"/>
      <url>2021/03/16/413-deng-chai-shu-lie-hua-fen-zhong-deng/</url>
      
        <content type="html"><![CDATA[<h2 id="413-等差数列划分"><a href="#413-等差数列划分" class="headerlink" title="413. 等差数列划分"></a><a href="https://leetcode-cn.com/problems/arithmetic-slices/">413. 等差数列划分</a></h2><p>引用题解：<a href="https://github.com/changgyhub/leetcode_101">https://github.com/changgyhub/leetcode_101</a></p><pre><code class="line-numbers language-c++">动态规划过程：1234：123 234  1   2            1 + 2 = 312345：123 234 345   1   2   3     1 + 2 + 3 = 6    最后为什么要对 dp 数组求和？=&gt;return accumulate(dp.begin(), dp.end(), 0);    简单分析：        123有一个 123        234有两个 234， 1234        345有三个 345， 2345， 12345    所以要求和！</code></pre><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个数组，求这个数组中连续且等差的子数组一共有多少个。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p>输入是一个一维数组，输出是满足等差条件的连续字数组个数。</p><pre><code class="line-numbers language-c++">Input: nums = [1,2,3,4]Output: 3</code></pre><p>在这个样例中，等差数列有 [1,2,3]、[2,3,4] 和 [1,2,3,4]。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这道题略微特殊，因为要求是等差数列，可以很自然的想到子数组必定满足 num[i] - num[i-1] = num[i-1] - num[i-2]。然而由于我们对于 dp 数组的定义通常为以 i 结尾的，满足某些条件的子数组数量，而等差子数组可以在任意一个位置终结，因此此题在最后需要对 dp 数组求和。</p><pre><code class="line-numbers language-c++">class Solution &#123;public:    int numberOfArithmeticSlices(vector&lt;int&gt;&amp; nums) &#123;        int n = nums.size();        if (n &lt; 3) return 0;        vector&lt;int&gt; dp(n, 0);        for (int i = 2; i &lt; n; ++i) &#123;            if (nums[i] - nums[i-1] == nums[i-1] - nums[i-2]) &#123;                dp[i] = dp[i-1] + 1;            &#125;        &#125;        return accumulate(dp.begin(), dp.end(), 0);    &#125;&#125;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>198.打家劫舍-中等</title>
      <link href="2021/03/16/198-da-jia-jie-she-zhong-deng/"/>
      <url>2021/03/16/198-da-jia-jie-she-zhong-deng/</url>
      
        <content type="html"><![CDATA[<h2 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode-cn.com/problems/house-robber/">198. 打家劫舍</a></h2><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>动态规划 <code>dp[i] = max(dp[i-1], nums[i-1] + dp[i-2])。</code></p><pre><code class="line-numbers language-c++">class Solution &#123;public:    int rob(vector&lt;int&gt;&amp; nums) &#123;        //  dp ---0, 1, 2, 3, 4, 5 ... ---        //nums ---   0, 1, 2, 3, 4 ... ---        if (nums.empty()) return 0;        int n = nums.size();        vector&lt;int&gt; dp(n + 1, 0);        dp[1] = nums[0];        for (int i = 2; i &lt;= n; ++i) &#123;            dp[i] = max(dp[i-1], nums[i-1] + dp[i-2]);        &#125;        return dp[n];    &#125;&#125;;</code></pre></li><li><p>进行空间压缩</p><pre><code class="line-numbers language-c++">class Solution &#123;public:    int rob(vector&lt;int&gt;&amp; nums) &#123;        // cur ---0, 1, 2, 3, 4, 5 ... ---        //nums ---   0, 1, 2, 3, 4 ... ---        if (nums.empty()) return 0;        int n = nums.size();        int pre1 = 0, pre2 = nums[0], cur;        for (int i = 1; i &lt; n; ++i) &#123;            cur = max(pre2, pre1 + nums[i]);            pre1 = pre2;            pre2 = cur;        &#125;        return cur;    &#125;&#125;;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>70.爬楼梯-简单</title>
      <link href="2021/03/16/70-pa-lou-ti-jian-dan/"/>
      <url>2021/03/16/70-pa-lou-ti-jian-dan/</url>
      
        <content type="html"><![CDATA[<h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯</a></h2><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><h4 id="斐波那契数列百度百科："><a href="#斐波那契数列百度百科：" class="headerlink" title="斐波那契数列百度百科："></a>斐波那契数列百度百科：</h4><p>斐波那契数列（Fibonacci sequence），又称黄金分割数列，因数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：<code>0、1、1、2、3、5、8、13、21、34、……</code>在数学上，斐波那契数列以如下被以递推的方法定义：<code>F(0)=0，F(1)=1, F(n)=F(n - 1)+F(n - 2)（n ≥ 2，n ∈ N*）</code>在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，为此，美国数学会从 1963 年起出版了以《斐波纳契数列季刊》为名的一份数学杂志，用于专门刊载这方面的研究成果。</p><h4 id="典型的斐波那契数列，采用动态规划"><a href="#典型的斐波那契数列，采用动态规划" class="headerlink" title="典型的斐波那契数列，采用动态规划"></a>典型的斐波那契数列，采用动态规划</h4><ol><li><p>数组，空间复杂度为 O(n）</p><pre><code class="line-numbers language-c++">class Solution &#123;public:    int climbStairs(int n) &#123;        //从F(0)=1，F(1)=1，开始        // n---0、1、2、3、4、5、 6、 7、 8---        //dp---1、1、2、3、5、8、13、21、34---        if (n &lt;= 2) return n;        vector&lt;int&gt; dp(n+1, 1);        for (int i = 2; i &lt;= n; ++i) &#123;            dp[i] = dp[i-1] + dp[i-2];        &#125;        return dp[n];    &#125;&#125;;</code></pre></li><li><p>空间压缩，空间复杂度优化为 O(1) </p><pre><code class="line-numbers language-c++">class Solution &#123;public:    int climbStairs(int n) &#123;        //典型的斐波那契数列        //  n---0、1、2、3、4、5、 6、 7、 8---        //cur---1、1、2、3、5、8、13、21、34---        if (n &lt;= 2) return n;        int pre2 = 1, pre1 = 1, cur;        for (int i = 2; i &lt;= n; ++i) &#123;            cur = pre1 + pre2;            pre1 = pre2;            pre2 = cur;         &#125;        return cur;    &#125;&#125;;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="2021/03/16/linux-chang-yong-ming-ling/"/>
      <url>2021/03/16/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="防火墙命令"><a href="#防火墙命令" class="headerlink" title="防火墙命令"></a>防火墙命令</h2><pre><code class="line-numbers language-shell"># 查看firewall服务状态systemctl status firewalld# 开启、重启、关闭、firewalld.service服务# 开启service firewalld start# 重启service firewalld restart# 关闭service firewalld stop# 查看防火墙规则firewall-cmd --list-all # 查看全部信息firewall-cmd --list-ports # 只看端口信息# 开启端口开端口命令：firewall-cmd --zone=public --add-port=8080/tcp --permanent重启防火墙：systemctl restart firewalld.service命令含义：--zone #作用域--add-port=80/tcp #添加端口，格式为：端口/通讯协议--permanent #永久生效，没有此参数重启后失效</code></pre><h2 id="系统目录结构"><a href="#系统目录结构" class="headerlink" title="系统目录结构"></a>系统目录结构</h2><blockquote><ul><li><p>/etc： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p>/home：用户的主目录，在Linux中，每个用户都有一个自己的目录一般该目录名是以用户的账号命名的。</p></li><li><p>/opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p>/root：该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p>/tmp：这个目录是用来存放一些临时文件的。用完即丢的文件，可以放在这个目录下，安装包！</p></li><li><p>/usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</p></li><li><p>/var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li></ul></blockquote><h2 id="vim撤销和恢复撤销快捷键"><a href="#vim撤销和恢复撤销快捷键" class="headerlink" title="vim撤销和恢复撤销快捷键"></a>vim撤销和恢复撤销快捷键</h2><p>u是撤销你刚才做的动作</p><p>ctrl+r 是恢复你刚才撤销的动作</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker进阶</title>
      <link href="2021/03/15/docker-jin-jie/"/>
      <url>2021/03/15/docker-jin-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h2 id="1-概述（官方文档）"><a href="#1-概述（官方文档）" class="headerlink" title="1.概述（官方文档）"></a>1.概述（官方文档）</h2><blockquote><p><strong>Looking for Compose file reference?</strong> <a href="https://docs.docker.com/compose/compose-file/">Find the latest version here</a>.</p></blockquote><p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration. To learn more about all the features of Compose, see <a href="https://docs.docker.com/compose/#features">the list of features</a>.</p><p>Compose works in all environments: production, staging, development, testing, as well as CI workflows. You can learn more about each case in <a href="https://docs.docker.com/compose/#common-use-cases">Common Use Cases</a>.</p><p>Using Compose is basically a three-step process:</p><ol><li>Define your app’s environment with a <code>Dockerfile</code> so it can be reproduced anywhere.</li><li>Define the services that make up your app in <code>docker-compose.yml</code> so they can be run together in an isolated environment.</li><li>Run <code>docker compose up</code> and the <a href="https://docs.docker.com/compose/cli-command/">Docker compose command</a> starts and runs your entire app. You can alternatively run <code>docker-compose up</code> using the docker-compose binary.</li></ol><p>A <code>docker-compose.yml</code> looks like this:</p><pre><code class="line-numbers language-yml">version: &quot;3.9&quot;  # optional since v1.27.0services:  web:    build: .    ports:      - &quot;5000:5000&quot;    volumes:      - .:/code      - logvolume01:/var/log    links:      - redis  redis:    image: redisvolumes:  logvolume01: &#123;&#125;</code></pre><p>For more information about the Compose file, see the <a href="https://docs.docker.com/compose/compose-file/">Compose file reference</a>.</p><p>Compose has commands for managing the whole lifecycle of your application:</p><ul><li>Start, stop, and rebuild services</li><li>View the status of running services</li><li>Stream the log output of running services</li><li>Run a one-off command on a service</li></ul><p>关键词提取：</p><ul><li><p>multi-container Docker applications</p></li><li><p>use a YAML file to configure</p></li><li><p>with a single command</p></li></ul><p>概括：使用yml文件通过单个命令执行多个服务、容器、应用。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><ol><li><p>官网地址 </p><pre><code class="line-numbers language-shell">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.28.5/docker-        compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></pre></li><li><p>国内镜像</p><pre><code class="line-numbers language-shell">curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.0/docker-        compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</code></pre></li></ol><p><img src="/2021/03/15/docker-jin-jie/image-20210315185018091.png" alt="image-20210315185018091"></p><ol start="3"><li><p>授权</p><pre><code class="line-numbers language-shell">chmod +x /usr/local/bin/docker-compose</code></pre></li><li><p>查看版本</p><pre><code class="line-numbers language-shell">docker-compose --version</code></pre></li></ol><h2 id="3-Get-started-with-Docker-Compose"><a href="#3-Get-started-with-Docker-Compose" class="headerlink" title="3.Get started with Docker Compose"></a>3.Get started with Docker Compose</h2><p><strong>官网很详细，直接跟着官网走</strong></p><p><em>Estimated reading time: 11 minutes</em></p><p>On this page you build a simple Python web application running on Docker Compose. The application uses the Flask framework and maintains a hit counter in Redis. While the sample uses Python, the concepts demonstrated here should be understandable even if you’re not familiar with it.</p><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p>Make sure you have already installed both <a href="https://docs.docker.com/get-docker/">Docker Engine</a> and <a href="https://docs.docker.com/compose/install/">Docker Compose</a>. You don’t need to install Python or Redis, as both are provided by Docker images.</p><h4 id="Step-1-Setup"><a href="#Step-1-Setup" class="headerlink" title="Step 1: Setup"></a>Step 1: Setup</h4><p>Define the application dependencies.</p><ol><li><p>Create a directory for the project:</p><pre><code class="line-numbers language-shell">$ mkdir composetest$ cd composetest</code></pre></li><li><p>Create a file called <code>app.py</code> in your project directory and paste this in:</p><pre><code class="line-numbers language-shell">import timeimport redisfrom flask import Flaskapp = Flask(__name__)cache = redis.Redis(host=&#39;redis&#39;, port=6379)def get_hit_count():    retries = 5    while True:        try:            return cache.incr(&#39;hits&#39;)        except redis.exceptions.ConnectionError as exc:            if retries == 0:                raise exc            retries -= 1            time.sleep(0.5)@app.route(&#39;/&#39;)def hello():    count = get_hit_count()    return &#39;Hello World! I have been seen &#123;&#125; times.\n&#39;.format(count)</code></pre><p>In this example, <code>redis</code> is the hostname of the redis container on the application’s network. We use the default port for Redis, <code>6379</code>.</p><blockquote><p>Handling transient errors</p><p>Note the way the <code>get_hit_count</code> function is written. This basic retry loop lets us attempt our request multiple times if the redis service is not available. This is useful at startup while the application comes online, but also makes our application more resilient if the Redis service needs to be restarted anytime during the app’s lifetime. In a cluster, this also helps handling momentary connection drops between nodes.</p></blockquote></li><li><p>Create another file called <code>requirements.txt</code> in your project directory and paste this in:</p><pre><code class="line-numbers language-shell">flaskredis</code></pre></li></ol><h4 id="Step-2-Create-a-Dockerfile"><a href="#Step-2-Create-a-Dockerfile" class="headerlink" title="Step 2: Create a Dockerfile"></a>Step 2: Create a Dockerfile</h4><p>In this step, you write a Dockerfile that builds a Docker image. The image contains all the dependencies the Python application requires, including Python itself.</p><p>In your project directory, create a file named <code>Dockerfile</code> and paste the following:</p><pre><code class="line-numbers language-shell">FROM python:3.7-alpineWORKDIR /codeENV FLASK_APP=app.pyENV FLASK_RUN_HOST=0.0.0.0RUN apk add --no-cache gcc musl-dev linux-headersCOPY requirements.txt requirements.txtRUN pip install -r requirements.txtEXPOSE 5000COPY . .CMD [&quot;flask&quot;, &quot;run&quot;]</code></pre><p>This tells Docker to:</p><ul><li>Build an image starting with the Python 3.7 image.</li><li>Set the working directory to <code>/code</code>.</li><li>Set environment variables used by the <code>flask</code> command.</li><li>Install gcc and other dependencies</li><li>Copy <code>requirements.txt</code> and install the Python dependencies.</li><li>Add metadata to the image to describe that the container is listening on port 5000</li><li>Copy the current directory <code>.</code> in the project to the workdir <code>.</code> in the image.</li><li>Set the default command for the container to <code>flask run</code>.</li></ul><p>For more information on how to write Dockerfiles, see the <a href="https://docs.docker.com/develop/">Docker user guide</a> and the <a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference</a>.</p><h4 id="Step-3-Define-services-in-a-Compose-file"><a href="#Step-3-Define-services-in-a-Compose-file" class="headerlink" title="Step 3: Define services in a Compose file"></a>Step 3: Define services in a Compose file</h4><p>Create a file called <code>docker-compose.yml</code> in your project directory and paste the following:</p><pre><code class="line-numbers language-shell">version: &quot;3.3&quot; #官方写的3.9，但是会报错，改成3.3。services:  web:    build: .    ports:      - &quot;5000:5000&quot;  redis:    image: &quot;redis:alpine&quot;</code></pre><p>This Compose file defines two services: <code>web</code> and <code>redis</code>.</p><h4 id="Web-service"><a href="#Web-service" class="headerlink" title="Web service"></a>Web service</h4><p>The <code>web</code> service uses an image that’s built from the <code>Dockerfile</code> in the current directory. It then binds the container and the host machine to the exposed port, <code>5000</code>. This example service uses the default port for the Flask web server, <code>5000</code>.</p><h4 id="Redis-service"><a href="#Redis-service" class="headerlink" title="Redis service"></a>Redis service</h4><p>The <code>redis</code> service uses a public <a href="https://registry.hub.docker.com/_/redis/">Redis</a> image pulled from the Docker Hub registry.</p><h4 id="Step-4-Build-and-run-your-app-with-Compose"><a href="#Step-4-Build-and-run-your-app-with-Compose" class="headerlink" title="Step 4: Build and run your app with Compose"></a>Step 4: Build and run your app with Compose</h4><ol><li><p>From your project directory, start up your application by running <code>docker-compose up</code>.</p><pre><code class="line-numbers language-shell">$ docker-compose upCreating network &quot;composetest_default&quot; with the default driverCreating composetest_web_1 ...Creating composetest_redis_1 ...Creating composetest_web_1Creating composetest_redis_1 ... doneAttaching to composetest_web_1, composetest_redis_1web_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)redis_1  | 1:C 17 Aug 22:11:10.480 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Ooredis_1  | 1:C 17 Aug 22:11:10.480 # Redis version=4.0.1, bits=64, commit=00000000, modified=0, pid=1, just startedredis_1  | 1:C 17 Aug 22:11:10.480 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.confweb_1    |  * Restarting with statredis_1  | 1:M 17 Aug 22:11:10.483 * Running mode=standalone, port=6379.redis_1  | 1:M 17 Aug 22:11:10.483 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.web_1    |  * Debugger is active!redis_1  | 1:M 17 Aug 22:11:10.483 # Server initializedredis_1  | 1:M 17 Aug 22:11:10.483 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#39;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#39; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.web_1    |  * Debugger PIN: 330-787-903redis_1  | 1:M 17 Aug 22:11:10.483 * Ready to accept connections</code></pre><p>Compose pulls a Redis image, builds an image for your code, and starts the services you defined. In this case, the code is statically copied into the image at build time.</p><p><img src="/2021/03/15/docker-jin-jie/image-20210316001054382.png" alt="image-20210316001054382"></p></li><li><p>Enter <a href="http://localhost:5000/">http://localhost:5000/</a> in a browser to see the application running.</p><p>If you’re using Docker natively on Linux, Docker Desktop for Mac, or Docker Desktop for Windows, then the web app should now be listening on port 5000 on your Docker daemon host. Point your web browser to <a href="http://localhost:5000/">http://localhost:5000</a> to find the <code>Hello World</code> message. If this doesn’t resolve, you can also try <a href="http://127.0.0.1:5000/">http://127.0.0.1:5000</a>.</p><p>If you’re using Docker Machine on a Mac or Windows, use <code>docker-machine ip MACHINE_VM</code> to get the IP address of your Docker host. Then, open <code>http://MACHINE_VM_IP:5000</code> in a browser.</p><p>You should see a message in your browser saying:</p><pre><code class="line-numbers language-shell">Hello World! I have been seen 1 times.</code></pre><p><img src="/2021/03/15/docker-jin-jie/quick-hello-world-1.png" alt="hello world in browser"></p></li><li><p>Refresh the page.</p><p>The number should increment.</p><pre><code class="line-numbers language-shell">Hello World! I have been seen 2 times.</code></pre><p><img src="/2021/03/15/docker-jin-jie/quick-hello-world-2.png" alt="hello world in browser"></p><p><img src="/2021/03/15/docker-jin-jie/image-20210316001224217.png" alt="image-20210316001224217"></p></li><li><p>Switch to another terminal window, and type <code>docker image ls</code> to list local images.</p><p>Listing images at this point should return <code>redis</code> and <code>web</code>.</p><pre><code class="line-numbers language-shell">$ docker image lsREPOSITORY        TAG           IMAGE ID      CREATED        SIZEcomposetest_web   latest        e2c21aa48cc1  4 minutes ago  93.8MBpython            3.4-alpine    84e6077c7ab6  7 days ago     82.5MBredis             alpine        9d8fa9aa0e5b  3 weeks ago    27.5MB</code></pre><p>You can inspect images with <code>docker inspect &lt;tag or id&gt;</code>.</p></li><li><p>Stop the application, either by running <code>docker-compose down</code> from within your project directory in the second terminal, or by hitting CTRL+C in the original terminal where you started the app.</p></li></ol><h4 id="Step-5-Edit-the-Compose-file-to-add-a-bind-mount"><a href="#Step-5-Edit-the-Compose-file-to-add-a-bind-mount" class="headerlink" title="Step 5: Edit the Compose file to add a bind mount"></a>Step 5: Edit the Compose file to add a bind mount</h4><p>Edit <code>docker-compose.yml</code> in your project directory to add a <a href="https://docs.docker.com/storage/bind-mounts/">bind mount</a> for the <code>web</code> service:</p><pre><code class="line-numbers language-shell">version: &quot;3.9&quot;services:  web:    build: .    ports:      - &quot;5000:5000&quot;    volumes:      - .:/code    environment:      FLASK_ENV: development  redis:    image: &quot;redis:alpine&quot;</code></pre><p>The new <code>volumes</code> key mounts the project directory (current directory) on the host to <code>/code</code> inside the container, allowing you to modify the code on the fly, without having to rebuild the image. The <code>environment</code> key sets the <code>FLASK_ENV</code> environment variable, which tells <code>flask run</code> to run in development mode and reload the code on change. This mode should only be used in development.</p><h4 id="Step-6-Re-build-and-run-the-app-with-Compose"><a href="#Step-6-Re-build-and-run-the-app-with-Compose" class="headerlink" title="Step 6: Re-build and run the app with Compose"></a>Step 6: Re-build and run the app with Compose</h4><p>From your project directory, type <code>docker-compose up</code> to build the app with the updated Compose file, and run it.</p><pre><code class="line-numbers language-shell">$ docker-compose upCreating network &quot;composetest_default&quot; with the default driverCreating composetest_web_1 ...Creating composetest_redis_1 ...Creating composetest_web_1Creating composetest_redis_1 ... doneAttaching to composetest_web_1, composetest_redis_1web_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)...</code></pre><p>Check the <code>Hello World</code> message in a web browser again, and refresh to see the count increment.</p><blockquote><p>Shared folders, volumes, and bind mounts</p><ul><li>If your project is outside of the <code>Users</code> directory (<code>cd ~</code>), then you need to share the drive or location of the Dockerfile and volume you are using. If you get runtime errors indicating an application file is not found, a volume mount is denied, or a service cannot start, try enabling file or drive sharing. Volume mounting requires shared drives for projects that live outside of <code>C:\Users</code> (Windows) or <code>/Users</code> (Mac), and is required for <em>any</em> project on Docker Desktop for Windows that uses <a href="https://docs.docker.com/docker-for-windows/#switch-between-windows-and-linux-containers">Linux containers</a>. For more information, see <a href="https://docs.docker.com/docker-for-mac/#file-sharing">File sharing</a> on Docker for Mac, and the general examples on how to <a href="https://docs.docker.com/storage/volumes/">Manage data in containers</a>.</li><li>If you are using Oracle VirtualBox on an older Windows OS, you might encounter an issue with shared folders as described in this <a href="https://www.virtualbox.org/ticket/14920">VB trouble ticket</a>. Newer Windows systems meet the requirements for <a href="https://docs.docker.com/docker-for-windows/install/">Docker Desktop for Windows</a> and do not need VirtualBox.</li></ul></blockquote><h4 id="Step-7-Update-the-application"><a href="#Step-7-Update-the-application" class="headerlink" title="Step 7: Update the application"></a>Step 7: Update the application</h4><p>Because the application code is now mounted into the container using a volume, you can make changes to its code and see the changes instantly, without having to rebuild the image.</p><p>Change the greeting in <code>app.py</code> and save it. For example, change the <code>Hello World!</code> message to <code>Hello from Docker!</code>:</p><pre><code class="line-numbers language-shell">return &#39;Hello from Docker! I have been seen &#123;&#125; times.\n&#39;.format(count)</code></pre><p>Refresh the app in your browser. The greeting should be updated, and the counter should still be incrementing.</p><p><img src="/2021/03/15/docker-jin-jie/quick-hello-world-3.png" alt="hello world in browser"></p><h4 id="Step-8-Experiment-with-some-other-commands"><a href="#Step-8-Experiment-with-some-other-commands" class="headerlink" title="Step 8: Experiment with some other commands"></a>Step 8: Experiment with some other commands</h4><p>If you want to run your services in the background, you can pass the <code>-d</code> flag (for “detached” mode) to <code>docker-compose up</code> and use <code>docker-compose ps</code> to see what is currently running:</p><pre><code class="line-numbers language-shell">$ docker-compose up -dStarting composetest_redis_1...Starting composetest_web_1...$ docker-compose ps       Name                      Command               State           Ports         -------------------------------------------------------------------------------------composetest_redis_1   docker-entrypoint.sh redis ...   Up      6379/tcp              composetest_web_1     flask run                        Up      0.0.0.0:5000-&gt;5000/tcp</code></pre><p>The <code>docker-compose run</code> command allows you to run one-off commands for your services. For example, to see what environment variables are available to the <code>web</code> service:</p><pre><code class="line-numbers language-shell">$ docker-compose run web env</code></pre><p>See <code>docker-compose --help</code> to see other available commands. You can also install <a href="https://docs.docker.com/compose/completion/">command completion</a> for the bash and zsh shell, which also shows you available commands.</p><p>If you started Compose with <code>docker-compose up -d</code>, stop your services once you’ve finished with them:</p><pre><code class="line-numbers language-shell">$ docker-compose stop</code></pre><p>You can bring everything down, removing the containers entirely, with the <code>down</code> command. Pass <code>--volumes</code> to also remove the data volume used by the Redis container:</p><pre><code class="line-numbers language-shell">$ docker-compose down --volumes</code></pre><p>At this point, you have seen the basics of how Compose works.</p><h3 id="Where-to-go-next"><a href="#Where-to-go-next" class="headerlink" title="Where to go next"></a>Where to go next</h3><ul><li>Next, try the <a href="https://docs.docker.com/compose/samples-for-compose/">Sample apps with Compose</a></li><li><a href="https://docs.docker.com/compose/reference/">Explore the full list of Compose commands</a></li><li><a href="https://docs.docker.com/compose/compose-file/">Compose configuration file reference</a></li><li>To learn more about volumes and bind mounts, see <a href="https://docs.docker.com/storage/">Manage data in Docker</a></li></ul><p><a href="https://docs.docker.com/search/?q=documentation">documentation</a>, <a href="https://docs.docker.com/search/?q=docs">docs</a>, <a href="https://docs.docker.com/search/?q=docker">docker</a>, <a href="https://docs.docker.com/search/?q=compose">compose</a>, <a href="https://docs.docker.com/search/?q=orchestration">orchestration</a>, <a href="https://docs.docker.com/search/?q=containers">containers</a></p><h2 id="4-整个过程的理解："><a href="#4-整个过程的理解：" class="headerlink" title="4.整个过程的理解："></a>4.整个过程的理解：</h2><p>1、应用app.py<br>2、Dockerfile应用打包为镜像<br>3、Docker-compose yaml文件 (定义整个服务，需要的环境。web、redis)完整的上线服务!</p><p>4、启动compose 项目(docker-compose up)<br>流程:</p><p>1、创建网络<br>2、执行Docker-compose yaml</p><p>3、启动服务。<br>Docker-compose yaml<br>Creating composetest_web_1 … done    </p><p>Creating composetest_redis_1 … done</p><p>1、文件名composetest</p><p>2、服务</p><pre><code class="line-numbers language-shell">version: &quot;3.9&quot;services:  web:    build: .    ports:      - &quot;5000:5000&quot;  redis:    image: &quot;redis:alpine&quot;</code></pre><p> 自动的默认规则?</p><pre><code class="line-numbers language-shell">docker images</code></pre><p>帮我们自动下载了</p><p><img src="/2021/03/15/docker-jin-jie/image-20210316001522283.png" alt="image-20210316001522283"></p><p>默认的服务名    文件名_服务名__num</p><p>多个服务器。集群。A B _num    副本数量</p><p>服务redis服务=&gt;4个副本。<br>集群状态。服务都不可能只有一个运行实例。弹性、10 HA高并发。kubectl service负载均衡。</p><p>3、网络规则</p><p><img src="/2021/03/15/docker-jin-jie/image-20210316001653394.png" alt="image-20210316001653394"></p><p>10个服务=&gt;项目(项目中的内容都在同个网络下。域名访问)</p><p><img src="/2021/03/15/docker-jin-jie/image-20210316001908298.png" alt="image-20210316001908298"></p><p>如果在同一个网络下，我们可以直接通过域名访问。</p><p>HA!(高可用)</p><h2 id="5-yaml规则"><a href="#5-yaml规则" class="headerlink" title="5.yaml规则"></a>5.yaml规则</h2><h3 id="docker-compose-yaml-核心！"><a href="#docker-compose-yaml-核心！" class="headerlink" title="docker-compose.yaml 核心！"></a>docker-compose.yaml 核心！</h3><pre><code class="line-numbers language-yaml"># 3层！version: &#39;&#39; # 版本service: # 服务    服务1: web        # 服务配置        images        build        network        ...    服务2: redis        # 服务配置        images        build        network        ...    ...# 其他配置 卷、网络、全局规则volumes:networks:config:</code></pre><h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h3><p>一个容器可能会依赖另一个容器， 通过depends_on可以配置启动顺序</p><p><strong>即使设置了<code>depends_on</code>，那也只是控制容器开始启动的时间，不能控制容器启动完成的时间</strong></p><pre><code class="line-numbers language-yaml">version: &quot;3.9&quot;services:  web:    build: .    depends_on:      - db      - redis  redis:    image: redis  db:    image: postgres</code></pre><p>其他详情见官网：</p><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p><h2 id="6-DockerFile构建过程"><a href="#6-DockerFile构建过程" class="headerlink" title="6.DockerFile构建过程"></a>6.DockerFile构建过程</h2><p>基础知识：</p><p>1、每个保留关键字(指令）都是必须是大写字母</p><p>2、执行从上到下顺序</p><p>3、#表示注释</p><p>4、每一个指令都会创建提交一个新的镜像曾，并提交！</p><p><img src="/2021/03/15/docker-jin-jie/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjEzMTc1Njk5Ny5wbmc" alt="img"></p><p>Dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像逐渐成企业交付的标准，必须要掌握！</p><p>DockerFile：构建文件，定义了一切的步骤，源代码</p><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行产品。</p><h2 id="7-DockerFire的指令"><a href="#7-DockerFire的指令" class="headerlink" title="7.DockerFire的指令"></a>7.DockerFire的指令</h2><p><img src="/2021/03/15/docker-jin-jie/u=1722217816,1097532442&fm=11&gp=0.jpg" alt="img"></p><pre><code class="line-numbers language-dockerfile">FROM                # 基础镜像，一切从这里开始构建MAINTAINER            # 镜像是谁写的， 姓名+邮箱RUN                    # 镜像构建的时候需要运行的命令ADD                    # 步骤，例如tomcat镜像，这个tomcat压缩包！添加内容 添加同目录WORKDIR                # 镜像的工作目录VOLUME                # 挂载的目录EXPOSE                # 保留端口配置CMD                    # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。ENTRYPOINT            # 指定这个容器启动的时候要运行的命令，可以追加命令ONBUILD                # 当构建一个被继承 DockerFile 这个时候就会运行ONBUILD的指令，触发指令。COPY                # 类似ADD，将我们文件拷贝到镜像中ENV                    # 构建的时候设置环境变量！</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo代码高亮问题解决</title>
      <link href="2021/03/15/hexo-dai-ma-gao-liang-wen-ti-jie-jue/"/>
      <url>2021/03/15/hexo-dai-ma-gao-liang-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我的个人博客采用的是闪烁之狐大佬的主题<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a></p><p>最近发现我的文章代码无法高亮，寻找原因许久，终于解决！</p><p>闪烁之狐大佬采用的代码高亮插件是<a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a>，我按照教程一步步来，但无法高亮，网上很多解决方案也试了，都没有解决问题。</p><p>最后找到一篇博客<a href="https://www.jianshu.com/p/f395d92a1110">Hexo博客：六、prism代码高亮</a>，终于解决了我的问题。</p><p>本博客主题为<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>，上边解决问题的主题为next，不过问题不大，照葫芦画瓢，无非是文件位置和代码写法不一样。</p><p>开动！！！</p><h3 id="1-清除hexo-prism-plugin插件"><a href="#1-清除hexo-prism-plugin插件" class="headerlink" title="1. 清除hexo-prism-plugin插件"></a>1. 清除<a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a>插件</h3><ol><li><p>打开根目录下的<code>package.json</code>文件，删除</p><pre><code class="line-numbers language-shell">hexo-prism-plugin: &quot;^2.3.0&quot;,</code></pre></li><li><p>打开根目录下的<code>_config.yml</code>文件，删除</p><pre><code class="line-numbers language-shell">prism_plugin:  mode: &#39;preprocess&#39;    # realtime/preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:</code></pre></li><li><p>删除<code>node_modules</code>文件中的<code>hexo-prism-plugin</code>文件夹</p></li></ol><h3 id="2-禁用highlight"><a href="#2-禁用highlight" class="headerlink" title="2.  禁用highlight"></a>2.  禁用highlight</h3><p>打开根目录下的<code>_config.yml</code>文件，修改配置</p><pre><code class="line-numbers language-yml">highlight:  enable: false  line_number: false  auto_detect: false  tab_replace: &#39;&#39;  wrap: false  hljs: false</code></pre><h3 id="3-获取prism"><a href="#3-获取prism" class="headerlink" title="3.  获取prism"></a>3.  获取prism</h3><p>下载页面：<a href="https://links.jianshu.com/go?to=https://prismjs.com/download.html">https://prismjs.com/download.html</a>；选择 theme 主题、language 支持的语言（不要选太多，够用就好）、plugin 插件（我选的是Line Numbers、Highlight Keywords，其他的看自己需求）；然后点击下载按钮就行了；下载到本地。将他们移动到对应的的位置，它们的路径分别是：</p><pre><code class="line-numbers language-txt">项目根目录\themes\hexo-theme-matery\source\css\prism.css项目根目录\themes\hexo-theme-matery\source\js\prism.js</code></pre><h3 id="4-配置-prism"><a href="#4-配置-prism" class="headerlink" title="4.  配置 prism"></a>4.  配置 prism</h3><ol><li><p>修改<code>\themes\hexo-theme-matery\layout\_partial\footer.ejs</code>， 在尾部添加以下代码：</p><pre><code class="line-numbers language-ejs">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/prism.css&quot;&gt;</code></pre></li><li><p>修改 <code>\themes\hexo-theme-matery\layout\_partial\footer.ejs</code>，在尾部添加以下代码</p><pre><code class="line-numbers language-ejs">&lt;script src=&quot;/js/prism.js&quot; async&gt;&lt;/script&gt;    </code></pre></li></ol><h3 id="5-修改博客配置"><a href="#5-修改博客配置" class="headerlink" title="5. 修改博客配置"></a>5. 修改博客配置</h3><p>打开根目录下的<code>_config.yml</code>文件，添加下面代码</p><pre><code class="line-numbers language-yml">marked:  langPrefix: line-numbers language-</code></pre><h3 id="6-测试prism"><a href="#6-测试prism" class="headerlink" title="6.  测试prism"></a>6.  测试prism</h3><pre><code class="line-numbers language-git">hexo cleanhexo ghexo s</code></pre><p>大功告成！！！</p><p>这个问题解决了，烦心的事情又少了一件，终于可以快快乐乐的写博客了！</p>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>126.单词接龙 II-困难</title>
      <link href="2021/03/14/126-dan-ci-jie-long-ii-kun-nan/"/>
      <url>2021/03/14/126-dan-ci-jie-long-ii-kun-nan/</url>
      
        <content type="html"><![CDATA[<h3 id="126-单词接龙-II"><a href="#126-单词接龙-II" class="headerlink" title="126. 单词接龙 II"></a><a href="https://leetcode-cn.com/problems/word-ladder-ii/">126. 单词接龙 II</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个起始字符串和一个终止字符串，以及一个单词表，求是否可以将起始字符串每次改一个字符，直到改成终止字符串，且所有中间的修改过程表示的字符串都可以在单词表里找到。</p><p>若存在，输出需要修改次数最少的所有更改方式。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><p>输入是两个字符串，输出是一个二维字符串数组，表示每种字符串修改方式。</p><pre><code class="line-numbers language-C++">Input:beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;,wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]Output:[[&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],[&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]]</code></pre><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>我们可以把起始字符串、终止字符串、以及单词表里所有的字符串想象成节点。若两个字符串只有一个字符不同，那么它们相连。因为题目需要输出修改次数最少的所有修改方式，因此我们可以使用广度优先搜索，求得起始节点到终止节点的最短距离。</p><p>我们同时还使用了一个小技巧：我们并不是直接从起始节点进行广度优先搜索，直到找到终止节点为止；而是从起始节点和终止节点分别进行广度优先搜索，每次只延展当前层节点数最少的那一端，这样我们可以减少搜索的总结点数。举例来说，假设最短距离为 4，如果我们只从一端搜索 4 层，总遍历节点数最多是 1 + 2 + 4 + 8 + 16 = 31；而如果我们从两端各搜索两层，总遍历节点数最多只有 2 × (1 + 2 + 4) = 14。</p><p>在搜索结束后，我们还需要通过回溯法来重建所有可能的路径。</p><pre><code class="line-numbers language-C++">class Solution &#123;public:    vector&lt;vector&lt;string&gt;&gt; findLadders(string beginWord, string endWord, vector&lt;string&gt;&amp; wordList) &#123;        //ans用来存放最后的输出结果        vector&lt;vector&lt;string&gt;&gt; ans;        //dict用来以set的形式存放字典wordList        unordered_set&lt;string&gt; dict;        for (const auto&amp; w: wordList) &#123;            dict.insert(w);        &#125;        //如果字典里没有endList，直接返回结果        if (!dict.count(endWord)) &#123;            return ans;        &#125;        //删除字典里的beginWord和endWord        dict.erase(beginWord);        dict.erase(endWord);        unordered_set&lt;string&gt; q1&#123;beginWord&#125;, q2&#123;endWord&#125;;        unordered_map&lt;string, vector&lt;string&gt;&gt; next;        bool reversed = false, found = false;        while (!q1.empty()) &#123;                unordered_set &lt;string&gt; q;                for (const auto&amp; w: q1) &#123;                    string s = w;                    for (size_t i = 0; i &lt; s.size(); i++) &#123;                        char ch = s[i];                         for (int j = 0; j &lt; 26; j++) &#123;                            s[i] = j + &#39;a&#39;;                            if (q2.count(s)) &#123;                                reversed ? next[s].push_back(w) : next[w].push_back(s);                                 found = true;                            &#125;                            if (dict.count(s)) &#123;                                reversed ? next[s].push_back(w) : next[w].push_back(s);                                q.insert(s);                            &#125;                        &#125;                        s[i] = ch;                    &#125;                &#125;                if (found) &#123;                     break;                &#125;                for (const auto&amp; w: q) &#123;                    dict.erase(w);                &#125;                if (q.size() &lt;= q2.size()) &#123;                    q1 = q;                &#125; else &#123;                     reversed = !reversed;                    q1 = q2;                    q2 = q;                &#125;        &#125;        if (found) &#123;            vector&lt;string&gt; path = &#123;beginWord&#125;;            backtracking(beginWord, endWord, next, path, ans);        &#125;        return ans;    &#125;    void backtracking(const string&amp; src, const string&amp; dst, unordered_map&lt;string, vector&lt;string&gt;&gt;&amp; next, vector&lt;string&gt;&amp; path,vector&lt;vector&lt;string&gt;&gt;&amp; ans) &#123;        if (src == dst) &#123;            ans.push_back(path);            return;        &#125;        for (const auto&amp; s : next[src]) &#123;            path.push_back(s);            backtracking(s, dst, next, path, ans);            path.pop_back();        &#125;    &#125;&#125;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的学习使用记录</title>
      <link href="2021/03/14/docker-de-xue-xi-shi-yong-ji-lu/"/>
      <url>2021/03/14/docker-de-xue-xi-shi-yong-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="容器数据卷使用"><a href="#容器数据卷使用" class="headerlink" title="容器数据卷使用"></a>容器数据卷使用</h2><h3 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h3><p>将应用和环境打包成一个镜像！</p><p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！需求：数据可以持久化</p><p>MySQL，容器删除了，删库跑路！需求：MySQL数据可以存储在本地！</p><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地！</p><p>这就是卷技术！目录的挂载，将我们容器内的目录，挂载到Linux上面！</p><p><strong>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的！</strong></p><h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><pre><code class="line-numbers language-Shell">#1.启动容器mysqldocker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=密码 --name mysql mysql:8.0.23#命令-d 后台运行-p 端口映射-v 卷挂载-e 环境配置-- name 容器名字#2.查看容器的信息 docker inspect 容器id </code></pre><p><img src="/2021/03/14/docker-de-xue-xi-shi-yong-ji-lu/image-20210314200223048.png" alt="image-20210314200223048"></p><pre><code class="line-numbers language-shell">-v /home/mysql/conf:/etc/mysql/conf.d     #&#39;:&#39;前面是主机内地址， &#39;:&#39;后面是docker容器内地址</code></pre><h3 id="三种挂载方式"><a href="#三种挂载方式" class="headerlink" title="三种挂载方式"></a>三种挂载方式</h3><pre><code class="line-numbers language-shell"># 三种挂载： 匿名挂载、具名挂载、指定路径挂载-v 容器内路径            #匿名挂载-v 卷名：容器内路径          #具名挂载-v /宿主机路径：容器内路径 #指定路径挂载 docker volume ls 是查看不到的</code></pre><p>拓展</p><pre><code class="line-numbers language-shell"># 通过 -v 容器内路径： ro rw 改变读写权限ro #readonly 只读rw #readwrite 可读可写$ docker run -d -P --name nginx05 -v juming:/etc/nginx:ro nginx$ docker run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx# ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</code></pre><h2 id="docker启动关闭删除所有的容器命令"><a href="#docker启动关闭删除所有的容器命令" class="headerlink" title="docker启动关闭删除所有的容器命令"></a>docker启动关闭删除所有的容器命令</h2><p>1、启动所有容器</p><pre><code class="line-numbers language-shell">docker start $(docker ps -a | awk &#39;&#123; print $1&#125;&#39; | tail -n +2)</code></pre><p>2、关闭所有容器</p><pre><code class="line-numbers language-shell">docker stop $(docker ps -a | awk &#39;&#123; print $1&#125;&#39; | tail -n +2)</code></pre><p>3、删除所有容器</p><pre><code class="line-numbers language-shell">docker rm $(docker ps -a | awk &#39;&#123; print $1&#125;&#39; | tail -n +2)</code></pre><p>4、删除所有镜像（慎用）</p><pre><code class="line-numbers language-shell">docker rmi $(docker images | awk &#39;&#123;print $3&#125;&#39; |tail -n +2)</code></pre><h2 id="docker启动和关闭命令"><a href="#docker启动和关闭命令" class="headerlink" title="docker启动和关闭命令"></a>docker启动和关闭命令</h2><p>docker启动       </p><pre><code class="line-numbers language-shell">systemctl start docker重启docker服务systemctl restart  docker关闭docker    systemctl stop docker查看是否启动成功docker ps -a</code></pre><h2 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h2><p>进入tomcat bin目录后</p><p>直接启动<code>./startup.sh </code><br>作为服务启动<code>nohup ./startup.sh &amp;</code><br>控制台动态输出方式启动<code> ./catalina.sh run</code> 动态地显示tomcat后台的控制台输出信息,Ctrl+C后退出并关闭服务<br>通过方式一、方式三启动的tomcat有个弊端，当客户端连接断开的时候，tomcat服务也会立即停止，通过方式二可以作为，linux服务一直运行。<br>通过方式一、方式二方式启动的tomcat，其日志会写到相应的日志文件中，而不能动态地查看tomcat控制台的输出信息与错误情况，然后还需要<code>tail -f catalina.out</code> ;Ctrl+c 退出tail命令.<br>     然后就是检测tomcat是否启动成功： <code>ps -aux | grep tomcat </code>。输出org.apache.catalina.startup.Bootstrap start说明启动成功，<code>kill    -9 进程号</code>可以杀死进程。</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitalk 评论登录 403 问题解决</title>
      <link href="2021/02/19/gitalk-ping-lun-deng-lu-403-wen-ti-jie-jue/"/>
      <url>2021/02/19/gitalk-ping-lun-deng-lu-403-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cuiqingcai.com/30010.html">https://cuiqingcai.com/30010.html</a></p><p>博主解决问题的思路很清晰，值得学习!</p><p><a href="https://imgchr.com/i/yfzGSe"><img src="https://s3.ax1x.com/2021/02/19/yfzGSe.jpg" alt="yfzGSe.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牧羊少年的奇幻之旅</title>
      <link href="2021/02/18/mu-yang-shao-nian-qi-huan-zhi-lu/"/>
      <url>2021/02/18/mu-yang-shao-nian-qi-huan-zhi-lu/</url>
      
        <content type="html"><![CDATA[<p>高三读完这本书后写的， 现在在看又是不一样的感觉。</p><p><img src="/2021/02/18/mu-yang-shao-nian-qi-huan-zhi-lu/%E7%89%A7%E7%BE%8A%E5%B0%91%E5%B9%B4%E5%A5%87%E5%B9%BB%E4%B9%8B%E6%97%85%E5%B0%81%E7%9A%AE.jpg" alt="牧羊少年奇幻之旅封皮">    </p><p>​        我是一个牧羊人，重复做着同一个梦。梦里告诉我有宝藏。在撒冷之王的指引下，我踏上了寻宝之旅。</p><p>​        第一天，我的钱就全部被我信任的人骗去。我决定不再相信任何人，我疲惫至极，当我将要放弃的时候，撒冷之王的话语回荡在我的耳边：当你想要得到某种东西的时候，整个宇宙都会合力助你实现愿望。我已不再悲伤，我怀着一个念头沉重睡去——我是一个寻宝人，明天我将开始新的旅途。</p><p>​        我遇见了水晶店的主人，我助他的水晶店焕然一新，他付我报酬使我得以继续寻宝，“命中注定”，水晶店的主人送我离开时这样说。</p><p>​        我又遇见了一个英国人，我本不想与他打交道，“一切都有预兆”，他从口中吐出这几个字，我改变了想法，我决定和他一起开始这趟沙漠之旅，因为撒冷之王说过同样的话。这位英国人和我一样有使命，他一生的一半光阴都花在了炼金术上，他要去寻找一位炼金术士。</p><p>​        沙漠之旅并不容易，一路的艰苦跋涉终使我们到达了绿洲，我为绿洲带来了战争的预兆，他们将封我为顾问，我已厌倦了这趟旅途，至高的待遇诱使我留在这里。开玩笑般的我再次遇见了一个人，他使我明白，当我老之将至，站在梧桐树下回首自己度过的虚无的一生，遥想被深埋在地下的宝藏时已为时晚矣。</p><p>​        他正是炼金术士。</p><p>​        我再次开启这趟征途，种种经历让我开始尝试倾听内心的声音，我弄懂了心所耍的各种手段和花招。被逼无奈之下我开始领悟世界的语言，感悟到了爱的力量，觉悟到了这一切皆由我的双手写就。我抵达了金字塔，奋力挖掘，然而一无所获。</p><p>​        一个经过的难民在知道我挖掘的原因之后开始耻笑我说：“你真愚蠢，我也和你一样做过同样的梦，我梦到与此地有一个沙漠之隔的教堂，一个牧羊人经常在那里过夜，如果我在那里挖掘，我会找到宝藏，可我不会像你这么蠢。”</p><p>​        我感谢这个不相信梦的家伙，我找到我的宝藏了。我站起来拍拍身上的沙子，金字塔正朝我笑呢。</p><p>​        我回到了教堂，在无果树下挖掘。“老巫师”我自言自语，“你什么都知道，甚至还为我留了回来的钱，看到我衣衫褴褛的跑回来，他们都笑了，你就不能让我免遭这一切？”</p><p>​        “不能，”我听到有个声音说，“如果我告诉你这一切，那你就看不到金字塔了，它很壮美，不是吗？”</p><p>​        那分明是炼金术士的声音。<br>​                                                                    ——《牧羊少年的奇幻之旅》</p>]]></content>
      
      
      <categories>
          
          <category> 感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
