<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MS</title>
      <link href="2021/04/03/ms/"/>
      <url>2021/04/03/ms/</url>
      
        <content type="html"><![CDATA[<h2 id="get与post请求的区别，post的安全性体现在那里，是否可以发现他的请求内容"><a href="#get与post请求的区别，post的安全性体现在那里，是否可以发现他的请求内容" class="headerlink" title="get与post请求的区别，post的安全性体现在那里，是否可以发现他的请求内容"></a>get与post请求的区别，post的安全性体现在那里，是否可以发现他的请求内容</h2><p>区别</p><ol><li>GET把 参数包含在URL中，POST通过request body传递参数</li><li>GET请求会被 浏览器主动cache，而POST 不会，除非手动设置。</li><li>GET产生 一个TCP 数据包；POST产生 两个TCP数据包。</li><li>GET比POST更不安全，因为参数 直接暴露在URL上，所以不能用来传递敏感信息。</li><li>GET请求只能进行 url编码，而POST支持 多种编码方式。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>GET产生的URL地址可以被 Bookmark，而POST不可以</li><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li><li>由于（主流） 浏览器的一些 限制，导致get请求所传输的数据长度和字符编码(ASCII)受到一些限制，但是post请求一般未对其进行限制，所以支持更多的编码和数据长度<br>post的安全性主要体现在上面的2，4，5，6点。可以通过抓包的形式获取到他的请求内容，不过，可能需要进行转码，解密。</li></ol><p><strong>GET与POST是我们常用的两种HTTP Method，二者之间的区别主要包括如下五个方面：</strong></p><p>(1). 从功能上讲，GET一般用来从服务器上获取资源，POST一般用来更新服务器上的资源；</p><p>(2). 从REST服务角度上说，GET是幂等的，即读取同一个资源，总是得到相同的数据，而POST不是幂等的，因为每次请求对资源的改变并不是相同的；进一步地，GET不会改变服务器上的资源，而POST会对服务器资源进行改变；</p><p>(3). 从请求参数形式上看，GET请求的数据会附在URL之后，即将请求数据放置在HTTP报文的 请求头 中，以?分割URL和传输数据，参数之间以&amp;相连。特别地，如果数据是英文字母/数字，原样发送；否则，会将其编码为 application/x-www-form-urlencoded MIME 字符串(如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII)；而POST请求会把提交的数据则放置在是HTTP请求报文的 请求体 中。</p><p>(4). 就安全性而言，POST的安全性要比GET的安全性高，因为GET请求提交的数据将明文出现在URL上，而且POST请求参数则被包装到请求体中，相对更安全。</p><p>(5). 从请求的大小看，GET请求的长度受限于浏览器或服务器对URL长度的限制，允许发送的数据量比较小，而POST请求则是没有大小限制的。</p><h2 id="基于session认证所显露的问题"><a href="#基于session认证所显露的问题" class="headerlink" title="基于session认证所显露的问题"></a>基于session认证所显露的问题</h2><p><strong>Session</strong>: 每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。</p><p><strong>扩展性</strong>: 用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。</p><p><strong>CSRF</strong>: 因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</p><h2 id="基于token的鉴权机制"><a href="#基于token的鉴权机制" class="headerlink" title="基于token的鉴权机制"></a>基于token的鉴权机制</h2><p>基于token的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于token认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。</p><p>流程上是这样的：</p><ul><li>用户使用用户名密码来请求服务器</li><li>服务器进行验证用户的信息</li><li>服务器通过验证发送给用户一个token</li><li>客户端存储token，并在每次请求时附送上这个token值</li><li>服务端验证token值，并返回数据</li></ul><h2 id="常见状态码及原因短语"><a href="#常见状态码及原因短语" class="headerlink" title="常见状态码及原因短语"></a>常见状态码及原因短语</h2><p>　　HTTP请求结构： 请求方式 + 请求URI + 协议及其版本<br>　　HTTP响应结构： 状态码 + 原因短语 + 协议及其版本</p><p>1×× : 请求处理中，请求已被接受，正在处理<br>2×× : 请求成功，请求被成功处理</p><p>200 OK</p><p>3×× : 重定向，要完成请求必须进行进一步处理<br>301 : 永久性转移<br>302 ：暂时性转移<br>304 ： 已缓存</p><p>4×× : 客户端错误，请求不合法<br>400：Bad Request,请求有语法问题<br>403：拒绝请求<br>404：客户端所访问的页面不存在</p><p>5×× : 服务器端错误，服务器不能处理合法请求<br>500 ：服务器内部错误<br>503 ： 服务不可用，稍等</p><h2 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h2><p>Singleton 模式通常有两种实现形式。</p><h4 id="第-1-种：懒汉式单例"><a href="#第-1-种：懒汉式单例" class="headerlink" title="第 1 种：懒汉式单例"></a>第 1 种：懒汉式单例</h4><p>该模式的特点是类加载时没有生成单例，只有当第一次调用 getlnstance 方法时才去创建这个单例。代码如下：</p><pre><code class="line-numbers language-java">public class LazySingleton &#123;    private static volatile LazySingleton instance = null;    //保证 instance 在所有线程中同步    private LazySingleton() &#123;    &#125;    //private 避免类在外部被实例化    public static synchronized LazySingleton getInstance() &#123;        //getInstance 方法前加同步        if (instance == null) &#123;            instance = new LazySingleton();        &#125;        return instance;    &#125;&#125;</code></pre><p>注意：如果编写的是多线程程序，则不要删除上例代码中的关键字 volatile 和 synchronized，否则将存在线程非安全的问题。如果不删除这两个关键字就能保证线程安全，但是每次访问时都要同步，会影响性能，且消耗更多的资源，这是懒汉式单例的缺点。</p><h4 id="第-2-种：饿汉式单例"><a href="#第-2-种：饿汉式单例" class="headerlink" title="第 2 种：饿汉式单例"></a>第 2 种：饿汉式单例</h4><p>该模式的特点是类一旦加载就创建一个单例，保证在调用 getInstance 方法之前单例已经存在了。</p><pre><code class="line-numbers language-java">public class HungrySingleton &#123;    private static final HungrySingleton instance = new HungrySingleton();    private HungrySingleton() &#123;    &#125;    public static HungrySingleton getInstance() &#123;        return instance;    &#125;&#125;</code></pre><p>饿汉式单例在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以是线程安全的，可以直接用于多线程而不会出现问题。</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote><p>**简单工厂模式</p><p>**</p></blockquote><p>简单工厂模式不是23种里的一种，简而言之，就是有一个专门生产某个产品的类。<br>比如下图中的鼠标工厂，专业生产鼠标，给参数0，生产戴尔鼠标，给参数1，生产惠普鼠标。  </p><p><img src="/2021/04/03/ms/09067f878916c0e4377bfadc82afc248_hd.jpg" alt="img"><img src="/2021/04/03/ms/09067f878916c0e4377bfadc82afc248_720w.jpg" alt="img"></p><blockquote><p><strong>工厂模式</strong>  </p></blockquote><p>工厂模式也就是鼠标工厂是个父类，有生产鼠标这个接口。<br>戴尔鼠标工厂，惠普鼠标工厂继承它，可以分别生产戴尔鼠标，惠普鼠标。<br>生产哪种鼠标不再由参数决定，而是创建鼠标工厂时，由戴尔鼠标工厂创建。<br>后续直接调用鼠标工厂.生产鼠标()即可  </p><p><img src="/2021/04/03/ms/69ab924585b751cb9e7bc7b7f9f2179b_hd.jpg" alt="img"><img src="/2021/04/03/ms/69ab924585b751cb9e7bc7b7f9f2179b_720w.jpg" alt="img"></p><blockquote><p><strong>抽象工厂模式</strong>  </p></blockquote><p>抽象工厂模式也就是不仅生产鼠标，同时生产键盘。<br>也就是PC厂商是个父类，有生产鼠标，生产键盘两个接口。<br>戴尔工厂，惠普工厂继承它，可以分别生产戴尔鼠标+戴尔键盘，和惠普鼠标+惠普键盘。<br>创建工厂时，由戴尔工厂创建。<br>后续工厂.生产鼠标()则生产戴尔鼠标，工厂.生产键盘()则生产戴尔键盘。  </p><p><img src="/2021/04/03/ms/ab2a90cfcc7a971b1e3127d1f531a486_hd.jpg" alt="img"><img src="/2021/04/03/ms/ab2a90cfcc7a971b1e3127d1f531a486_720w.jpg" alt="img"></p><blockquote><p><strong><em>在抽象工厂模式中，假设我们需要增加一个工厂\</em></strong></p></blockquote><p>假设我们增加华硕工厂，则我们需要增加华硕工厂，和戴尔工厂一样，继承PC厂商。<br>之后创建华硕鼠标，继承鼠标类。创建华硕键盘，继承键盘类。<br>即可。  </p><p><img src="/2021/04/03/ms/e8184a3c6b3463338d85c329004d7c64_hd.jpg" alt="img"><img src="/2021/04/03/ms/e8184a3c6b3463338d85c329004d7c64_720w.jpg" alt="img"></p><blockquote><p><strong><em>在抽象工厂模式中，假设我们需要增加一个产品\</em></strong></p></blockquote><p>假设我们增加耳麦这个产品，则首先我们需要增加耳麦这个父类，再加上戴尔耳麦，惠普耳麦这两个子类。<br>之后在PC厂商这个父类中，增加生产耳麦的接口。最后在戴尔工厂，惠普工厂这两个类中，分别实现生产戴尔耳麦，惠普耳麦的功能。<br>以上。  </p><p><img src="/2021/04/03/ms/0f20f50524336fa9634e19237ce0ec7e_hd.jpg" alt="img"><img src="/2021/04/03/ms/0f20f50524336fa9634e19237ce0ec7e_720w.jpg" alt="img"></p><h2 id="介绍一下-Java-有哪些锁"><a href="#介绍一下-Java-有哪些锁" class="headerlink" title="介绍一下 Java 有哪些锁"></a>介绍一下 Java 有哪些锁</h2><p>(synchronized、juc 提供的锁如 ReentrantLock、CountDownLatch、CyclicBarrier、Semaphore等)</p><p>公平锁/非公平锁 (重要)</p><p>可重入锁</p><p>独享锁/共享锁 (重要)</p><p>互斥锁/读写锁</p><p>乐观锁/悲观锁 (重要)</p><p>偏向锁/轻量级锁/重量级锁 (重要)</p><p>自旋锁</p><p><strong>公平锁/非公平锁</strong></p><p>公平锁是指多个线程按照申请锁的顺序来获取锁。</p><p>非公平锁是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比 先申请的线程优先获取锁。有可能，会造成优先级反转或者饥饿现象。</p><p>对于Java ReentrantLock而言，通过构造函数指定该锁是否是公平锁，默认是非公平锁。非公平锁的优点在于吞吐量比公平锁大。对于Synchronized而言，也是一种非公平锁。由于其并不像ReentrantLock是通过AQS的来实现线程调度，所以并没有任何办法 使其变成公平锁。</p><p>可重入锁</p><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，在进入内层方法会 自动获取锁。</p><p>对于Java ReentrantLock而言，是一个可重入锁，其名字是Re entrant Lock重新进入锁。</p><p>对于Synchronized而言，也是一个可重入锁。可重入锁的一个好处是可一定程度避免死锁。</p><p><strong>独享锁/共享锁 (互斥锁/读写锁)</strong></p><p>独享锁是指该锁一次只能被一个线程所持有。共享锁是指该锁可被多个线程所持有。</p><p>对于Java ReentrantLock而言，其是独享锁。但是对于Lock的另一个实现类ReadWriteLock，其读锁是共享锁，其写锁是独享锁。</p><p>上面讲的独享锁/共享锁就是一种广义的说法，互斥锁/读写锁就是具体的实现。 互斥锁在Java中的具体实现就是ReentrantLock</p><p>读写锁在Java中的具体实现就是ReadWriteLock</p><p><strong>乐观锁/悲观锁</strong></p><p>乐观锁与悲观锁不是指具体的什么类型的锁，而是指看待并发同步的角度。</p><p>对于同一个数据的并发操作，悲观锁采取加锁的形式。悲观的认为，不加锁的并发操作 一定会出问题。</p><p>乐观锁在更新数据的时候，主要就是两个步骤：冲突检测和数据更新。乐观的认为，不 加锁的并发操作是没有事情的。当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被 告知这次竞争中失败，并可以再次尝试。</p><p>从上面的描述我们可以看出，悲观锁适合写操作非常多的场景，乐观锁适合读操作非常 多的场景，不加锁会带来大量的性能提升。</p><p>悲观锁在Java中的使用，就是利用各种锁。</p><p>乐观锁在Java中的使用，是无锁编程，常常采用的是CAS算法，典型的例子就是原子 类，通过CAS自旋实现原子操作的更新。</p><p>CAS包含三个参数 CAS（V,E,N）。V表示要更新的变量，E表示预期的值，N表示新值。仅当要更新的变量值等于预期的值时，才会将要更新的变量值的值设置成新 值，否则什么都不做。</p><p><strong>偏向锁/轻量级锁/重量级锁</strong></p><p>这三种锁是指锁的状态，并且是针对Synchronized。</p><p>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取 锁的代价。</p><p>轻量级锁是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级 锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。</p><p>重量级锁是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下 去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。 重量级锁会让其他申请的线程进入阻塞，性能降低。</p><p>自旋锁</p><p>自旋锁是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样 的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU。</p><h2 id="乐观锁和悲观锁讲一下，哪些地方用到。"><a href="#乐观锁和悲观锁讲一下，哪些地方用到。" class="headerlink" title="乐观锁和悲观锁讲一下，哪些地方用到。"></a><strong>乐观锁和悲观锁讲一下，哪些地方用到。</strong></h2><blockquote><p>乐观锁与悲观锁不是指具体的什么类型的锁，而是指<strong>看待并发同步的角度</strong>。 悲观锁对于同一个数据的并发操作，悲观锁采取加锁的形式。悲观的认为，不加锁的并发操作一定会出问题。 乐观锁在更新数据的时候，会采用尝试更新，不断重试的方式更新数据。乐观的认为，不加锁的并发操作是没有事情的。</p><p><strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</strong>，传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁，数据库的for update SQL语句。Java中<code>synchronized</code>和<code>ReentrantLock</code>等独占锁就是悲观锁思想的实现。</p><p><strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。在Java中<code>java.util.concurrent.atomic</code>包下面的原子变量类就是使用了乐观锁的一种实现方式<strong>CAS</strong>实现的。</p><p><strong>乐观锁适用于写比较少的情况下（多读场景）</strong>，<strong>一般多写的场景下用悲观锁就比较合适</strong>，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能。</p></blockquote><h2 id="5种IO模型？"><a href="#5种IO模型？" class="headerlink" title="5种IO模型？"></a><strong>5种IO模型？</strong></h2><blockquote><p><strong>关注消息通信机制：</strong></p><p><strong>同步：调用一个功能，在功能结果没有返回之前，一直等待结果返回。</strong></p><p><strong>异步：调用一个功能，调用立刻返回，但调用者不能立刻得到结果。调用者可以继续后续的操作，其结果一般通过状态，回调函数来通知调用者。</strong></p><p><strong>等待调用结果时的状态：</strong></p><p><strong>阻塞：调用一个函数，当调用结果返回之前，当前线程会被挂起，只有得到结果之后才会返回。</strong></p><p><strong>非阻塞：调用一个函数，不能立刻得到结果之前，调用不能阻塞当前线程。</strong></p></blockquote><blockquote><p><strong>一个输入操作通常包括两个阶段：</strong></p><ul><li><strong>等待数据准备好</strong></li><li><strong>从内核向进程复制数据</strong></li></ul><p><strong>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待数据到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。</strong></p></blockquote><blockquote><p>阻塞IO模型：应用进程被阻塞，直到数据从内核缓冲区复制到应用进程缓冲区中才返回。</p><p>非阻塞IO模型：进程发起IO系统调用后，内核返回一个错误码而不会被阻塞；应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成。如果内核缓冲区有数据，内核就会把数据返回进程。</p><p>IO复用模型：使用 select 或者 poll 等待数据，可以等待多个套接字中的任何一个变为可读。这一过程会被阻塞，当某一个套接字可读时返回，之后把数据从内核复制到进程中。（在多路复用IO模型中，会有一个线程不断去轮询多个socket的状态，只有当socket真正有读写事件时，才真正调用实际的IO读写操作。因为在多路复用IO模型中，只需要使用一个线程就可以管理多个socket，并且只有在真正有socket读写事件进行时，才会使用IO资源，所以它大大减少了资源占用。）</p><p>信号驱动IO模型：当进程发起一个IO操作，会向内核注册一个信号处理函数，然后进程返回不阻塞；当内核数据就绪时会发送一个信号给进程，进程便在信号处理函数中调用IO读取数据。</p><p>异步IO模型：当进程发起一个IO操作，进程返回不阻塞，但也不能返回结果；内核把整个IO处理完后，会通知进程结果。如果IO操作成功则进程直接获取到数据。</p></blockquote><h2 id="线程死锁，解除线程死锁有哪几种方式？-两次栽倒这题上了，时间太久又忘记了，如何解决很重要"><a href="#线程死锁，解除线程死锁有哪几种方式？-两次栽倒这题上了，时间太久又忘记了，如何解决很重要" class="headerlink" title="线程死锁，解除线程死锁有哪几种方式？(两次栽倒这题上了，时间太久又忘记了，如何解决很重要)"></a><strong>线程死锁，解除线程死锁有哪几种方式？(两次栽倒这题上了，时间太久又忘记了，如何解决很重要)</strong></h2><blockquote><p>线程死锁描述的是这样一种情况：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。</p></blockquote><blockquote><p>如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态。</p><p><a href="https://camo.githubusercontent.com/6785f1ba4ee42c654ca9fddf8bc2dedbb264cc4bb612572bad578afc9e9db1ee/68747470733a2f2f6d6d62697a2e717069632e636e2f6d6d62697a5f706e672f696149645166457269633954796b33644f44426b7a357235624a4e6c477369615a5a4d777452596b34306e546f44317a7064666576646a36416f48715539554745304d353344785539724375497475754f62456c4d53474b512f3634303f77785f666d743d706e672674703d7765627026777866726f6d3d352677785f6c617a793d312677785f636f3d31"><img src="https://camo.githubusercontent.com/6785f1ba4ee42c654ca9fddf8bc2dedbb264cc4bb612572bad578afc9e9db1ee/68747470733a2f2f6d6d62697a2e717069632e636e2f6d6d62697a5f706e672f696149645166457269633954796b33644f44426b7a357235624a4e6c477369615a5a4d777452596b34306e546f44317a7064666576646a36416f48715539554745304d353344785539724375497475754f62456c4d53474b512f3634303f77785f666d743d706e672674703d7765627026777866726f6d3d352677785f6c617a793d312677785f636f3d31" alt="img"></a></p><p><strong>解决死锁的策略</strong></p><ul><li>死锁预防</li><li>死锁避免</li><li>死锁检测</li><li>死锁解除</li></ul><ol><li><strong>死锁预防：</strong> 破坏导致死锁必要条件中的任意一个就可以预防死锁。 （1）<strong>破坏占有和等待条件：</strong> 一次性申请所有资源，之后不再申请资源，如果不满足资源条件则得不到资源分配。 （2）<strong>破坏不可剥夺条件：</strong> 当一个进程获得某个不可剥夺的资源时，提出新的资源申请，若不满足，则释放所有资源。 （3）<strong>破坏循环等待条件：</strong> 按某一顺序申请资源，释放资源则反序释放。</li><li><strong>死锁避免：</strong> 进程在每次申请资源时判断这些操作是否安全。</li><li><strong>死锁检测：</strong> 判断系统是否属于死锁的状态，如果是，则执行死锁解除策略。</li><li><strong>死锁解除：</strong> 将某进程所占资源进行强制回收，然后分配给其他进程。（与死锁检测结合使用的）</li></ol></blockquote><h2 id="那ACID靠什么保证的呢？"><a href="#那ACID靠什么保证的呢？" class="headerlink" title="那ACID靠什么保证的呢？"></a>那ACID靠什么保证的呢？</h2><p>A原子性由undo log日志保证，它记录了需要回滚的日志信息，事务回滚时撤销已经执行成功的sql</p><p>C一致性一般由代码层面来保证</p><p>I隔离性由MVCC来保证</p><p>D持久性由内存+redo log来保证，mysql修改数据同时在内存和redo log记录这次操作，事务提交的时候通过redo log刷盘，宕机的时候可以从redo log恢复</p><h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h2><p>从数据库系统角度分为三种：排他锁、共享锁、更新锁。<br>从程序员角度分为两种：一种是悲观锁，一种乐观锁。</p><h2 id="排他锁和共享锁"><a href="#排他锁和共享锁" class="headerlink" title="排他锁和共享锁"></a>排他锁和共享锁</h2><ul><li>排他锁（Exclusive），简写为 X 锁，又称写锁。</li><li>共享锁（Shared），简写为 S 锁，又称读锁。</li></ul><p>有以下两个规定：</p><ul><li>一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。</li><li>一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。</li></ul><h2 id="更新锁"><a href="#更新锁" class="headerlink" title="更新锁"></a>更新锁</h2><p>U锁，在修改操作的初始化阶段用来锁定可能要被修改的资源，这样可以避免使用共享锁造成的死锁现象</p><h2 id="何谓悲观锁与乐观锁"><a href="#何谓悲观锁与乐观锁" class="headerlink" title="何谓悲观锁与乐观锁"></a>何谓悲观锁与乐观锁</h2><p>乐观锁对应于生活中乐观的人总是想着事情往好的方向发展，悲观锁对应于生活中悲观的人总是想着事情往坏的方向发展。这两种人各有优缺点，不能不以场景而定说一种人好于另外一种人。</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。</p><h3 id="两种锁的使用场景"><a href="#两种锁的使用场景" class="headerlink" title="两种锁的使用场景"></a>两种锁的使用场景</h3><p>从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适。</p><h3 id="乐观锁常见的两种实现方式"><a href="#乐观锁常见的两种实现方式" class="headerlink" title="乐观锁常见的两种实现方式"></a>乐观锁常见的两种实现方式</h3><p>乐观锁一般会使用版本号机制或CAS算法实现。</p><ol><li><h4 id="版本号机制"><a href="#版本号机制" class="headerlink" title="版本号机制"></a>版本号机制</h4><p>一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。</p></li></ol><p>举一个简单的例子：</p><p>假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 $100 。当需要对账户信息表进行更新的时候，需要首先读取version字段。</p><p>操作员 A 此时将其读出（ version=1 ），并从其帐户余额中扣除 $50（ $100-$50 ）。<br>在操作员 A 操作的过程中，操作员B 也读入此用户信息（ version=1 ），并从其帐户余额中扣除 $20 （ $100-$20 ）。<br>操作员 A 完成了修改工作，提交更新之前会先看数据库的版本和自己读取到的版本是否一致，一致的话，就会将数据版本号加1（ version=2 ），连同帐户扣除后余额（ balance=$50 ），提交至数据库更新，此时由于提交数据版本大于数据库记录当前版本，数据被更新，数据库记录 version 更新为 2 。<br>操作员 B 完成了操作，提交更新之前会先看数据库的版本和自己读取到的版本是否一致，但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 2 ，而自己读取到的版本号为1 ，不满足 “ 当前最后更新的version与操作员第一次读取的版本号相等 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。<br>这样，就避免了操作员 B 用基于 version=1 的旧数据修改的结果覆盖操作员A 的操作结果的可能。</p><ol start="2"><li><h4 id="CAS算法"><a href="#CAS算法" class="headerlink" title="CAS算法"></a>CAS算法</h4><p>即compare and swap（比较与交换），是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。CAS算法涉及到三个操作数</p></li></ol><p>需要读写的内存值 V<br>进行比较的值 A<br>拟写入的新值 B<br>当且仅当 V 的值等于 A时，CAS通过原子方式用新值B来更新V的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个自旋操作，即不断的重试。</p><h3 id="乐观锁的缺点"><a href="#乐观锁的缺点" class="headerlink" title="乐观锁的缺点"></a>乐观锁的缺点</h3><p>ABA 问题是乐观锁一个常见的问题</p><h4 id="1-ABA-问题"><a href="#1-ABA-问题" class="headerlink" title="1 ABA 问题"></a>1 ABA 问题</h4><p>如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然是A值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回A，那CAS操作就会误认为它从来没有被修改过。这个问题被称为CAS操作的 “ABA”问题。</p><p>JDK 1.5 以后的 AtomicStampedReference 类就提供了此种能力，其中的 compareAndSet 方法就是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p><h4 id="2-循环时间长开销大"><a href="#2-循环时间长开销大" class="headerlink" title="2 循环时间长开销大"></a>2 循环时间长开销大</h4><p>自旋CAS（也就是不成功就一直循环执行直到成功）如果长时间不成功，会给CPU带来非常大的执行开销。 如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。</p><h4 id="3-只能保证一个共享变量的原子操作"><a href="#3-只能保证一个共享变量的原子操作" class="headerlink" title="3 只能保证一个共享变量的原子操作"></a>3 只能保证一个共享变量的原子操作</h4><p>CAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效。但是从 JDK 1.5开始，提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用AtomicReference类把多个共享变量合并成一个共享变量来操作。</p><h3 id="CAS与synchronized的使用情景"><a href="#CAS与synchronized的使用情景" class="headerlink" title="CAS与synchronized的使用情景"></a>CAS与synchronized的使用情景</h3><p>简单的来说CAS适用于写比较少的情况下（多读场景，冲突一般较少），synchronized适用于写比较多的情况下（多写场景，冲突一般较多）</p><p>对于资源竞争较少（线程冲突较轻）的情况，使用synchronized同步锁进行线程阻塞和唤醒切换以及用户态内核态间的切换操作额外浪费消耗cpu资源；而CAS基于硬件实现，不需要进入内核，不需要切换线程，操作自旋几率较少，因此可以获得更高的性能。<br>对于资源竞争严重（线程冲突严重）的情况，CAS自旋的概率会比较大，从而浪费更多的CPU资源，效率低于synchronized。<br>补充： Java并发编程这个领域中synchronized关键字一直都是元老级的角色，很久之前很多人都会称它为 “重量级锁” 。但是，在JavaSE 1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的 偏向锁 和 轻量级锁 以及其它各种优化之后变得在某些情况下并不是那么重了。synchronized的底层实现主要依靠 Lock-Free 的队列，基本思路是 自旋后阻塞，竞争切换后继续竞争锁，稍微牺牲了公平性，但获得了高吞吐量。在线程冲突较少的情况下，可以获得和CAS类似的性能；而线程冲突严重的情况下，性能远高于CAS。</p><h2 id="各种垃圾回收算法和回收器，说出自己的理解。"><a href="#各种垃圾回收算法和回收器，说出自己的理解。" class="headerlink" title="各种垃圾回收算法和回收器，说出自己的理解。"></a><strong>各种垃圾回收算法和回收器，说出自己的理解。</strong></h2><blockquote><p><strong>垃圾回收算法</strong>：标记-清除，标记-整理，复制，分代收集。</p><p><strong>垃圾回收器</strong>：新生代垃圾收集器：Serial，ParNew，Parallel Scanvenge。</p><p>老年代垃圾收集器：CMS，Serial Old，Parallel Old。</p><p>整堆收集器：G1；</p><p>除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。</p></blockquote><blockquote><p><strong>Serial</strong>：新生代，复制算法，单线程收集，必须暂停所有工作线程，直到完成。</p><p><strong>ParNew</strong>： ParNew垃圾收集器是Serial收集器的多线程版本。</p><p><strong>Parallel Scavenge</strong>：高吞吐量为目标，即减少垃圾收集时间，让用户代码获得更长的运行时间。</p><p><strong>Serial Old</strong>：Serial收集器的老年代版本，采用”标记-整理”算法。</p><p><strong>Parallel Old</strong>：Parallel Old垃圾收集器是Parallel Scavenge收集器的老年代版本。采用”标记-整理”算法。</p><p><strong>CMS</strong>：CMS 收集器是一种 <strong>“标记-清除”算法</strong>实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：</p><ol><li><strong>初始标记</strong>：仅标记一下GC Roots能直接关联到的对象；2. <strong>并发标记</strong>：进行 GC Roots Tracing 的过程，也就是从GC Roots开始找到它能引用的所有其它对象。3. <strong>重新标记</strong>：修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录。4. <strong>并发清除</strong>：回收所有的垃圾对象， 开启用户线程， GC 线程开始对<strong>未标记</strong>的区域做清扫。</li></ol><ul><li>并发阶段占用cpu资源，拖慢用户程序，降低吞吐量，CMS默认启用（CPU + 3)/4个线程执行。</li><li>无法处理浮动垃圾，并发清理阶段用户程序产生的垃圾，成为浮动垃圾，无法被当次处理。</li><li>基于标记-清除算法的CMS，会使老年代产生很多空间碎片，不利于大对象的使用</li></ul><p><strong>G1</strong>：G1 可以直接对新生代和老年代一起回收。G1 把堆划分成多个大小相等的独立区域，维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 区域。</p><ol><li>初始标记。2. 并发标记。3. 最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录。4. 筛选回收：首先对各个区域中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。</li></ol></blockquote><blockquote><p>G1收集器的设计目标是取代CMS收集器，它同CMS相比，在以下方面表现的更出色：</p><ul><li>G1是一个有<strong>整理内存</strong>过程的垃圾收集器，<strong>不会产生很多内存碎片</strong>。</li><li>CMS采用的是标记清除垃圾回收算法，可能会产生不少的内存碎片。</li><li>G1的Stop The World(STW)更可控，G1在停顿时间上添加了<strong>预测机制</strong>，用户可以<strong>指定期望停顿时间</strong>。</li></ul></blockquote><p>​    </p><h2 id="分布式基础概念"><a href="#分布式基础概念" class="headerlink" title="分布式基础概念"></a>分布式基础概念</h2><h3 id="1-微服务"><a href="#1-微服务" class="headerlink" title="1.微服务"></a>1.微服务</h3><p>简而言之：拒绝大型单体应用， 基于业务边界进行服务微化拆分， 各个服务独立部署运行。</p><h3 id="2-集群-amp-分布式-amp-节点"><a href="#2-集群-amp-分布式-amp-节点" class="headerlink" title="2.集群&amp;分布式&amp;节点"></a>2.集群&amp;分布式&amp;节点</h3><p>分布式的每一个节点， 都可以做集群（相当于多台机器跑一个服务）， 但集群并不一定都是分布式的。</p><h3 id="3-远程调用"><a href="#3-远程调用" class="headerlink" title="3.远程调用"></a>3.远程调用</h3><p>springcloud中使用HTTP+JSON的方式完成远程调用。</p><h3 id="4-负载均衡"><a href="#4-负载均衡" class="headerlink" title="4.负载均衡"></a>4.负载均衡</h3><p>轮询、最小连接、散列…</p><h3 id="5-服务注册-发现-amp-注册中心"><a href="#5-服务注册-发现-amp-注册中心" class="headerlink" title="5.服务注册/发现&amp;注册中心"></a>5.服务注册/发现&amp;注册中心</h3><p>服务注册到注册中心， 其他服务调用的话， 去注册中心拿（发现）。</p><h3 id="6-配置中心"><a href="#6-配置中心" class="headerlink" title="6.配置中心"></a>6.配置中心</h3><p>配置中心用来集中管理微服务的配置信息。服务从配置中心获取自己的配置。</p><h3 id="7-服务熔断-amp-服务降级"><a href="#7-服务熔断-amp-服务降级" class="headerlink" title="7.服务熔断&amp;服务降级"></a>7.服务熔断&amp;服务降级</h3><p>rpc远程调用情景：</p><p>订单服务 –&gt; 商品服务 –&gt; 库存服务</p><ol><li><p>服务熔断：某一服务调用经常失败， 为了防止雪崩效应的发生， 不再调用这个服务， 可以采用备选方案。</p></li><li><p>服务降级：运维期间， 系统处于高峰期， 系统资源紧张、压力大， 这个时候可以让一些非核心业务进行降级运行。降级：不处理， 或者简单处理。</p></li></ol><h3 id="8-API网关"><a href="#8-API网关" class="headerlink" title="8.API网关"></a>8.API网关</h3><p>请求都先到达网关，网关对请求进行统一认证（合法非法）和处理等操作。</p><p>在微服务架构中，API gateway作为整体架构的重要组件，它抽象了微服务中都需要的公共功能，同时提供了客户端<strong>负载均衡，服务自动熔断，灰度发布，统一认证，限流流控，日志统计</strong>等丰富的功能，帮助我们解决很多API管理难题。</p><p><img src="/2021/04/03/ms/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="谷粒商城-微服务架构图"></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="2021/04/01/docker-chang-yong-ming-ling/"/>
      <url>2021/04/01/docker-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>进入容器</p><p>docker exec -it mysql bin/bash</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue练习</title>
      <link href="2021/04/01/vue-lian-xi/"/>
      <url>2021/04/01/vue-lian-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Nginx 部署前后端分离项目，解决跨域问题</title>
      <link href="2021/03/28/shi-yong-nginx-bu-shu-qian-hou-duan-fen-chi-xiang-mu-jie-jue-kua-yu-wen-ti/"/>
      <url>2021/03/28/shi-yong-nginx-bu-shu-qian-hou-duan-fen-chi-xiang-mu-jie-jue-kua-yu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Nginx-部署前后端分离项目，解决跨域问题"><a href="#使用-Nginx-部署前后端分离项目，解决跨域问题" class="headerlink" title="使用 Nginx 部署前后端分离项目，解决跨域问题"></a>使用 Nginx 部署前后端分离项目，解决跨域问题</h1><h3 id="1-不得不说的跨域"><a href="#1-不得不说的跨域" class="headerlink" title="1 不得不说的跨域"></a>1 不得不说的跨域</h3><p>很多人对前后端分离部署感到困惑，其实主要是困惑跨域问题怎么解决。因为前后端分离项目在开发的时候，前端通过 nodejs 来运行，需要一个单独的端口，后端通过 Tomcat 或者 Jetty 来运行，也需要端口，两个不同的端口，就造成了跨域。</p><p>但是松哥之前多次和大家聊过这个问题，这种跨域并不是我们传统开发中真正的跨域，这个所谓的跨域只在开发环境中存在，生产环境下就不存在这个跨域问题了。所以我们不能按照以往的通过 JSONP 或者 CORS 之类的手段来解决这个跨域问题。</p><p>前后端分离开发中，前端为了能够模拟出测试数据，并且模拟出请求，一般需要借助于 nodejs 来运行，这是开发时候的状态，开发时候的配置大家可以参考这篇文章：</p><ul><li><a href="https://mp.weixin.qq.com/s/szgfT3tnYMCHSeiE3_QnpA">前后端分离历险记</a></li></ul><p>等开发完成后，我们会对前端项目编译打包，编译打包完成之后，就只剩下一堆 js、css 以及 html 文件了，我们把这些编译打包后的文件拷贝到后端项目中，这样再去运行就不存在跨域问题了（例如将编译打包后的静态文件拷贝到 Spring Boot 项目的 <code>src/main/resources/static</code> 目录下）。这种方式我就不再多说了，相信大家都会，今天咱们主要来看看如何结合 Nginx 来部署。</p><h3 id="2-Nginx-大杀器"><a href="#2-Nginx-大杀器" class="headerlink" title="2 Nginx 大杀器"></a>2 Nginx 大杀器</h3><p>结合 Nginx 来部署前后端分离项目算是目前的主流方案。一来部署方便，二来通过动静分离也可以有效提高项目的运行效率。</p><p>大家知道我们项目中的资源包含动态资源和静态资源两种，其中：</p><ul><li>动态资源就是那些需要经过容器处理的资源，例如 jsp、freemarker、各种接口等。</li><li>静态资源则是那些不需要经过容器处理，收到客户端请求就可以直接返回的资源，像 js、css、html 以及各种格式的图片，都属于静态资源。</li></ul><p>将动静资源分开部署，可以有效提高静态资源的加载速度以及整个系统的运行效率。</p><p>在前后端分离项目部署中，我们用 Nginx 来做一个反向代理服务器，它既可以代理动态请求，也可以直接提供静态资源访问。我们来一起看下。建议大家先阅读松哥以前关于 Nginx 的一篇旧文，可以有效帮助大家理解后面的配置：</p><ul><li><a href="https://mp.weixin.qq.com/s/ZN07_3ImmyRU0NQaqzcazQ">Nginx 极简入门教程！</a></li></ul><h4 id="2-1-后端部署"><a href="#2-1-后端部署" class="headerlink" title="2.1 后端部署"></a>2.1 后端部署</h4><p>后端接口的部署，主要看项目的形式，如果就是普通的 SSM 项目，那就提前准备好 Tomcat ，在 Tomcat 中部署项目，如果是 Spring Boot 项目，可以通过命令直接启动 jar，如果是微服务项目，存在多个 jar 的话，可以结合 Docker 来部署（参考<a href="https://mp.weixin.qq.com/s/vSCQLvQBYMYoPhdlO2v3XA">一键部署 Spring Boot 到远程 Docker 容器</a>），无论是那种形式，对于我们 Java 工程师来说，这都不是问题，我相信这一步大家都能搞定。</p><p>后端项目可以在一个非 80 端口上部署，部署成功之后，因为这个后端项目只是提供接口，所以我们并不会直接去访问他。而是通过 Nginx 请求转发来访问这个后端接口。</p><p>松哥这里以我去年为一个律所的小程序为例，后端是一个 Spring Boot 工程，那么我可以通过 Docker 部署，也可以直接通过命令来启动，这里简单点，直接通过命令来启动 jar ，如下：</p><pre><code class="line-numbers language-shell">nohup java -jar jinlu.jar &gt; vhr.log &amp;</code></pre><p>后端启动成功之后，我并不急着直接去访问后端，而是安装并且去配置一个 Nginx，通过 Nginx 来转发请求，Nginx 的基本介绍与安装，大家可以参考（<a href="https://mp.weixin.qq.com/s/ZN07_3ImmyRU0NQaqzcazQ">Nginx 极简入门教程！</a>），我这里就直接来说相关的配置了。</p><p>这里我们在 nginx.conf 中做出如下配置：</p><p>首先配置上游服务器：</p><pre><code class="line-numbers language-shell">upstream zqq.com&#123;  server 127.0.0.1:9999 weight=2;&#125;</code></pre><p>在这里主要是配置服务端的地址，如果服务端是集群化部署，那么这里就会有多个服务端地址，然后可以通过权重或者 ip hash 等方式进行请求分发。</p><p>然后我们在 server 中配置转发规则：</p><pre><code class="line-numbers language-shell">location /jinlu/ &#123;  proxy_pass http://zqq.com;  tcp_nodelay     on;  proxy_set_header Host            $host;  proxy_set_header X-Real-IP       $remote_addr;  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#125;</code></pre><p>这样配置完成后，假设我目前的域名是 javaboy.org，那么用户通过 <code>http://www.javaboy.org/jinlu/**</code> 格式的地址就可以访问到我服务端的接口。</p><h4 id="2-2-前端部署"><a href="#2-2-前端部署" class="headerlink" title="2.2 前端部署"></a>2.2 前端部署</h4><p>以 Vue 为例，如果是 SPA 应用，项目打包之后，就是一个 index.html 还有几个 js、css、images 以及 fonts ，这些都是静态文件，我们将静态文件首先上传到服务器，然后在 nginx.conf 中配置静态资源访问，具体配置如下：</p><pre><code class="line-numbers language-shell">location ~ .*\.(js|css|ico|png|jpg|eot|svg|ttf|woff|html|txt|pdf|) &#123;   root /usr/local/nginx/html/;#所有静态文件直接读取硬盘   expires 30d; #缓存30天&#125; </code></pre><p>当然我这里是按照资源类型来拦截的，即后缀为 js、css、ico 等的文件，统统都不进行请求分发，直接从本地的 /usr/local/nginx/html/ 目录下读取并返回到前端（我们需要将静态资源文件上传到 <code>/usr/local/nginx/html/</code> 目录下）。</p><p>如果我们的服务器上部署了多个项目，这种写法就不太合适，因为多个项目的前端静态文件肯定要分门别类，各自放好的，这个时候我们一样可以通过路径来拦截，配置如下：</p><pre><code class="line-numbers language-shell">location /jinlu-admin/ &#123;   root /usr/local/nginx/html/jinlu-admin/;#所有静态文件直接读取硬盘   expires 30d; #缓存30天&#125; </code></pre><p>这样，请求路径是 /jinlu-admin/ 格式的请求，则不会进行请求分发，而是直接从本机的 <code>/usr/local/nginx/html/jinlu-admin/</code> 目录下返回相关资源。采用这方方式配置静态资源，我们就可以部署多个项目了，多个项目的部署方式和上面的一样。</p><p>这样部署完成之后，假设我的域名是 javaboy.org ，那么用户通过 <code>http://www.javaboy.org/jinlu-admin/**</code> 格式的请求就可以访问到前端资源了。</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vhr-微人事</title>
      <link href="2021/03/27/vhr-wei-ren-shi/"/>
      <url>2021/03/27/vhr-wei-ren-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h2><p>项目地址+部署教程：<a href="https://github.com/lenve/vhr">https://github.com/lenve/vhr</a></p><h3 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h3><ol><li><p>进入命令行模式</p><pre><code class="line-numbers language-cmd">cmd G:\Environment\redis6</code></pre></li><li><p>启动Redis</p><pre><code class="line-numbers language-cmd">redis-server.exe redis.conf</code></pre></li></ol><h3 id="启动RabbitMQ"><a href="#启动RabbitMQ" class="headerlink" title="启动RabbitMQ"></a>启动RabbitMQ</h3><ol><li><p>查看运行状态</p><pre><code class="line-numbers language-cmd">rabbitmqctl status</code></pre></li><li><p>运行</p><pre><code class="line-numbers language-cmd">rabbitmq-server.bat</code></pre></li><li><p>启动成功访问地址<a href="http://localhost:15672/">http://localhost:15672</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Vue </tag>
            
            <tag> Redis </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC执行流程</title>
      <link href="2021/03/19/springmvc-zhi-xing-liu-cheng/"/>
      <url>2021/03/19/springmvc-zhi-xing-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p>1.客户端（浏览器）输入url,直接发送请求到DispatcherServlet；</p><p>2.DispatcherServlet根据请求调用HandlerMapping，请求解析到对应的Handler；</p><p>3.解析到对应的Handler后， 由HandlerAdapter适配器处理；</p><p>4.HandlerAdapter会根据Handler（也就是平常说的Controller控制器）调用真正的处理器处理请求，并处理相应的业务逻辑；</p><p>5.处理完业务逻辑后，会返回一个ModelAndView对象， Model返回的是数据对象， View返回的是逻辑上的View；</p><p>6.ViewResolver会根据逻辑View查找实际的View；</p><p>7.DispatcherServlet把返回的Model传给View进行视图渲染；</p><p>8.最后把View返回给请求者（浏览器）。</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基本指令练习</title>
      <link href="2021/03/17/shu-ju-ku-ji-ben-zhi-ling-lian-xi/"/>
      <url>2021/03/17/shu-ju-ku-ji-ben-zhi-ling-lian-xi/</url>
      
        <content type="html"><![CDATA[<p>收集整理来自<a href="https://www.w3schools.com/sql/exercise.asp">https://www.w3schools.com/sql/exercise.asp</a></p><h2 id="SQL-Select"><a href="#SQL-Select" class="headerlink" title="SQL Select"></a>SQL Select</h2><h3 id="1-Insert-the-missing-statement-to-get-all-the-columns-from-the-Customers-table"><a href="#1-Insert-the-missing-statement-to-get-all-the-columns-from-the-Customers-table" class="headerlink" title="1.Insert the missing statement to get all the columns from the Customers table."></a>1.Insert the missing statement to get all the columns from the <code>Customers</code> table.</h3><pre><code class="line-numbers language-sql"> SELECT * FROM Customers;</code></pre><h3 id="2-Write-a-statement-that-will-select-the-City-column-from-the-Customers-table"><a href="#2-Write-a-statement-that-will-select-the-City-column-from-the-Customers-table" class="headerlink" title="2.Write a statement that will select the City column from the Customers table."></a>2.Write a statement that will select the <code>City</code> column from the <code>Customers</code> table.</h3><pre><code class="line-numbers language-sql">SELECT City FROM Customers;</code></pre><h3 id="3-Select-all-the-different-values-from-the-Country-column-in-the-Customers-table"><a href="#3-Select-all-the-different-values-from-the-Country-column-in-the-Customers-table" class="headerlink" title="3.Select all the different values from the Country column in the Customers table."></a>3.Select all the <em>different</em> values from the <code>Country</code> column in the <code>Customers</code> table.</h3><pre><code class="line-numbers language-sql">SELECT DISTINCT Country FROM Customers;</code></pre><h2 id="SQL-Where"><a href="#SQL-Where" class="headerlink" title="SQL Where"></a>SQL Where</h2><h3 id="1-Select-all-records-where-the-City-column-has-the-value-“Berlin”"><a href="#1-Select-all-records-where-the-City-column-has-the-value-“Berlin”" class="headerlink" title="1.Select all records where the City column has the value “Berlin”."></a>1.Select all records where the <code>City</code> column has the value “Berlin”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City = &#39;Berlin&#39;;</code></pre><h3 id="2-Use-the-NOT-keyword-to-select-all-records-where-City-is-NOT-“Berlin”"><a href="#2-Use-the-NOT-keyword-to-select-all-records-where-City-is-NOT-“Berlin”" class="headerlink" title="2.Use the NOT keyword to select all records where City is NOT “Berlin”."></a>2.Use the <code>NOT</code> keyword to select all records where <code>City</code> is NOT “Berlin”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE NOT City = &#39;Berlin&#39;;</code></pre><h3 id="3-Select-all-records-where-the-CustomerID-column-has-the-value-32"><a href="#3-Select-all-records-where-the-CustomerID-column-has-the-value-32" class="headerlink" title="3.Select all records where the CustomerID column has the value 32."></a>3.Select all records where the <code>CustomerID</code> column has the value 32.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE CustomerID =32;</code></pre><h3 id="4-Select-all-records-where-the-City-column-has-the-value-‘Berlin’-and-the-PostalCode-column-has-the-value-12209"><a href="#4-Select-all-records-where-the-City-column-has-the-value-‘Berlin’-and-the-PostalCode-column-has-the-value-12209" class="headerlink" title="4.Select all records where the City column has the value ‘Berlin’ and the PostalCode column has the value 12209."></a>4.Select all records where the <code>City</code> column has the value ‘Berlin’ <em>and</em> the <code>PostalCode</code> column has the value 12209.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City = &#39;Berlin&#39;AND PostalCode = 12209;</code></pre><h3 id="5-Select-all-records-where-the-City-column-has-the-value-‘Berlin’-or-‘London’"><a href="#5-Select-all-records-where-the-City-column-has-the-value-‘Berlin’-or-‘London’" class="headerlink" title="5.Select all records where the City column has the value ‘Berlin’ or ‘London’."></a>5.Select all records where the <code>City</code> column has the value ‘Berlin’ or ‘London’.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City = &#39;Berlin&#39;OR City  = &#39;London&#39;;</code></pre><h2 id="SQL-Order-by"><a href="#SQL-Order-by" class="headerlink" title="SQL Order by"></a>SQL Order by</h2><h3 id="1-Select-all-records-from-the-Customers-table-sort-the-result-alphabetically-by-the-column-City"><a href="#1-Select-all-records-from-the-Customers-table-sort-the-result-alphabetically-by-the-column-City" class="headerlink" title="1.Select all records from the Customers table, sort the result alphabetically by the column City."></a>1.Select all records from the <code>Customers</code> table, sort the result alphabetically by the column <code>City</code>.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersORDER BY City;</code></pre><h3 id="2-Select-all-records-from-the-Customers-table-sort-the-result-reversed-alphabetically-by-the-column-City"><a href="#2-Select-all-records-from-the-Customers-table-sort-the-result-reversed-alphabetically-by-the-column-City" class="headerlink" title="2.Select all records from the Customers table, sort the result reversed alphabetically by the column City."></a>2.Select all records from the <code>Customers</code> table, sort the result <em>reversed</em> alphabetically by the column <code>City</code>.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersORDER BY City = DESC;</code></pre><h3 id="3-Select-all-records-from-the-Customers-table-sort-the-result-alphabetically-first-by-the-column-Country-then-by-the-column-City"><a href="#3-Select-all-records-from-the-Customers-table-sort-the-result-alphabetically-first-by-the-column-Country-then-by-the-column-City" class="headerlink" title="3.Select all records from the Customers table, sort the result alphabetically, first by the column Country, then, by the column City."></a>3.Select all records from the <code>Customers</code> table, sort the result alphabetically, first by the column <code>Country</code>, then, by the column <code>City</code>.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersORDER BY Country, City;</code></pre><h2 id="SQL-Insert"><a href="#SQL-Insert" class="headerlink" title="SQL Insert"></a>SQL Insert</h2><p>Insert a new record in the <code>Customers</code> table.</p><pre><code class="line-numbers language-sql">INSERT INTO Customers (CustomerName, Address, City, PostalCode,Country)VALUES(&#39;Hekkan Burger&#39;,&#39;Gateveien 15&#39;,&#39;Sandnes&#39;,&#39;4306&#39;,&#39;Norway&#39;);</code></pre><h2 id="SQL-Null"><a href="#SQL-Null" class="headerlink" title="SQL Null"></a>SQL Null</h2><h3 id="1-Select-all-records-from-the-Customers-where-the-PostalCode-column-is-empty"><a href="#1-Select-all-records-from-the-Customers-where-the-PostalCode-column-is-empty" class="headerlink" title="1.Select all records from the Customers where the PostalCode column is empty."></a>1.Select all records from the <code>Customers</code> where the <code>PostalCode</code> column is empty.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE PostalCode IS NULL;</code></pre><h3 id="2-Select-all-records-from-the-Customers-where-the-PostalCode-column-is-NOT-empty"><a href="#2-Select-all-records-from-the-Customers-where-the-PostalCode-column-is-NOT-empty" class="headerlink" title="2.Select all records from the Customers where the PostalCode column is NOT empty."></a>2.Select all records from the <code>Customers</code> where the <code>PostalCode</code> column is NOT empty.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE PostalCode IS NOT NULL;</code></pre><h2 id="SQL-Update"><a href="#SQL-Update" class="headerlink" title="SQL Update"></a>SQL Update</h2><h3 id="1-Update-the-City-column-of-all-records-in-the-Customers-table"><a href="#1-Update-the-City-column-of-all-records-in-the-Customers-table" class="headerlink" title="1.Update the City column of all records in the Customers table."></a>1.Update the <code>City</code> column of all records in the <code>Customers</code> table.</h3><pre><code class="line-numbers language-sql">UPDATE CustomersSET City = &#39;Oslo&#39;;</code></pre><h3 id="2-Set-the-value-of-the-City-columns-to-‘Oslo’-but-only-the-ones-where-the-Country-column-has-the-value-“Norway”"><a href="#2-Set-the-value-of-the-City-columns-to-‘Oslo’-but-only-the-ones-where-the-Country-column-has-the-value-“Norway”" class="headerlink" title="2.Set the value of the City columns to ‘Oslo’, but only the ones where the Country column has the value “Norway”."></a>2.Set the value of the <code>City</code> columns to ‘Oslo’, but only the ones where the <code>Country</code> column has the value “Norway”.</h3><pre><code class="line-numbers language-sql">UPDATE CustomersSET City = &#39;Oslo&#39;WHERE Country = &#39;Norway&#39;;</code></pre><h3 id="3-Update-the-City-value-and-the-Country-value"><a href="#3-Update-the-City-value-and-the-Country-value" class="headerlink" title="3.Update the City value and the Country value."></a>3.Update the <code>City</code> value <em>and</em> the <code>Country</code> value.</h3><pre><code class="line-numbers language-sql">UPDATE CustomersSET City = &#39;Oslo&#39;Country = &#39;Norway&#39;WHERE CustomerID = 32;</code></pre><h2 id="SQL-Delete"><a href="#SQL-Delete" class="headerlink" title="SQL  Delete"></a>SQL  Delete</h2><h3 id="1-Delete-all-the-records-from-the-Customers-table-where-the-Country-value-is-‘Norway’"><a href="#1-Delete-all-the-records-from-the-Customers-table-where-the-Country-value-is-‘Norway’" class="headerlink" title="1.Delete all the records from the Customers table where the Country value is ‘Norway’."></a>1.Delete all the records from the <code>Customers</code> table where the <code>Country</code> value is ‘Norway’.</h3><pre><code class="line-numbers language-sql">DELETE FROM CustomersWHERE Country = &#39;Norway&#39;;</code></pre><h3 id="2-Delete-all-the-records-from-the-Customers-table"><a href="#2-Delete-all-the-records-from-the-Customers-table" class="headerlink" title="2.Delete all the records from the Customers table."></a>2.Delete all the records from the <code>Customers</code> table.</h3><pre><code class="line-numbers language-sql">DELETE FROM Customers;</code></pre><h2 id="SQL-Functions"><a href="#SQL-Functions" class="headerlink" title="SQL Functions"></a>SQL Functions</h2><h3 id="1-Use-the-MIN-function-to-select-the-record-with-the-smallest-value-of-the-Price-column"><a href="#1-Use-the-MIN-function-to-select-the-record-with-the-smallest-value-of-the-Price-column" class="headerlink" title="1.Use the MIN function to select the record with the smallest value of the Price column."></a>1.Use the <code>MIN</code> function to select the record with the smallest value of the <code>Price</code> column.</h3><pre><code class="line-numbers language-sql">SELECT MIN(Price)FROM Products;</code></pre><h3 id="2-Use-an-SQL-function-to-select-the-record-with-the-highest-value-of-the-Price-column"><a href="#2-Use-an-SQL-function-to-select-the-record-with-the-highest-value-of-the-Price-column" class="headerlink" title="2.Use an SQL function to select the record with the highest value of the Price column."></a>2.Use an SQL function to select the record with the highest value of the <code>Price</code> column.</h3><pre><code class="line-numbers language-sql">SELECT MAX(Price)FROM Products;</code></pre><h3 id="3-Use-the-correct-function-to-return-the-number-of-records-that-have-the-Price-value-set-to-18"><a href="#3-Use-the-correct-function-to-return-the-number-of-records-that-have-the-Price-value-set-to-18" class="headerlink" title="3.Use the correct function to return the number of records that have the Price value set to 18."></a>3.Use the correct function to return the number of records that have the <code>Price</code> value set to <code>18</code>.</h3><pre><code class="line-numbers language-sql">SELECT COUNT(*)FROM ProductsWHERE Price = 18;</code></pre><h3 id="4-Use-an-SQL-function-to-calculate-the-average-price-of-all-products"><a href="#4-Use-an-SQL-function-to-calculate-the-average-price-of-all-products" class="headerlink" title="4.Use an SQL function to calculate the average price of all products."></a>4.Use an SQL function to calculate the average price of all products.</h3><pre><code class="line-numbers language-sql">SELECT AVG(Price)FROM Products;</code></pre><h3 id="5-Use-an-SQL-function-to-calculate-the-sum-of-all-the-Price-column-values-in-the-Products-table"><a href="#5-Use-an-SQL-function-to-calculate-the-sum-of-all-the-Price-column-values-in-the-Products-table" class="headerlink" title="5.Use an SQL function to calculate the sum of all the Price column values in the Products table."></a>5.Use an SQL function to calculate the sum of all the <code>Price</code> column values in the <code>Products</code> table.</h3><pre><code class="line-numbers language-sql">SELECT SUM(Price)FROM Products;</code></pre><h2 id="SQL-Like"><a href="#SQL-Like" class="headerlink" title="SQL Like"></a>SQL Like</h2><h3 id="1-Select-all-records-where-the-value-of-the-City-column-starts-with-the-letter-“a”"><a href="#1-Select-all-records-where-the-value-of-the-City-column-starts-with-the-letter-“a”" class="headerlink" title="1.Select all records where the value of the City column starts with the letter “a”."></a>1.Select all records where the value of the <code>City</code> column starts with the letter “a”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;a%&#39;;</code></pre><h3 id="2-Select-all-records-where-the-value-of-the-City-column-ends-with-the-letter-“a”"><a href="#2-Select-all-records-where-the-value-of-the-City-column-ends-with-the-letter-“a”" class="headerlink" title="2.Select all records where the value of the City column ends with the letter “a”."></a>2.Select all records where the value of the <code>City</code> column <em>ends</em> with the letter “a”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;%a&#39;;</code></pre><h3 id="3-Select-all-records-where-the-value-of-the-City-column-contains-the-letter-“a”"><a href="#3-Select-all-records-where-the-value-of-the-City-column-contains-the-letter-“a”" class="headerlink" title="3.Select all records where the value of the City column contains the letter “a”."></a>3.Select all records where the value of the <code>City</code> column contains the letter “a”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;%a%&#39;;</code></pre><h3 id="4-Select-all-records-where-the-value-of-the-City-column-starts-with-letter-“a”-and-ends-with-the-letter-“b”"><a href="#4-Select-all-records-where-the-value-of-the-City-column-starts-with-letter-“a”-and-ends-with-the-letter-“b”" class="headerlink" title="4.Select all records where the value of the City column starts with letter “a” and ends with the letter “b”."></a>4.Select all records where the value of the <code>City</code> column starts with letter “a” and ends with the letter “b”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;a%b&#39;;</code></pre><h3 id="5-Select-all-records-where-the-value-of-the-City-column-does-NOT-start-with-the-letter-“a”"><a href="#5-Select-all-records-where-the-value-of-the-City-column-does-NOT-start-with-the-letter-“a”" class="headerlink" title="5.Select all records where the value of the City column does NOT start with the letter “a”."></a>5.Select all records where the value of the <code>City</code> column does NOT start with the letter “a”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City NOT LIKE &#39;a%&#39;;</code></pre><h2 id="SQL-Wildcards"><a href="#SQL-Wildcards" class="headerlink" title="SQL Wildcards"></a>SQL Wildcards</h2><h3 id="1-Select-all-records-where-the-second-letter-of-the-City-is-an-“a”"><a href="#1-Select-all-records-where-the-second-letter-of-the-City-is-an-“a”" class="headerlink" title="1.Select all records where the second letter of the City is an “a”."></a>1.Select all records where the <em>second</em> letter of the <code>City</code> is an “a”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;_a%&#39;;</code></pre><h3 id="2-Select-all-records-where-the-first-letter-of-the-City-is-an-“a”-or-a-“c”-or-an-“s”"><a href="#2-Select-all-records-where-the-first-letter-of-the-City-is-an-“a”-or-a-“c”-or-an-“s”" class="headerlink" title="2.Select all records where the first letter of the City is an “a” or a “c” or an “s”."></a>2.Select all records where the first letter of the <code>City</code> is an “a” or a “c” or an “s”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;[acs]%&#39;;</code></pre><h3 id="3-Select-all-records-where-the-first-letter-of-the-City-starts-with-anything-from-an-“a”-to-an-“f”"><a href="#3-Select-all-records-where-the-first-letter-of-the-City-starts-with-anything-from-an-“a”-to-an-“f”" class="headerlink" title="3.Select all records where the first letter of the City starts with anything from an “a” to an “f”."></a>3.Select all records where the first letter of the <code>City</code> starts with anything from an “a” to an “f”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;[a-f]%&#39;;</code></pre><h3 id="4-Select-all-records-where-the-first-letter-of-the-City-is-NOT-an-“a”-or-a-“c”-or-an-“f”"><a href="#4-Select-all-records-where-the-first-letter-of-the-City-is-NOT-an-“a”-or-a-“c”-or-an-“f”" class="headerlink" title="4.Select all records where the first letter of the City is NOT an “a” or a “c” or an “f”."></a>4.Select all records where the first letter of the <code>City</code> is NOT an “a” or a “c” or an “f”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE City LIKE &#39;[!acf]%&#39;;</code></pre><h2 id="SQL-In"><a href="#SQL-In" class="headerlink" title="SQL In"></a>SQL In</h2><h3 id="1-Use-the-IN-operator-to-select-all-the-records-where-Country-is-either-“Norway”-or-“France”"><a href="#1-Use-the-IN-operator-to-select-all-the-records-where-Country-is-either-“Norway”-or-“France”" class="headerlink" title="1.Use the IN operator to select all the records where Country is either “Norway” or “France”."></a>1.Use the <code>IN</code> operator to select all the records where <code>Country</code> is either “Norway” or “France”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE Country IN (&#39;Norway&#39;, &#39;France&#39;);</code></pre><h3 id="2-Use-the-IN-operator-to-select-all-the-records-where-Country-is-NOT-“Norway”-and-NOT-“France”"><a href="#2-Use-the-IN-operator-to-select-all-the-records-where-Country-is-NOT-“Norway”-and-NOT-“France”" class="headerlink" title="2.Use the IN operator to select all the records where Country is NOT “Norway” and NOT “France”."></a>2.Use the <code>IN</code> operator to select all the records where <code>Country</code> is NOT “Norway” and NOT “France”.</h3><pre><code class="line-numbers language-sql">SELECT * FROM CustomersWHERE Country NOT IN (&#39;Norway&#39;, &#39;France&#39;);</code></pre><h2 id="SQL-Between"><a href="#SQL-Between" class="headerlink" title="SQL Between"></a>SQL Between</h2><h3 id="1-Use-the-BETWEEN-operator-to-select-all-the-records-where-the-value-of-the-Price-column-is-between-10-and-20"><a href="#1-Use-the-BETWEEN-operator-to-select-all-the-records-where-the-value-of-the-Price-column-is-between-10-and-20" class="headerlink" title="1.Use the BETWEEN operator to select all the records where the value of the Price column is between 10 and 20."></a>1.Use the <code>BETWEEN</code> operator to select all the records where the value of the <code>Price</code> column is between 10 and 20.</h3><pre><code class="line-numbers language-sql">SELECT * FROM ProductsWHERE Price BETWEEN 10 AND 20;</code></pre><h3 id="2-Use-the-BETWEEN-operator-to-select-all-the-records-where-the-value-of-the-Price-column-is-NOT-between-10-and-20"><a href="#2-Use-the-BETWEEN-operator-to-select-all-the-records-where-the-value-of-the-Price-column-is-NOT-between-10-and-20" class="headerlink" title="2.Use the BETWEEN operator to select all the records where the value of the Price column is NOT between 10 and 20."></a>2.Use the <code>BETWEEN</code> operator to select all the records where the value of the <code>Price</code> column is NOT between 10 and 20.</h3><pre><code class="line-numbers language-sql">SELECT * FROM ProductsWHERE Price NOT BETWEEN 10 AND 20;</code></pre><h3 id="3-Use-the-BETWEEN-operator-to-select-all-the-records-where-the-value-of-the-ProductName-column-is-alphabetically-between-‘Geitost’-and-‘Pavlova’"><a href="#3-Use-the-BETWEEN-operator-to-select-all-the-records-where-the-value-of-the-ProductName-column-is-alphabetically-between-‘Geitost’-and-‘Pavlova’" class="headerlink" title="3.Use the BETWEEN operator to select all the records where the value of the ProductName column is alphabetically between ‘Geitost’ and ‘Pavlova’."></a>3.Use the <code>BETWEEN</code> operator to select all the records where the value of the <code>ProductName</code> column is alphabetically between ‘Geitost’ and ‘Pavlova’.</h3><pre><code class="line-numbers language-sql">SELECT * FROM ProductsWHERE ProductName BETWEEN &#39;Geitost&#39; AND &#39;Pavlova&#39;;</code></pre><h2 id="SQL-Alias"><a href="#SQL-Alias" class="headerlink" title="SQL Alias"></a>SQL Alias</h2><h3 id="1-When-displaying-the-Customers-table-make-an-ALIAS-of-the-PostalCode-column-the-column-should-be-called-Pno-instead"><a href="#1-When-displaying-the-Customers-table-make-an-ALIAS-of-the-PostalCode-column-the-column-should-be-called-Pno-instead" class="headerlink" title="1.When displaying the Customers table, make an ALIAS of the PostalCode column, the column should be called Pno instead."></a>1.When displaying the <code>Customers</code> table, make an ALIAS of the <code>PostalCode</code> column, the column should be called <code>Pno</code> instead.</h3><pre><code class="line-numbers language-sql">SELECT CustomerName,Address,PostalCode AS PnoFROM Customers;</code></pre><h3 id="2-When-displaying-the-Customers-table-refer-to-the-table-as-Consumers-instead-of-Customers"><a href="#2-When-displaying-the-Customers-table-refer-to-the-table-as-Consumers-instead-of-Customers" class="headerlink" title="2.When displaying the Customers table, refer to the table as Consumers instead of Customers."></a>2.When displaying the <code>Customers</code> table, refer to the table as <code>Consumers</code> instead of <code>Customers</code>.</h3><pre><code class="line-numbers language-sql">SELECT *FROM Customers AS Consumers;</code></pre><h2 id="SQL-Join"><a href="#SQL-Join" class="headerlink" title="SQL Join"></a>SQL Join</h2><h3 id="1-Insert-the-missing-parts-in-the-JOIN-clause-to-join-the-two-tables-Orders-and-Customers-using-the-CustomerID-field-in-both-tables-as-the-relationship-between-the-two-tables"><a href="#1-Insert-the-missing-parts-in-the-JOIN-clause-to-join-the-two-tables-Orders-and-Customers-using-the-CustomerID-field-in-both-tables-as-the-relationship-between-the-two-tables" class="headerlink" title="1.Insert the missing parts in the JOIN clause to join the two tables Orders and Customers, using the CustomerID field in both tables as the relationship between the two tables."></a>1.Insert the missing parts in the <code>JOIN</code> clause to join the two tables <code>Orders</code> and <code>Customers</code>, using the <code>CustomerID</code> field in both tables as the relationship between the two tables.</h3><pre><code class="line-numbers language-sql">SELECT *FROM OrdersLEFT JOIN CustomersON Orders.CustomerID = Customers.CustomerID;</code></pre><h3 id="2-Choose-the-correct-JOIN-clause-to-select-all-records-from-the-two-tables-where-there-is-a-match-in-both-tables"><a href="#2-Choose-the-correct-JOIN-clause-to-select-all-records-from-the-two-tables-where-there-is-a-match-in-both-tables" class="headerlink" title="2.Choose the correct JOIN clause to select all records from the two tables where there is a match in both tables."></a>2.Choose the correct <code>JOIN</code> clause to select all records from the two tables where there is a match in both tables.</h3><pre><code class="line-numbers language-sql">SELECT *FROM OrdersINNER JOIN CustomersON Orders.CustomerID=Customers.CustomerID;</code></pre><h3 id="3-Choose-the-correct-JOIN-clause-to-select-all-the-records-from-the-Customers-table-plus-all-the-matches-in-the-Orders-table"><a href="#3-Choose-the-correct-JOIN-clause-to-select-all-the-records-from-the-Customers-table-plus-all-the-matches-in-the-Orders-table" class="headerlink" title="3.Choose the correct JOIN clause to select all the records from the Customers table plus all the matches in the Orders table."></a>3.Choose the correct <code>JOIN</code> clause to select all the records from the <code>Customers</code> table plus all the matches in the <code>Orders</code> table.</h3><pre><code class="line-numbers language-sql">SELECT *FROM OrdersRIGHT JOIN CustomersON Orders.CustomerID=Customers.CustomerID;</code></pre><h2 id="SQL-Group-By"><a href="#SQL-Group-By" class="headerlink" title="SQL Group By"></a>SQL Group By</h2><h3 id="1-List-the-number-of-customers-in-each-country"><a href="#1-List-the-number-of-customers-in-each-country" class="headerlink" title="1.List the number of customers in each country."></a>1.List the number of customers in each country.</h3><pre><code class="line-numbers language-sql">SELECT COUNT(CustomerID),CountryFROM CustomersGROUP BY Country;</code></pre><h3 id="2-List-the-number-of-customers-in-each-country-ordered-by-the-country-with-the-most-customers-first"><a href="#2-List-the-number-of-customers-in-each-country-ordered-by-the-country-with-the-most-customers-first" class="headerlink" title="2.List the number of customers in each country, ordered by the country with the most customers first."></a>2.List the number of customers in each country, ordered by the country with the most customers first.</h3><pre><code class="line-numbers language-sql">SELECT COUNT(CustomerID),CountryFROM CustomersGROUP BY CountryORDER BY COUNT(CustomerID) DESC;</code></pre><h2 id="SQL-Database"><a href="#SQL-Database" class="headerlink" title="SQL Database"></a>SQL Database</h2><h3 id="1-Write-the-correct-SQL-statement-to-create-a-new-database-called-testDB"><a href="#1-Write-the-correct-SQL-statement-to-create-a-new-database-called-testDB" class="headerlink" title="1.Write the correct SQL statement to create a new database called testDB."></a>1.Write the correct SQL statement to create a new database called <code>testDB</code>.</h3><pre><code class="line-numbers language-sql">CREATE DATABASE testDB;</code></pre><h3 id="2-Write-the-correct-SQL-statement-to-delete-a-database-named-testDB"><a href="#2-Write-the-correct-SQL-statement-to-delete-a-database-named-testDB" class="headerlink" title="2.Write the correct SQL statement to delete a database named testDB."></a>2.Write the correct SQL statement to delete a database named <code>testDB</code>.</h3><pre><code class="line-numbers language-sql">DROP DATABASE testDB;</code></pre><h3 id="3-Write-the-correct-SQL-statement-to-create-a-new-table-called-Persons"><a href="#3-Write-the-correct-SQL-statement-to-create-a-new-table-called-Persons" class="headerlink" title="3.Write the correct SQL statement to create a new table called Persons."></a>3.Write the correct SQL statement to create a new table called <code>Persons</code>.</h3><pre><code class="line-numbers language-sql">CREATE TABLE Persons (  PersonID int,  LastName varchar(255),  FirstName varchar(255),  Address varchar(255),  City varchar(255) );</code></pre><h3 id="4-Write-the-correct-SQL-statement-to-delete-a-table-called-Persons"><a href="#4-Write-the-correct-SQL-statement-to-delete-a-table-called-Persons" class="headerlink" title="4.Write the correct SQL statement to delete a table called Persons."></a>4.Write the correct SQL statement to delete a table called <code>Persons</code>.</h3><pre><code class="line-numbers language-sql">DROP TABLE Persons;</code></pre><h3 id="5-Use-the-TRUNCATE-statement-to-delete-all-data-inside-a-table"><a href="#5-Use-the-TRUNCATE-statement-to-delete-all-data-inside-a-table" class="headerlink" title="5.Use the TRUNCATE statement to delete all data inside a table."></a>5.Use the <code>TRUNCATE</code> statement to delete all data inside a table.</h3><pre><code class="line-numbers language-sql">TRUNCATE TABLE Persons;</code></pre><h3 id="6-Add-a-column-of-type-DATE-called-Birthday"><a href="#6-Add-a-column-of-type-DATE-called-Birthday" class="headerlink" title="6.Add a column of type DATE called Birthday."></a>6.Add a column of type <code>DATE</code> called <code>Birthday</code>.</h3><pre><code class="line-numbers language-sql">ALTER TABLE PersonsADD Birthday DATE;</code></pre><h3 id="7-Delete-the-column-Birthday-from-the-Persons-table"><a href="#7-Delete-the-column-Birthday-from-the-Persons-table" class="headerlink" title="7.Delete the column Birthday from the Persons table."></a>7.Delete the column <code>Birthday</code> from the <code>Persons</code> table.</h3><pre><code class="line-numbers language-sql">ALTER TABLE PersonsDROP COLUMN Birthday;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>91. 解码方法-中等</title>
      <link href="2021/03/17/91-jie-ma-fang-fa-zhong-deng/"/>
      <url>2021/03/17/91-jie-ma-fang-fa-zhong-deng/</url>
      
        <content type="html"><![CDATA[<h2 id="91-解码方法"><a href="#91-解码方法" class="headerlink" title="91. 解码方法"></a><a href="https://leetcode-cn.com/problems/decode-ways/">91. 解码方法</a></h2><p>引用题解：<a href="https://github.com/changgyhub/leetcode_101">https://github.com/changgyhub/leetcode_101</a></p><p>加入了自己的理解</p><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>一共会有四种情况发生</p><ol><li><p><code>00 || [30, 40, 50, ...]</code>新来了0和前面那个一起构不成解码</p><p>合并解码和分开解码都不可</p><p>并且这两种情况都导致会出现以 0 开头的数字(00直接出现， [30, 40, 50, …]下一个来时出现)，由于没有字符映射到以 0 开头的数字，不合题意</p><p>则return 0;</p></li><li><p><code>[11, 19] || [21, 26]</code>新来了非0和前面那个一起构成解码</p><p>这两个数字有两种解码方式，即合并解码和分开解码，以11为例，可以解码为”K”或者”AA”</p><p>以22611为例</p><p>“K”可以和dp[i-2] 构成一次新的解码，即”(BZ， VF， BBF)K” =&gt;[(2 26) , (22 6), (2 2 6)]   11</p><p>“AA”可以使”A”和dp[i-1]构成一次解码，即”(BZA， VFA， BBFA)A” =&gt;[(2 26 1) , (22 6 1), (2 2 6 1)]   1</p><p>则求和：dp[i] = dp[i-2] + dp[i-1];</p></li><li><p><code>10 || 20</code> 新来了0和前面那个一起构成解码</p><p>这两个数字有一种解码方式，即合并解码，以10为例，可以解码为”J”</p><p>以22610为例</p><p>“J”可以和dp[i-2] 构成一次新的解码，即”(BZ， VF， BBF)J” =&gt;[(2 26) , (22 6), (2 2 6)]   10</p><p>则：dp[i] = dp[i-2];</p></li><li><p><code>[27, 99] </code>新来了非0和前面那个一起构不成解码</p><p>这两个数字有一种解码方式，即分开解码，以27为例，可以解码为”BG”</p><p>以22627为例</p><p>“BG”可以和dp[i-2] 构成一次新的解码，即”(BZ， VF， BBF)BG” =&gt;[(2 26) , (22 6), (2 2 6)]   27</p><p>则：dp[i] = dp[i-1];</p></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="line-numbers language-c++">class Solution &#123;public:    int numDecodings(string s) &#123;        int n = s.length();        if (n == 0) return 0;        int prev = s[0] - &#39;0&#39;;        if (!prev) return 0;        if (n == 1) return 1;        vector&lt;int&gt; dp(n + 1, 1);        for (int i = 2; i &lt;= n; ++i) &#123;            int cur = s[i-1] - &#39;0&#39;;            //00 || [30, 40, 50, ...]新来了0和前面那个一起构不成解码            //这都导致会出现以 0 开头的数字(00直接出现， [30, 40, 50, ...]下一个来时出现)，不合题意，return 0.            if ((prev == 0 || prev &gt; 2) &amp;&amp; cur == 0) &#123;                return 0;            &#125;            //[10, 99]            if ((prev == 1) || prev == 2 &amp;&amp; cur &lt; 7) &#123;                //[11, 19] || [21, 26]新来了非0和前面那个一起构成解码                if (cur) &#123;                    dp[i] = dp[i-2] + dp[i-1];                &#125; else &#123;//10 || 20 新来了0和前面那个一起构成解码                    dp[i] = dp[i-2];                &#125;            &#125; else &#123;    //[27, 99] 新来了非0和前面那个一起构不成解码                       dp[i] = dp[i-1];            &#125;            prev = cur;        &#125;        return dp[n];    &#125;&#125;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>413. 等差数列划分-中等</title>
      <link href="2021/03/16/413-deng-chai-shu-lie-hua-fen-zhong-deng/"/>
      <url>2021/03/16/413-deng-chai-shu-lie-hua-fen-zhong-deng/</url>
      
        <content type="html"><![CDATA[<h2 id="413-等差数列划分"><a href="#413-等差数列划分" class="headerlink" title="413. 等差数列划分"></a><a href="https://leetcode-cn.com/problems/arithmetic-slices/">413. 等差数列划分</a></h2><p>引用题解：<a href="https://github.com/changgyhub/leetcode_101">https://github.com/changgyhub/leetcode_101</a></p><pre><code class="line-numbers language-c++">动态规划过程：1234：123 234  1   2            1 + 2 = 312345：123 234 345   1   2   3     1 + 2 + 3 = 6    最后为什么要对 dp 数组求和？=&gt;return accumulate(dp.begin(), dp.end(), 0);    简单分析：        123有一个 123        234有两个 234， 1234        345有三个 345， 2345， 12345    所以要求和！</code></pre><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个数组，求这个数组中连续且等差的子数组一共有多少个。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p>输入是一个一维数组，输出是满足等差条件的连续字数组个数。</p><pre><code class="line-numbers language-c++">Input: nums = [1,2,3,4]Output: 3</code></pre><p>在这个样例中，等差数列有 [1,2,3]、[2,3,4] 和 [1,2,3,4]。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这道题略微特殊，因为要求是等差数列，可以很自然的想到子数组必定满足 num[i] - num[i-1] = num[i-1] - num[i-2]。然而由于我们对于 dp 数组的定义通常为以 i 结尾的，满足某些条件的子数组数量，而等差子数组可以在任意一个位置终结，因此此题在最后需要对 dp 数组求和。</p><pre><code class="line-numbers language-c++">class Solution &#123;public:    int numberOfArithmeticSlices(vector&lt;int&gt;&amp; nums) &#123;        int n = nums.size();        if (n &lt; 3) return 0;        vector&lt;int&gt; dp(n, 0);        for (int i = 2; i &lt; n; ++i) &#123;            if (nums[i] - nums[i-1] == nums[i-1] - nums[i-2]) &#123;                dp[i] = dp[i-1] + 1;            &#125;        &#125;        return accumulate(dp.begin(), dp.end(), 0);    &#125;&#125;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>198.打家劫舍-中等</title>
      <link href="2021/03/16/198-da-jia-jie-she-zhong-deng/"/>
      <url>2021/03/16/198-da-jia-jie-she-zhong-deng/</url>
      
        <content type="html"><![CDATA[<h2 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode-cn.com/problems/house-robber/">198. 打家劫舍</a></h2><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>动态规划 <code>dp[i] = max(dp[i-1], nums[i-1] + dp[i-2])。</code></p><pre><code class="line-numbers language-c++">class Solution &#123;public:    int rob(vector&lt;int&gt;&amp; nums) &#123;        //  dp ---0, 1, 2, 3, 4, 5 ... ---        //nums ---   0, 1, 2, 3, 4 ... ---        if (nums.empty()) return 0;        int n = nums.size();        vector&lt;int&gt; dp(n + 1, 0);        dp[1] = nums[0];        for (int i = 2; i &lt;= n; ++i) &#123;            dp[i] = max(dp[i-1], nums[i-1] + dp[i-2]);        &#125;        return dp[n];    &#125;&#125;;</code></pre></li><li><p>进行空间压缩</p><pre><code class="line-numbers language-c++">class Solution &#123;public:    int rob(vector&lt;int&gt;&amp; nums) &#123;        // cur ---0, 1, 2, 3, 4, 5 ... ---        //nums ---   0, 1, 2, 3, 4 ... ---        if (nums.empty()) return 0;        int n = nums.size();        int pre1 = 0, pre2 = nums[0], cur;        for (int i = 1; i &lt; n; ++i) &#123;            cur = max(pre2, pre1 + nums[i]);            pre1 = pre2;            pre2 = cur;        &#125;        return cur;    &#125;&#125;;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>70.爬楼梯-简单</title>
      <link href="2021/03/16/70-pa-lou-ti-jian-dan/"/>
      <url>2021/03/16/70-pa-lou-ti-jian-dan/</url>
      
        <content type="html"><![CDATA[<h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯</a></h2><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><h4 id="斐波那契数列百度百科："><a href="#斐波那契数列百度百科：" class="headerlink" title="斐波那契数列百度百科："></a>斐波那契数列百度百科：</h4><p>斐波那契数列（Fibonacci sequence），又称黄金分割数列，因数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：<code>0、1、1、2、3、5、8、13、21、34、……</code>在数学上，斐波那契数列以如下被以递推的方法定义：<code>F(0)=0，F(1)=1, F(n)=F(n - 1)+F(n - 2)（n ≥ 2，n ∈ N*）</code>在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，为此，美国数学会从 1963 年起出版了以《斐波纳契数列季刊》为名的一份数学杂志，用于专门刊载这方面的研究成果。</p><h4 id="典型的斐波那契数列，采用动态规划"><a href="#典型的斐波那契数列，采用动态规划" class="headerlink" title="典型的斐波那契数列，采用动态规划"></a>典型的斐波那契数列，采用动态规划</h4><ol><li><p>数组，空间复杂度为 O(n）</p><pre><code class="line-numbers language-c++">class Solution &#123;public:    int climbStairs(int n) &#123;        //从F(0)=1，F(1)=1，开始        // n---0、1、2、3、4、5、 6、 7、 8---        //dp---1、1、2、3、5、8、13、21、34---        if (n &lt;= 2) return n;        vector&lt;int&gt; dp(n+1, 1);        for (int i = 2; i &lt;= n; ++i) &#123;            dp[i] = dp[i-1] + dp[i-2];        &#125;        return dp[n];    &#125;&#125;;</code></pre></li><li><p>空间压缩，空间复杂度优化为 O(1) </p><pre><code class="line-numbers language-c++">class Solution &#123;public:    int climbStairs(int n) &#123;        //典型的斐波那契数列        //  n---0、1、2、3、4、5、 6、 7、 8---        //cur---1、1、2、3、5、8、13、21、34---        if (n &lt;= 2) return n;        int pre2 = 1, pre1 = 1, cur;        for (int i = 2; i &lt;= n; ++i) &#123;            cur = pre1 + pre2;            pre1 = pre2;            pre2 = cur;         &#125;        return cur;    &#125;&#125;;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="2021/03/16/linux-chang-yong-ming-ling/"/>
      <url>2021/03/16/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="防火墙命令"><a href="#防火墙命令" class="headerlink" title="防火墙命令"></a>防火墙命令</h2><pre><code class="line-numbers language-shell"># 查看firewall服务状态systemctl status firewalld# 开启、重启、关闭、firewalld.service服务# 开启service firewalld start# 重启service firewalld restart# 关闭service firewalld stop# 查看防火墙规则firewall-cmd --list-all # 查看全部信息firewall-cmd --list-ports # 只看端口信息# 开启端口开端口命令：firewall-cmd --zone=public --add-port=8080/tcp --permanent重启防火墙：systemctl restart firewalld.service命令含义：--zone #作用域--add-port=80/tcp #添加端口，格式为：端口/通讯协议--permanent #永久生效，没有此参数重启后失效</code></pre><h2 id="系统目录结构"><a href="#系统目录结构" class="headerlink" title="系统目录结构"></a>系统目录结构</h2><blockquote><ul><li><p>/etc： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p>/home：用户的主目录，在Linux中，每个用户都有一个自己的目录一般该目录名是以用户的账号命名的。</p></li><li><p>/opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p>/root：该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p>/tmp：这个目录是用来存放一些临时文件的。用完即丢的文件，可以放在这个目录下，安装包！</p></li><li><p>/usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</p></li><li><p>/var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li></ul></blockquote><h2 id="vim撤销和恢复撤销快捷键"><a href="#vim撤销和恢复撤销快捷键" class="headerlink" title="vim撤销和恢复撤销快捷键"></a>vim撤销和恢复撤销快捷键</h2><p>u是撤销你刚才做的动作</p><p>ctrl+r 是恢复你刚才撤销的动作</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker进阶</title>
      <link href="2021/03/15/docker-jin-jie/"/>
      <url>2021/03/15/docker-jin-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h2 id="1-概述（官方文档）"><a href="#1-概述（官方文档）" class="headerlink" title="1.概述（官方文档）"></a>1.概述（官方文档）</h2><blockquote><p><strong>Looking for Compose file reference?</strong> <a href="https://docs.docker.com/compose/compose-file/">Find the latest version here</a>.</p></blockquote><p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration. To learn more about all the features of Compose, see <a href="https://docs.docker.com/compose/#features">the list of features</a>.</p><p>Compose works in all environments: production, staging, development, testing, as well as CI workflows. You can learn more about each case in <a href="https://docs.docker.com/compose/#common-use-cases">Common Use Cases</a>.</p><p>Using Compose is basically a three-step process:</p><ol><li>Define your app’s environment with a <code>Dockerfile</code> so it can be reproduced anywhere.</li><li>Define the services that make up your app in <code>docker-compose.yml</code> so they can be run together in an isolated environment.</li><li>Run <code>docker compose up</code> and the <a href="https://docs.docker.com/compose/cli-command/">Docker compose command</a> starts and runs your entire app. You can alternatively run <code>docker-compose up</code> using the docker-compose binary.</li></ol><p>A <code>docker-compose.yml</code> looks like this:</p><pre><code class="line-numbers language-yml">version: &quot;3.9&quot;  # optional since v1.27.0services:  web:    build: .    ports:      - &quot;5000:5000&quot;    volumes:      - .:/code      - logvolume01:/var/log    links:      - redis  redis:    image: redisvolumes:  logvolume01: &#123;&#125;</code></pre><p>For more information about the Compose file, see the <a href="https://docs.docker.com/compose/compose-file/">Compose file reference</a>.</p><p>Compose has commands for managing the whole lifecycle of your application:</p><ul><li>Start, stop, and rebuild services</li><li>View the status of running services</li><li>Stream the log output of running services</li><li>Run a one-off command on a service</li></ul><p>关键词提取：</p><ul><li><p>multi-container Docker applications</p></li><li><p>use a YAML file to configure</p></li><li><p>with a single command</p></li></ul><p>概括：使用yml文件通过单个命令执行多个服务、容器、应用。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><ol><li><p>官网地址 </p><pre><code class="line-numbers language-shell">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.28.5/docker-        compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></pre></li><li><p>国内镜像</p><pre><code class="line-numbers language-shell">curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.0/docker-        compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</code></pre></li></ol><p><img src="/2021/03/15/docker-jin-jie/image-20210315185018091.png" alt="image-20210315185018091"></p><ol start="3"><li><p>授权</p><pre><code class="line-numbers language-shell">chmod +x /usr/local/bin/docker-compose</code></pre></li><li><p>查看版本</p><pre><code class="line-numbers language-shell">docker-compose --version</code></pre></li></ol><h2 id="3-Get-started-with-Docker-Compose"><a href="#3-Get-started-with-Docker-Compose" class="headerlink" title="3.Get started with Docker Compose"></a>3.Get started with Docker Compose</h2><p><strong>官网很详细，直接跟着官网走</strong></p><p><em>Estimated reading time: 11 minutes</em></p><p>On this page you build a simple Python web application running on Docker Compose. The application uses the Flask framework and maintains a hit counter in Redis. While the sample uses Python, the concepts demonstrated here should be understandable even if you’re not familiar with it.</p><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p>Make sure you have already installed both <a href="https://docs.docker.com/get-docker/">Docker Engine</a> and <a href="https://docs.docker.com/compose/install/">Docker Compose</a>. You don’t need to install Python or Redis, as both are provided by Docker images.</p><h4 id="Step-1-Setup"><a href="#Step-1-Setup" class="headerlink" title="Step 1: Setup"></a>Step 1: Setup</h4><p>Define the application dependencies.</p><ol><li><p>Create a directory for the project:</p><pre><code class="line-numbers language-shell">$ mkdir composetest$ cd composetest</code></pre></li><li><p>Create a file called <code>app.py</code> in your project directory and paste this in:</p><pre><code class="line-numbers language-shell">import timeimport redisfrom flask import Flaskapp = Flask(__name__)cache = redis.Redis(host=&#39;redis&#39;, port=6379)def get_hit_count():    retries = 5    while True:        try:            return cache.incr(&#39;hits&#39;)        except redis.exceptions.ConnectionError as exc:            if retries == 0:                raise exc            retries -= 1            time.sleep(0.5)@app.route(&#39;/&#39;)def hello():    count = get_hit_count()    return &#39;Hello World! I have been seen &#123;&#125; times.\n&#39;.format(count)</code></pre><p>In this example, <code>redis</code> is the hostname of the redis container on the application’s network. We use the default port for Redis, <code>6379</code>.</p><blockquote><p>Handling transient errors</p><p>Note the way the <code>get_hit_count</code> function is written. This basic retry loop lets us attempt our request multiple times if the redis service is not available. This is useful at startup while the application comes online, but also makes our application more resilient if the Redis service needs to be restarted anytime during the app’s lifetime. In a cluster, this also helps handling momentary connection drops between nodes.</p></blockquote></li><li><p>Create another file called <code>requirements.txt</code> in your project directory and paste this in:</p><pre><code class="line-numbers language-shell">flaskredis</code></pre></li></ol><h4 id="Step-2-Create-a-Dockerfile"><a href="#Step-2-Create-a-Dockerfile" class="headerlink" title="Step 2: Create a Dockerfile"></a>Step 2: Create a Dockerfile</h4><p>In this step, you write a Dockerfile that builds a Docker image. The image contains all the dependencies the Python application requires, including Python itself.</p><p>In your project directory, create a file named <code>Dockerfile</code> and paste the following:</p><pre><code class="line-numbers language-shell">FROM python:3.7-alpineWORKDIR /codeENV FLASK_APP=app.pyENV FLASK_RUN_HOST=0.0.0.0RUN apk add --no-cache gcc musl-dev linux-headersCOPY requirements.txt requirements.txtRUN pip install -r requirements.txtEXPOSE 5000COPY . .CMD [&quot;flask&quot;, &quot;run&quot;]</code></pre><p>This tells Docker to:</p><ul><li>Build an image starting with the Python 3.7 image.</li><li>Set the working directory to <code>/code</code>.</li><li>Set environment variables used by the <code>flask</code> command.</li><li>Install gcc and other dependencies</li><li>Copy <code>requirements.txt</code> and install the Python dependencies.</li><li>Add metadata to the image to describe that the container is listening on port 5000</li><li>Copy the current directory <code>.</code> in the project to the workdir <code>.</code> in the image.</li><li>Set the default command for the container to <code>flask run</code>.</li></ul><p>For more information on how to write Dockerfiles, see the <a href="https://docs.docker.com/develop/">Docker user guide</a> and the <a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference</a>.</p><h4 id="Step-3-Define-services-in-a-Compose-file"><a href="#Step-3-Define-services-in-a-Compose-file" class="headerlink" title="Step 3: Define services in a Compose file"></a>Step 3: Define services in a Compose file</h4><p>Create a file called <code>docker-compose.yml</code> in your project directory and paste the following:</p><pre><code class="line-numbers language-shell">version: &quot;3.3&quot; #官方写的3.9，但是会报错，改成3.3。services:  web:    build: .    ports:      - &quot;5000:5000&quot;  redis:    image: &quot;redis:alpine&quot;</code></pre><p>This Compose file defines two services: <code>web</code> and <code>redis</code>.</p><h4 id="Web-service"><a href="#Web-service" class="headerlink" title="Web service"></a>Web service</h4><p>The <code>web</code> service uses an image that’s built from the <code>Dockerfile</code> in the current directory. It then binds the container and the host machine to the exposed port, <code>5000</code>. This example service uses the default port for the Flask web server, <code>5000</code>.</p><h4 id="Redis-service"><a href="#Redis-service" class="headerlink" title="Redis service"></a>Redis service</h4><p>The <code>redis</code> service uses a public <a href="https://registry.hub.docker.com/_/redis/">Redis</a> image pulled from the Docker Hub registry.</p><h4 id="Step-4-Build-and-run-your-app-with-Compose"><a href="#Step-4-Build-and-run-your-app-with-Compose" class="headerlink" title="Step 4: Build and run your app with Compose"></a>Step 4: Build and run your app with Compose</h4><ol><li><p>From your project directory, start up your application by running <code>docker-compose up</code>.</p><pre><code class="line-numbers language-shell">$ docker-compose upCreating network &quot;composetest_default&quot; with the default driverCreating composetest_web_1 ...Creating composetest_redis_1 ...Creating composetest_web_1Creating composetest_redis_1 ... doneAttaching to composetest_web_1, composetest_redis_1web_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)redis_1  | 1:C 17 Aug 22:11:10.480 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Ooredis_1  | 1:C 17 Aug 22:11:10.480 # Redis version=4.0.1, bits=64, commit=00000000, modified=0, pid=1, just startedredis_1  | 1:C 17 Aug 22:11:10.480 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.confweb_1    |  * Restarting with statredis_1  | 1:M 17 Aug 22:11:10.483 * Running mode=standalone, port=6379.redis_1  | 1:M 17 Aug 22:11:10.483 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.web_1    |  * Debugger is active!redis_1  | 1:M 17 Aug 22:11:10.483 # Server initializedredis_1  | 1:M 17 Aug 22:11:10.483 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#39;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#39; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.web_1    |  * Debugger PIN: 330-787-903redis_1  | 1:M 17 Aug 22:11:10.483 * Ready to accept connections</code></pre><p>Compose pulls a Redis image, builds an image for your code, and starts the services you defined. In this case, the code is statically copied into the image at build time.</p><p><img src="/2021/03/15/docker-jin-jie/image-20210316001054382.png" alt="image-20210316001054382"></p></li><li><p>Enter <a href="http://localhost:5000/">http://localhost:5000/</a> in a browser to see the application running.</p><p>If you’re using Docker natively on Linux, Docker Desktop for Mac, or Docker Desktop for Windows, then the web app should now be listening on port 5000 on your Docker daemon host. Point your web browser to <a href="http://localhost:5000/">http://localhost:5000</a> to find the <code>Hello World</code> message. If this doesn’t resolve, you can also try <a href="http://127.0.0.1:5000/">http://127.0.0.1:5000</a>.</p><p>If you’re using Docker Machine on a Mac or Windows, use <code>docker-machine ip MACHINE_VM</code> to get the IP address of your Docker host. Then, open <code>http://MACHINE_VM_IP:5000</code> in a browser.</p><p>You should see a message in your browser saying:</p><pre><code class="line-numbers language-shell">Hello World! I have been seen 1 times.</code></pre><p><img src="/2021/03/15/docker-jin-jie/quick-hello-world-1.png" alt="hello world in browser"></p></li><li><p>Refresh the page.</p><p>The number should increment.</p><pre><code class="line-numbers language-shell">Hello World! I have been seen 2 times.</code></pre><p><img src="/2021/03/15/docker-jin-jie/quick-hello-world-2.png" alt="hello world in browser"></p><p><img src="/2021/03/15/docker-jin-jie/image-20210316001224217.png" alt="image-20210316001224217"></p></li><li><p>Switch to another terminal window, and type <code>docker image ls</code> to list local images.</p><p>Listing images at this point should return <code>redis</code> and <code>web</code>.</p><pre><code class="line-numbers language-shell">$ docker image lsREPOSITORY        TAG           IMAGE ID      CREATED        SIZEcomposetest_web   latest        e2c21aa48cc1  4 minutes ago  93.8MBpython            3.4-alpine    84e6077c7ab6  7 days ago     82.5MBredis             alpine        9d8fa9aa0e5b  3 weeks ago    27.5MB</code></pre><p>You can inspect images with <code>docker inspect &lt;tag or id&gt;</code>.</p></li><li><p>Stop the application, either by running <code>docker-compose down</code> from within your project directory in the second terminal, or by hitting CTRL+C in the original terminal where you started the app.</p></li></ol><h4 id="Step-5-Edit-the-Compose-file-to-add-a-bind-mount"><a href="#Step-5-Edit-the-Compose-file-to-add-a-bind-mount" class="headerlink" title="Step 5: Edit the Compose file to add a bind mount"></a>Step 5: Edit the Compose file to add a bind mount</h4><p>Edit <code>docker-compose.yml</code> in your project directory to add a <a href="https://docs.docker.com/storage/bind-mounts/">bind mount</a> for the <code>web</code> service:</p><pre><code class="line-numbers language-shell">version: &quot;3.9&quot;services:  web:    build: .    ports:      - &quot;5000:5000&quot;    volumes:      - .:/code    environment:      FLASK_ENV: development  redis:    image: &quot;redis:alpine&quot;</code></pre><p>The new <code>volumes</code> key mounts the project directory (current directory) on the host to <code>/code</code> inside the container, allowing you to modify the code on the fly, without having to rebuild the image. The <code>environment</code> key sets the <code>FLASK_ENV</code> environment variable, which tells <code>flask run</code> to run in development mode and reload the code on change. This mode should only be used in development.</p><h4 id="Step-6-Re-build-and-run-the-app-with-Compose"><a href="#Step-6-Re-build-and-run-the-app-with-Compose" class="headerlink" title="Step 6: Re-build and run the app with Compose"></a>Step 6: Re-build and run the app with Compose</h4><p>From your project directory, type <code>docker-compose up</code> to build the app with the updated Compose file, and run it.</p><pre><code class="line-numbers language-shell">$ docker-compose upCreating network &quot;composetest_default&quot; with the default driverCreating composetest_web_1 ...Creating composetest_redis_1 ...Creating composetest_web_1Creating composetest_redis_1 ... doneAttaching to composetest_web_1, composetest_redis_1web_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)...</code></pre><p>Check the <code>Hello World</code> message in a web browser again, and refresh to see the count increment.</p><blockquote><p>Shared folders, volumes, and bind mounts</p><ul><li>If your project is outside of the <code>Users</code> directory (<code>cd ~</code>), then you need to share the drive or location of the Dockerfile and volume you are using. If you get runtime errors indicating an application file is not found, a volume mount is denied, or a service cannot start, try enabling file or drive sharing. Volume mounting requires shared drives for projects that live outside of <code>C:\Users</code> (Windows) or <code>/Users</code> (Mac), and is required for <em>any</em> project on Docker Desktop for Windows that uses <a href="https://docs.docker.com/docker-for-windows/#switch-between-windows-and-linux-containers">Linux containers</a>. For more information, see <a href="https://docs.docker.com/docker-for-mac/#file-sharing">File sharing</a> on Docker for Mac, and the general examples on how to <a href="https://docs.docker.com/storage/volumes/">Manage data in containers</a>.</li><li>If you are using Oracle VirtualBox on an older Windows OS, you might encounter an issue with shared folders as described in this <a href="https://www.virtualbox.org/ticket/14920">VB trouble ticket</a>. Newer Windows systems meet the requirements for <a href="https://docs.docker.com/docker-for-windows/install/">Docker Desktop for Windows</a> and do not need VirtualBox.</li></ul></blockquote><h4 id="Step-7-Update-the-application"><a href="#Step-7-Update-the-application" class="headerlink" title="Step 7: Update the application"></a>Step 7: Update the application</h4><p>Because the application code is now mounted into the container using a volume, you can make changes to its code and see the changes instantly, without having to rebuild the image.</p><p>Change the greeting in <code>app.py</code> and save it. For example, change the <code>Hello World!</code> message to <code>Hello from Docker!</code>:</p><pre><code class="line-numbers language-shell">return &#39;Hello from Docker! I have been seen &#123;&#125; times.\n&#39;.format(count)</code></pre><p>Refresh the app in your browser. The greeting should be updated, and the counter should still be incrementing.</p><p><img src="/2021/03/15/docker-jin-jie/quick-hello-world-3.png" alt="hello world in browser"></p><h4 id="Step-8-Experiment-with-some-other-commands"><a href="#Step-8-Experiment-with-some-other-commands" class="headerlink" title="Step 8: Experiment with some other commands"></a>Step 8: Experiment with some other commands</h4><p>If you want to run your services in the background, you can pass the <code>-d</code> flag (for “detached” mode) to <code>docker-compose up</code> and use <code>docker-compose ps</code> to see what is currently running:</p><pre><code class="line-numbers language-shell">$ docker-compose up -dStarting composetest_redis_1...Starting composetest_web_1...$ docker-compose ps       Name                      Command               State           Ports         -------------------------------------------------------------------------------------composetest_redis_1   docker-entrypoint.sh redis ...   Up      6379/tcp              composetest_web_1     flask run                        Up      0.0.0.0:5000-&gt;5000/tcp</code></pre><p>The <code>docker-compose run</code> command allows you to run one-off commands for your services. For example, to see what environment variables are available to the <code>web</code> service:</p><pre><code class="line-numbers language-shell">$ docker-compose run web env</code></pre><p>See <code>docker-compose --help</code> to see other available commands. You can also install <a href="https://docs.docker.com/compose/completion/">command completion</a> for the bash and zsh shell, which also shows you available commands.</p><p>If you started Compose with <code>docker-compose up -d</code>, stop your services once you’ve finished with them:</p><pre><code class="line-numbers language-shell">$ docker-compose stop</code></pre><p>You can bring everything down, removing the containers entirely, with the <code>down</code> command. Pass <code>--volumes</code> to also remove the data volume used by the Redis container:</p><pre><code class="line-numbers language-shell">$ docker-compose down --volumes</code></pre><p>At this point, you have seen the basics of how Compose works.</p><h3 id="Where-to-go-next"><a href="#Where-to-go-next" class="headerlink" title="Where to go next"></a>Where to go next</h3><ul><li>Next, try the <a href="https://docs.docker.com/compose/samples-for-compose/">Sample apps with Compose</a></li><li><a href="https://docs.docker.com/compose/reference/">Explore the full list of Compose commands</a></li><li><a href="https://docs.docker.com/compose/compose-file/">Compose configuration file reference</a></li><li>To learn more about volumes and bind mounts, see <a href="https://docs.docker.com/storage/">Manage data in Docker</a></li></ul><p><a href="https://docs.docker.com/search/?q=documentation">documentation</a>, <a href="https://docs.docker.com/search/?q=docs">docs</a>, <a href="https://docs.docker.com/search/?q=docker">docker</a>, <a href="https://docs.docker.com/search/?q=compose">compose</a>, <a href="https://docs.docker.com/search/?q=orchestration">orchestration</a>, <a href="https://docs.docker.com/search/?q=containers">containers</a></p><h2 id="4-整个过程的理解："><a href="#4-整个过程的理解：" class="headerlink" title="4.整个过程的理解："></a>4.整个过程的理解：</h2><p>1、应用app.py<br>2、Dockerfile应用打包为镜像<br>3、Docker-compose yaml文件 (定义整个服务，需要的环境。web、redis)完整的上线服务!</p><p>4、启动compose 项目(docker-compose up)<br>流程:</p><p>1、创建网络<br>2、执行Docker-compose yaml</p><p>3、启动服务。<br>Docker-compose yaml<br>Creating composetest_web_1 … done    </p><p>Creating composetest_redis_1 … done</p><p>1、文件名composetest</p><p>2、服务</p><pre><code class="line-numbers language-shell">version: &quot;3.9&quot;services:  web:    build: .    ports:      - &quot;5000:5000&quot;  redis:    image: &quot;redis:alpine&quot;</code></pre><p> 自动的默认规则?</p><pre><code class="line-numbers language-shell">docker images</code></pre><p>帮我们自动下载了</p><p><img src="/2021/03/15/docker-jin-jie/image-20210316001522283.png" alt="image-20210316001522283"></p><p>默认的服务名    文件名_服务名__num</p><p>多个服务器。集群。A B _num    副本数量</p><p>服务redis服务=&gt;4个副本。<br>集群状态。服务都不可能只有一个运行实例。弹性、10 HA高并发。kubectl service负载均衡。</p><p>3、网络规则</p><p><img src="/2021/03/15/docker-jin-jie/image-20210316001653394.png" alt="image-20210316001653394"></p><p>10个服务=&gt;项目(项目中的内容都在同个网络下。域名访问)</p><p><img src="/2021/03/15/docker-jin-jie/image-20210316001908298.png" alt="image-20210316001908298"></p><p>如果在同一个网络下，我们可以直接通过域名访问。</p><p>HA!(高可用)</p><h2 id="5-yaml规则"><a href="#5-yaml规则" class="headerlink" title="5.yaml规则"></a>5.yaml规则</h2><h3 id="docker-compose-yaml-核心！"><a href="#docker-compose-yaml-核心！" class="headerlink" title="docker-compose.yaml 核心！"></a>docker-compose.yaml 核心！</h3><pre><code class="line-numbers language-yaml"># 3层！version: &#39;&#39; # 版本service: # 服务    服务1: web        # 服务配置        images        build        network        ...    服务2: redis        # 服务配置        images        build        network        ...    ...# 其他配置 卷、网络、全局规则volumes:networks:config:</code></pre><h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h3><p>一个容器可能会依赖另一个容器， 通过depends_on可以配置启动顺序</p><p><strong>即使设置了<code>depends_on</code>，那也只是控制容器开始启动的时间，不能控制容器启动完成的时间</strong></p><pre><code class="line-numbers language-yaml">version: &quot;3.9&quot;services:  web:    build: .    depends_on:      - db      - redis  redis:    image: redis  db:    image: postgres</code></pre><p>其他详情见官网：</p><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p><h2 id="6-DockerFile构建过程"><a href="#6-DockerFile构建过程" class="headerlink" title="6.DockerFile构建过程"></a>6.DockerFile构建过程</h2><p>基础知识：</p><p>1、每个保留关键字(指令）都是必须是大写字母</p><p>2、执行从上到下顺序</p><p>3、#表示注释</p><p>4、每一个指令都会创建提交一个新的镜像曾，并提交！</p><p><img src="/2021/03/15/docker-jin-jie/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjEzMTc1Njk5Ny5wbmc" alt="img"></p><p>Dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像逐渐成企业交付的标准，必须要掌握！</p><p>DockerFile：构建文件，定义了一切的步骤，源代码</p><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行产品。</p><h2 id="7-DockerFire的指令"><a href="#7-DockerFire的指令" class="headerlink" title="7.DockerFire的指令"></a>7.DockerFire的指令</h2><p><img src="/2021/03/15/docker-jin-jie/u=1722217816,1097532442&fm=11&gp=0.jpg" alt="img"></p><pre><code class="line-numbers language-dockerfile">FROM                # 基础镜像，一切从这里开始构建MAINTAINER            # 镜像是谁写的， 姓名+邮箱RUN                    # 镜像构建的时候需要运行的命令ADD                    # 步骤，例如tomcat镜像，这个tomcat压缩包！添加内容 添加同目录WORKDIR                # 镜像的工作目录VOLUME                # 挂载的目录EXPOSE                # 保留端口配置CMD                    # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。ENTRYPOINT            # 指定这个容器启动的时候要运行的命令，可以追加命令ONBUILD                # 当构建一个被继承 DockerFile 这个时候就会运行ONBUILD的指令，触发指令。COPY                # 类似ADD，将我们文件拷贝到镜像中ENV                    # 构建的时候设置环境变量！</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo代码高亮问题解决</title>
      <link href="2021/03/15/hexo-dai-ma-gao-liang-wen-ti-jie-jue/"/>
      <url>2021/03/15/hexo-dai-ma-gao-liang-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我的个人博客采用的是闪烁之狐大佬的主题<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a></p><p>最近发现我的文章代码无法高亮，寻找原因许久，终于解决！</p><p>闪烁之狐大佬采用的代码高亮插件是<a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a>，我按照教程一步步来，但无法高亮，网上很多解决方案也试了，都没有解决问题。</p><p>最后找到一篇博客<a href="https://www.jianshu.com/p/f395d92a1110">Hexo博客：六、prism代码高亮</a>，终于解决了我的问题。</p><p>本博客主题为<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>，上边解决问题的主题为next，不过问题不大，照葫芦画瓢，无非是文件位置和代码写法不一样。</p><p>开动！！！</p><h3 id="1-清除hexo-prism-plugin插件"><a href="#1-清除hexo-prism-plugin插件" class="headerlink" title="1. 清除hexo-prism-plugin插件"></a>1. 清除<a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a>插件</h3><ol><li><p>打开根目录下的<code>package.json</code>文件，删除</p><pre><code class="line-numbers language-shell">hexo-prism-plugin: &quot;^2.3.0&quot;,</code></pre></li><li><p>打开根目录下的<code>_config.yml</code>文件，删除</p><pre><code class="line-numbers language-shell">prism_plugin:  mode: &#39;preprocess&#39;    # realtime/preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:</code></pre></li><li><p>删除<code>node_modules</code>文件中的<code>hexo-prism-plugin</code>文件夹</p></li></ol><h3 id="2-禁用highlight"><a href="#2-禁用highlight" class="headerlink" title="2.  禁用highlight"></a>2.  禁用highlight</h3><p>打开根目录下的<code>_config.yml</code>文件，修改配置</p><pre><code class="line-numbers language-yml">highlight:  enable: false  line_number: false  auto_detect: false  tab_replace: &#39;&#39;  wrap: false  hljs: false</code></pre><h3 id="3-获取prism"><a href="#3-获取prism" class="headerlink" title="3.  获取prism"></a>3.  获取prism</h3><p>下载页面：<a href="https://links.jianshu.com/go?to=https://prismjs.com/download.html">https://prismjs.com/download.html</a>；选择 theme 主题、language 支持的语言（不要选太多，够用就好）、plugin 插件（我选的是Line Numbers、Highlight Keywords，其他的看自己需求）；然后点击下载按钮就行了；下载到本地。将他们移动到对应的的位置，它们的路径分别是：</p><pre><code class="line-numbers language-txt">项目根目录\themes\hexo-theme-matery\source\css\prism.css项目根目录\themes\hexo-theme-matery\source\js\prism.js</code></pre><h3 id="4-配置-prism"><a href="#4-配置-prism" class="headerlink" title="4.  配置 prism"></a>4.  配置 prism</h3><ol><li><p>修改<code>\themes\hexo-theme-matery\layout\_partial\footer.ejs</code>， 在尾部添加以下代码：</p><pre><code class="line-numbers language-ejs">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/prism.css&quot;&gt;</code></pre></li><li><p>修改 <code>\themes\hexo-theme-matery\layout\_partial\footer.ejs</code>，在尾部添加以下代码</p><pre><code class="line-numbers language-ejs">&lt;script src=&quot;/js/prism.js&quot; async&gt;&lt;/script&gt;    </code></pre></li></ol><h3 id="5-修改博客配置"><a href="#5-修改博客配置" class="headerlink" title="5. 修改博客配置"></a>5. 修改博客配置</h3><p>打开根目录下的<code>_config.yml</code>文件，添加下面代码</p><pre><code class="line-numbers language-yml">marked:  langPrefix: line-numbers language-</code></pre><h3 id="6-测试prism"><a href="#6-测试prism" class="headerlink" title="6.  测试prism"></a>6.  测试prism</h3><pre><code class="line-numbers language-git">hexo cleanhexo ghexo s</code></pre><p>大功告成！！！</p><p>这个问题解决了，烦心的事情又少了一件，终于可以快快乐乐的写博客了！</p>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>126.单词接龙 II-困难</title>
      <link href="2021/03/14/126-dan-ci-jie-long-ii-kun-nan/"/>
      <url>2021/03/14/126-dan-ci-jie-long-ii-kun-nan/</url>
      
        <content type="html"><![CDATA[<h3 id="126-单词接龙-II"><a href="#126-单词接龙-II" class="headerlink" title="126. 单词接龙 II"></a><a href="https://leetcode-cn.com/problems/word-ladder-ii/">126. 单词接龙 II</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个起始字符串和一个终止字符串，以及一个单词表，求是否可以将起始字符串每次改一个字符，直到改成终止字符串，且所有中间的修改过程表示的字符串都可以在单词表里找到。</p><p>若存在，输出需要修改次数最少的所有更改方式。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><p>输入是两个字符串，输出是一个二维字符串数组，表示每种字符串修改方式。</p><pre><code class="line-numbers language-C++">Input:beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;,wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]Output:[[&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],[&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]]</code></pre><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>我们可以把起始字符串、终止字符串、以及单词表里所有的字符串想象成节点。若两个字符串只有一个字符不同，那么它们相连。因为题目需要输出修改次数最少的所有修改方式，因此我们可以使用广度优先搜索，求得起始节点到终止节点的最短距离。</p><p>我们同时还使用了一个小技巧：我们并不是直接从起始节点进行广度优先搜索，直到找到终止节点为止；而是从起始节点和终止节点分别进行广度优先搜索，每次只延展当前层节点数最少的那一端，这样我们可以减少搜索的总结点数。举例来说，假设最短距离为 4，如果我们只从一端搜索 4 层，总遍历节点数最多是 1 + 2 + 4 + 8 + 16 = 31；而如果我们从两端各搜索两层，总遍历节点数最多只有 2 × (1 + 2 + 4) = 14。</p><p>在搜索结束后，我们还需要通过回溯法来重建所有可能的路径。</p><pre><code class="line-numbers language-C++">class Solution &#123;public:    vector&lt;vector&lt;string&gt;&gt; findLadders(string beginWord, string endWord, vector&lt;string&gt;&amp; wordList) &#123;        //ans用来存放最后的输出结果        vector&lt;vector&lt;string&gt;&gt; ans;        //dict用来以set的形式存放字典wordList        unordered_set&lt;string&gt; dict;        for (const auto&amp; w: wordList) &#123;            dict.insert(w);        &#125;        //如果字典里没有endList，直接返回结果        if (!dict.count(endWord)) &#123;            return ans;        &#125;        //删除字典里的beginWord和endWord        dict.erase(beginWord);        dict.erase(endWord);        unordered_set&lt;string&gt; q1&#123;beginWord&#125;, q2&#123;endWord&#125;;        unordered_map&lt;string, vector&lt;string&gt;&gt; next;        bool reversed = false, found = false;        while (!q1.empty()) &#123;                unordered_set &lt;string&gt; q;                for (const auto&amp; w: q1) &#123;                    string s = w;                    for (size_t i = 0; i &lt; s.size(); i++) &#123;                        char ch = s[i];                         for (int j = 0; j &lt; 26; j++) &#123;                            s[i] = j + &#39;a&#39;;                            if (q2.count(s)) &#123;                                reversed ? next[s].push_back(w) : next[w].push_back(s);                                 found = true;                            &#125;                            if (dict.count(s)) &#123;                                reversed ? next[s].push_back(w) : next[w].push_back(s);                                q.insert(s);                            &#125;                        &#125;                        s[i] = ch;                    &#125;                &#125;                if (found) &#123;                     break;                &#125;                for (const auto&amp; w: q) &#123;                    dict.erase(w);                &#125;                if (q.size() &lt;= q2.size()) &#123;                    q1 = q;                &#125; else &#123;                     reversed = !reversed;                    q1 = q2;                    q2 = q;                &#125;        &#125;        if (found) &#123;            vector&lt;string&gt; path = &#123;beginWord&#125;;            backtracking(beginWord, endWord, next, path, ans);        &#125;        return ans;    &#125;    void backtracking(const string&amp; src, const string&amp; dst, unordered_map&lt;string, vector&lt;string&gt;&gt;&amp; next, vector&lt;string&gt;&amp; path,vector&lt;vector&lt;string&gt;&gt;&amp; ans) &#123;        if (src == dst) &#123;            ans.push_back(path);            return;        &#125;        for (const auto&amp; s : next[src]) &#123;            path.push_back(s);            backtracking(s, dst, next, path, ans);            path.pop_back();        &#125;    &#125;&#125;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的学习使用记录</title>
      <link href="2021/03/14/docker-de-xue-xi-shi-yong-ji-lu/"/>
      <url>2021/03/14/docker-de-xue-xi-shi-yong-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="容器数据卷使用"><a href="#容器数据卷使用" class="headerlink" title="容器数据卷使用"></a>容器数据卷使用</h2><h3 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h3><p>将应用和环境打包成一个镜像！</p><p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！需求：数据可以持久化</p><p>MySQL，容器删除了，删库跑路！需求：MySQL数据可以存储在本地！</p><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地！</p><p>这就是卷技术！目录的挂载，将我们容器内的目录，挂载到Linux上面！</p><p><strong>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的！</strong></p><h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><pre><code class="line-numbers language-Shell">#1.启动容器mysqldocker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=密码 --name mysql mysql:8.0.23#命令-d 后台运行-p 端口映射-v 卷挂载-e 环境配置-- name 容器名字#2.查看容器的信息 docker inspect 容器id </code></pre><p><img src="/2021/03/14/docker-de-xue-xi-shi-yong-ji-lu/image-20210314200223048.png" alt="image-20210314200223048"></p><pre><code class="line-numbers language-shell">-v /home/mysql/conf:/etc/mysql/conf.d     #&#39;:&#39;前面是主机内地址， &#39;:&#39;后面是docker容器内地址</code></pre><h3 id="三种挂载方式"><a href="#三种挂载方式" class="headerlink" title="三种挂载方式"></a>三种挂载方式</h3><pre><code class="line-numbers language-shell"># 三种挂载： 匿名挂载、具名挂载、指定路径挂载-v 容器内路径            #匿名挂载-v 卷名：容器内路径          #具名挂载-v /宿主机路径：容器内路径 #指定路径挂载 docker volume ls 是查看不到的</code></pre><p>拓展</p><pre><code class="line-numbers language-shell"># 通过 -v 容器内路径： ro rw 改变读写权限ro #readonly 只读rw #readwrite 可读可写$ docker run -d -P --name nginx05 -v juming:/etc/nginx:ro nginx$ docker run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx# ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</code></pre><h2 id="docker启动关闭删除所有的容器命令"><a href="#docker启动关闭删除所有的容器命令" class="headerlink" title="docker启动关闭删除所有的容器命令"></a>docker启动关闭删除所有的容器命令</h2><p>1、启动所有容器</p><pre><code class="line-numbers language-shell">docker start $(docker ps -a | awk &#39;&#123; print $1&#125;&#39; | tail -n +2)</code></pre><p>2、关闭所有容器</p><pre><code class="line-numbers language-shell">docker stop $(docker ps -a | awk &#39;&#123; print $1&#125;&#39; | tail -n +2)</code></pre><p>3、删除所有容器</p><pre><code class="line-numbers language-shell">docker rm $(docker ps -a | awk &#39;&#123; print $1&#125;&#39; | tail -n +2)</code></pre><p>4、删除所有镜像（慎用）</p><pre><code class="line-numbers language-shell">docker rmi $(docker images | awk &#39;&#123;print $3&#125;&#39; |tail -n +2)</code></pre><h2 id="docker启动和关闭命令"><a href="#docker启动和关闭命令" class="headerlink" title="docker启动和关闭命令"></a>docker启动和关闭命令</h2><p>docker启动       </p><pre><code class="line-numbers language-shell">systemctl start docker重启docker服务systemctl restart  docker关闭docker    systemctl stop docker查看是否启动成功docker ps -a</code></pre><h2 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h2><p>进入tomcat bin目录后</p><p>直接启动<code>./startup.sh </code><br>作为服务启动<code>nohup ./startup.sh &amp;</code><br>控制台动态输出方式启动<code> ./catalina.sh run</code> 动态地显示tomcat后台的控制台输出信息,Ctrl+C后退出并关闭服务<br>通过方式一、方式三启动的tomcat有个弊端，当客户端连接断开的时候，tomcat服务也会立即停止，通过方式二可以作为，linux服务一直运行。<br>通过方式一、方式二方式启动的tomcat，其日志会写到相应的日志文件中，而不能动态地查看tomcat控制台的输出信息与错误情况，然后还需要<code>tail -f catalina.out</code> ;Ctrl+c 退出tail命令.<br>     然后就是检测tomcat是否启动成功： <code>ps -aux | grep tomcat </code>。输出org.apache.catalina.startup.Bootstrap start说明启动成功，<code>kill    -9 进程号</code>可以杀死进程。</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitalk 评论登录 403 问题解决</title>
      <link href="2021/02/19/gitalk-ping-lun-deng-lu-403-wen-ti-jie-jue/"/>
      <url>2021/02/19/gitalk-ping-lun-deng-lu-403-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cuiqingcai.com/30010.html">https://cuiqingcai.com/30010.html</a></p><p>博主解决问题的思路很清晰，值得学习!</p><p><a href="https://imgchr.com/i/yfzGSe"><img src="https://s3.ax1x.com/2021/02/19/yfzGSe.jpg" alt="yfzGSe.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牧羊少年的奇幻之旅</title>
      <link href="2021/02/18/mu-yang-shao-nian-qi-huan-zhi-lu/"/>
      <url>2021/02/18/mu-yang-shao-nian-qi-huan-zhi-lu/</url>
      
        <content type="html"><![CDATA[<p>高三读完这本书后写的， 现在在看又是不一样的感觉。</p><p><img src="/2021/02/18/mu-yang-shao-nian-qi-huan-zhi-lu/%E7%89%A7%E7%BE%8A%E5%B0%91%E5%B9%B4%E5%A5%87%E5%B9%BB%E4%B9%8B%E6%97%85%E5%B0%81%E7%9A%AE.jpg" alt="牧羊少年奇幻之旅封皮">    </p><p>​        我是一个牧羊人，重复做着同一个梦。梦里告诉我有宝藏。在撒冷之王的指引下，我踏上了寻宝之旅。</p><p>​        第一天，我的钱就全部被我信任的人骗去。我决定不再相信任何人，我疲惫至极，当我将要放弃的时候，撒冷之王的话语回荡在我的耳边：当你想要得到某种东西的时候，整个宇宙都会合力助你实现愿望。我已不再悲伤，我怀着一个念头沉重睡去——我是一个寻宝人，明天我将开始新的旅途。</p><p>​        我遇见了水晶店的主人，我助他的水晶店焕然一新，他付我报酬使我得以继续寻宝，“命中注定”，水晶店的主人送我离开时这样说。</p><p>​        我又遇见了一个英国人，我本不想与他打交道，“一切都有预兆”，他从口中吐出这几个字，我改变了想法，我决定和他一起开始这趟沙漠之旅，因为撒冷之王说过同样的话。这位英国人和我一样有使命，他一生的一半光阴都花在了炼金术上，他要去寻找一位炼金术士。</p><p>​        沙漠之旅并不容易，一路的艰苦跋涉终使我们到达了绿洲，我为绿洲带来了战争的预兆，他们将封我为顾问，我已厌倦了这趟旅途，至高的待遇诱使我留在这里。开玩笑般的我再次遇见了一个人，他使我明白，当我老之将至，站在梧桐树下回首自己度过的虚无的一生，遥想被深埋在地下的宝藏时已为时晚矣。</p><p>​        他正是炼金术士。</p><p>​        我再次开启这趟征途，种种经历让我开始尝试倾听内心的声音，我弄懂了心所耍的各种手段和花招。被逼无奈之下我开始领悟世界的语言，感悟到了爱的力量，觉悟到了这一切皆由我的双手写就。我抵达了金字塔，奋力挖掘，然而一无所获。</p><p>​        一个经过的难民在知道我挖掘的原因之后开始耻笑我说：“你真愚蠢，我也和你一样做过同样的梦，我梦到与此地有一个沙漠之隔的教堂，一个牧羊人经常在那里过夜，如果我在那里挖掘，我会找到宝藏，可我不会像你这么蠢。”</p><p>​        我感谢这个不相信梦的家伙，我找到我的宝藏了。我站起来拍拍身上的沙子，金字塔正朝我笑呢。</p><p>​        我回到了教堂，在无果树下挖掘。“老巫师”我自言自语，“你什么都知道，甚至还为我留了回来的钱，看到我衣衫褴褛的跑回来，他们都笑了，你就不能让我免遭这一切？”</p><p>​        “不能，”我听到有个声音说，“如果我告诉你这一切，那你就看不到金字塔了，它很壮美，不是吗？”</p><p>​        那分明是炼金术士的声音。<br>​                                                                    ——《牧羊少年的奇幻之旅》</p>]]></content>
      
      
      <categories>
          
          <category> 感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
